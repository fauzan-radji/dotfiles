{"version":3,"sources":["../webpack/bootstrap","../external \"vscode\"","../external \"util\"",".././node_modules/php-parser/src/ast/statement.js",".././node_modules/php-parser/src/ast/expression.js",".././node_modules/php-parser/src/ast/node.js",".././node_modules/php-parser/src/ast/literal.js",".././node_modules/php-parser/src/ast/operation.js",".././node_modules/php-parser/src/ast/declaration.js",".././node_modules/php-parser/src/ast/reference.js","../external \"fs\"",".././node_modules/php-parser/src/ast/block.js",".././node_modules/php-parser/src/ast/lookup.js",".././node_modules/php-parser/src/ast/comment.js",".././node_modules/php-parser/src/ast/constantstatement.js",".././node_modules/php-parser/src/ast/function.js","../external \"child_process\"","../external \"os\"",".././node_modules/php-parser/src/index.js",".././node_modules/php-parser/src/lexer.js",".././node_modules/php-parser/src/lexer/comments.js",".././node_modules/php-parser/src/lexer/initial.js",".././node_modules/php-parser/src/lexer/numbers.js",".././node_modules/php-parser/src/lexer/property.js",".././node_modules/php-parser/src/lexer/scripting.js",".././node_modules/php-parser/src/lexer/strings.js",".././node_modules/php-parser/src/lexer/tokens.js",".././node_modules/php-parser/src/lexer/utils.js",".././node_modules/php-parser/src/parser.js",".././node_modules/php-parser/src/parser/array.js",".././node_modules/php-parser/src/parser/class.js",".././node_modules/php-parser/src/parser/comment.js",".././node_modules/php-parser/src/parser/expr.js",".././node_modules/php-parser/src/parser/function.js",".././node_modules/php-parser/src/parser/if.js",".././node_modules/php-parser/src/parser/loops.js",".././node_modules/php-parser/src/parser/main.js",".././node_modules/php-parser/src/parser/namespace.js",".././node_modules/php-parser/src/parser/scalar.js",".././node_modules/php-parser/src/parser/statement.js",".././node_modules/php-parser/src/parser/switch.js",".././node_modules/php-parser/src/parser/try.js",".././node_modules/php-parser/src/parser/utils.js",".././node_modules/php-parser/src/parser/variable.js",".././node_modules/php-parser/src/tokens.js",".././node_modules/php-parser/src/ast.js",".././node_modules/php-parser/src/ast/location.js",".././node_modules/php-parser/src/ast/position.js",".././node_modules/php-parser/src/ast/array.js",".././node_modules/php-parser/src/ast/arrowfunc.js",".././node_modules/php-parser/src/ast/assign.js",".././node_modules/php-parser/src/ast/assignref.js",".././node_modules/php-parser/src/ast/bin.js",".././node_modules/php-parser/src/ast/boolean.js",".././node_modules/php-parser/src/ast/break.js",".././node_modules/php-parser/src/ast/byref.js",".././node_modules/php-parser/src/ast/call.js",".././node_modules/php-parser/src/ast/case.js",".././node_modules/php-parser/src/ast/cast.js",".././node_modules/php-parser/src/ast/catch.js",".././node_modules/php-parser/src/ast/class.js",".././node_modules/php-parser/src/ast/classconstant.js",".././node_modules/php-parser/src/ast/clone.js",".././node_modules/php-parser/src/ast/closure.js",".././node_modules/php-parser/src/ast/commentblock.js",".././node_modules/php-parser/src/ast/commentline.js",".././node_modules/php-parser/src/ast/constant.js",".././node_modules/php-parser/src/ast/continue.js",".././node_modules/php-parser/src/ast/declare.js",".././node_modules/php-parser/src/ast/declaredirective.js",".././node_modules/php-parser/src/ast/do.js",".././node_modules/php-parser/src/ast/echo.js",".././node_modules/php-parser/src/ast/empty.js",".././node_modules/php-parser/src/ast/encapsed.js",".././node_modules/php-parser/src/ast/encapsedpart.js",".././node_modules/php-parser/src/ast/entry.js",".././node_modules/php-parser/src/ast/error.js",".././node_modules/php-parser/src/ast/eval.js",".././node_modules/php-parser/src/ast/exit.js",".././node_modules/php-parser/src/ast/expressionstatement.js",".././node_modules/php-parser/src/ast/for.js",".././node_modules/php-parser/src/ast/foreach.js",".././node_modules/php-parser/src/ast/global.js",".././node_modules/php-parser/src/ast/goto.js",".././node_modules/php-parser/src/ast/halt.js",".././node_modules/php-parser/src/ast/identifier.js",".././node_modules/php-parser/src/ast/if.js",".././node_modules/php-parser/src/ast/include.js",".././node_modules/php-parser/src/ast/inline.js",".././node_modules/php-parser/src/ast/interface.js",".././node_modules/php-parser/src/ast/isset.js",".././node_modules/php-parser/src/ast/label.js",".././node_modules/php-parser/src/ast/list.js",".././node_modules/php-parser/src/ast/magic.js",".././node_modules/php-parser/src/ast/method.js",".././node_modules/php-parser/src/ast/name.js",".././node_modules/php-parser/src/ast/namespace.js",".././node_modules/php-parser/src/ast/new.js",".././node_modules/php-parser/src/ast/noop.js",".././node_modules/php-parser/src/ast/nowdoc.js",".././node_modules/php-parser/src/ast/nullkeyword.js",".././node_modules/php-parser/src/ast/number.js",".././node_modules/php-parser/src/ast/offsetlookup.js",".././node_modules/php-parser/src/ast/parameter.js",".././node_modules/php-parser/src/ast/parentreference.js",".././node_modules/php-parser/src/ast/post.js",".././node_modules/php-parser/src/ast/pre.js",".././node_modules/php-parser/src/ast/print.js",".././node_modules/php-parser/src/ast/program.js",".././node_modules/php-parser/src/ast/property.js",".././node_modules/php-parser/src/ast/propertylookup.js",".././node_modules/php-parser/src/ast/propertystatement.js",".././node_modules/php-parser/src/ast/retif.js",".././node_modules/php-parser/src/ast/return.js",".././node_modules/php-parser/src/ast/selfreference.js",".././node_modules/php-parser/src/ast/silent.js",".././node_modules/php-parser/src/ast/static.js",".././node_modules/php-parser/src/ast/staticvariable.js",".././node_modules/php-parser/src/ast/staticlookup.js",".././node_modules/php-parser/src/ast/staticreference.js",".././node_modules/php-parser/src/ast/string.js",".././node_modules/php-parser/src/ast/switch.js",".././node_modules/php-parser/src/ast/throw.js",".././node_modules/php-parser/src/ast/trait.js",".././node_modules/php-parser/src/ast/traitalias.js",".././node_modules/php-parser/src/ast/traitprecedence.js",".././node_modules/php-parser/src/ast/traituse.js",".././node_modules/php-parser/src/ast/try.js",".././node_modules/php-parser/src/ast/typereference.js",".././node_modules/php-parser/src/ast/unary.js",".././node_modules/php-parser/src/ast/unset.js",".././node_modules/php-parser/src/ast/usegroup.js",".././node_modules/php-parser/src/ast/useitem.js",".././node_modules/php-parser/src/ast/variable.js",".././node_modules/php-parser/src/ast/variadic.js",".././node_modules/php-parser/src/ast/while.js",".././node_modules/php-parser/src/ast/yield.js",".././node_modules/php-parser/src/ast/yieldfrom.js",".././src/utils.ts",".././src/laravel.ts",".././src/php/index.ts",".././src/parser/ModelParser.ts",".././src/parser/ResourceParser.ts",".././src/parser/Handler.ts",".././src/parser/FactoryParser.ts",".././src/parser/index.ts",".././src/ViewItemProvider.ts",".././src/php/view.ts",".././src/ModelItemProvider.ts",".././src/php/model.ts",".././src/php/laravelIdeHelper.ts",".././src/php/content/ide_helper.ts",".././src/ConfigItemProvider.ts",".././src/php/config.ts",".././src/RouterItemProvider.ts",".././src/php/router.ts",".././src/TranslationItemProvider.ts",".././src/php/translation.ts",".././src/extension.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Node","extends","kind","docs","location","apply","this","leadingComments","loc","setTrailingComments","trailingComments","destroy","node","Error","Array","concat","includeToken","parser","end","line","lexer","yylloc","last_line","column","last_column","offset","ast","withSource","source","_input","substring","start","type","constructor","Expression","raw","Expr","Statement","Declaration","parseFlags","flags","isAbstract","isFinal","visibility","isStatic","Reference","children","filter","Boolean","what","KIND","constants","args","byref","nullable","arguments","body","tokens","AST","combine","src","to","keys","length","k","val","isArray","engine","options","version","split","parseInt","isNaN","getStringBuffer","buffer","write","toString","parseEval","mode_eval","all_tokens","parse","parseCode","filename","tokenGetAll","EOF","names","values","setInput","token","lex","result","entry","yytext","first_line","push","default","tok","debug","comment_tokens","asp_tags","short_tags","yyprevcol","keywords","__class__","T_CLASS_C","__trait__","T_TRAIT_C","__function__","T_FUNC_C","__method__","T_METHOD_C","__line__","T_LINE","__file__","T_FILE","__dir__","T_DIR","__namespace__","T_NS_C","exit","T_EXIT","die","function","T_FUNCTION","const","T_CONST","return","T_RETURN","try","T_TRY","catch","T_CATCH","finally","T_FINALLY","throw","T_THROW","if","T_IF","elseif","T_ELSEIF","endif","T_ENDIF","else","T_ELSE","while","T_WHILE","endwhile","T_ENDWHILE","do","T_DO","for","T_FOR","endfor","T_ENDFOR","foreach","T_FOREACH","endforeach","T_ENDFOREACH","declare","T_DECLARE","enddeclare","T_ENDDECLARE","instanceof","T_INSTANCEOF","as","T_AS","switch","T_SWITCH","endswitch","T_ENDSWITCH","case","T_CASE","T_DEFAULT","break","T_BREAK","continue","T_CONTINUE","goto","T_GOTO","echo","T_ECHO","print","T_PRINT","class","T_CLASS","interface","T_INTERFACE","trait","T_TRAIT","T_EXTENDS","implements","T_IMPLEMENTS","new","T_NEW","clone","T_CLONE","var","T_VAR","eval","T_EVAL","include","T_INCLUDE","include_once","T_INCLUDE_ONCE","T_REQUIRE","require_once","T_REQUIRE_ONCE","namespace","T_NAMESPACE","use","T_USE","insteadof","T_INSTEADOF","global","T_GLOBAL","isset","T_ISSET","empty","T_EMPTY","__halt_compiler","T_HALT_COMPILER","static","T_STATIC","abstract","T_ABSTRACT","final","T_FINAL","private","T_PRIVATE","protected","T_PROTECTED","public","T_PUBLIC","unset","T_UNSET","list","T_LIST","array","T_ARRAY","callable","T_CALLABLE","or","T_LOGICAL_OR","and","T_LOGICAL_AND","xor","T_LOGICAL_XOR","castKeywords","int","T_INT_CAST","integer","real","T_DOUBLE_CAST","double","float","string","T_STRING_CAST","binary","T_ARRAY_CAST","T_OBJECT_CAST","bool","T_BOOL_CAST","boolean","T_UNSET_CAST","input","size","yylineno","first_offset","first_column","prev_offset","prev_line","prev_column","fn","T_FN","done","conditionStack","begin","heredoc_label","label","indentation","indentation_uses_spaces","finished","first_encaps_node","ch","unput","tryMatch","text","ahead","tryMatchCaseless","toLowerCase","consume","getState","setState","state","appendToken","next","T_WHITESPACE","T_COMMENT","T_DOC_COMMENT","T_OPEN_TAG","T_OPEN_TAG_WITH_ECHO","T_CLOSE_TAG","condition","curCondition","stateCb","popState","pop","shift","tName","e","console","error","stack","forEach","ext","aspTagMode","is_WHITESPACE","nextINITIAL","matchINITIAL","T_INLINE_HTML","MAX_LENGTH_OF_LONG","long_min_digits","process","arch","consume_NUM","hasPoint","is_HEX","consume_HNUM","consume_BNUM","is_NUM","prev","undo","is_NUM_START","consume_LNUM","T_DNUMBER","T_LNUMBER","matchST_LOOKING_FOR_PROPERTY","T_OBJECT_OPERATOR","is_LABEL_START","consume_LABEL","T_STRING","matchST_LOOKING_FOR_VARNAME","T_STRING_VARNAME","matchST_VAR_OFFSET","T_NUM_STRING","T_VARIABLE","T_ENCAPSED_AND_WHITESPACE","is_TOKEN","matchST_IN_SCRIPTING","consume_TOKEN","T_CONSTANT_ENCAPSED_STRING","ST_DOUBLE_QUOTES","nextCH","newline","valid_after_heredoc","valid_after_heredoc_73","is_HEREDOC","revert","is_TABSPACE","tChar","yyoffset","is_LABEL","yylabel","includes","prematch_ENDOFDOC","T_START_HEREDOC","prefix","isDOC_MATCH","consumeLeadingSpaces","prev_ch","indentation_uses_tabs","leading_ch","matchST_NOWDOC","T_END_HEREDOC","matchST_HEREDOC","T_DOLLAR_OPEN_CURLY_BRACES","consume_VARIABLE","T_CURLY_OPEN","matchST_BACKQUOTE","matchST_DOUBLE_QUOTES","id","T_YIELD_FROM","T_YIELD","tokenTerminals","$","nchar","T_DEC","T_MINUS_EQUAL","T_NS_SEPARATOR","T_DIV_EQUAL","T_DOUBLE_COLON","initial","consume_TABSPACE","yylen","castToken","castId","T_DOUBLE_ARROW","T_IS_IDENTICAL","T_IS_EQUAL","T_INC","T_PLUS_EQUAL","T_IS_NOT_IDENTICAL","T_IS_NOT_EQUAL","T_COALESCE_EQUAL","T_COALESCE","T_SL_EQUAL","T_SL","T_SPACESHIP","T_IS_SMALLER_OR_EQUAL","T_IS_GREATER_OR_EQUAL","T_SR_EQUAL","T_SR","T_MUL_EQUAL","T_POW_EQUAL","T_POW","T_CONCAT_EQUAL","T_ELLIPSIS","T_MOD_EQUAL","T_AND_EQUAL","T_BOOLEAN_AND","T_OR_EQUAL","T_BOOLEAN_OR","T_XOR_EQUAL","charCodeAt","indexOf","isNumber","parseFloat","isFinite","extractDoc","extractTokens","suppressErrors","mapIt","item","entries","IDENTIFIER","Map","map","VARIABLE","SCALAR","T_MAGIC_CONST","T_MEMBER_FLAGS","EOS","EXPR","getTokenName","code","_errors","currentNamespace","_docs","_tokens","_docIndex","_lastNode","innerList","innerListForm","program","childs","read_start","errors","checkNodes","position","log","join","raiseError","message","msgExpect","expect","err","SyntaxError","lineNumber","fileName","columnNumber","prepare","msg","symbol","slice","postBuild","self","max","expectEndOfStatement","ignoreStack","showlog","trim","found","read_comment","read_doc_comment","is","has","read_array","shortForm","items","read_array_pair_list","read_list","read_array_pair","byRef","unpack","read_variable","read_expr","expr","read_class_declaration_statement","flag","read_class_modifiers","propName","propExtends","read_extends_from","propImplements","read_implements_list","read_class_body","read_class_modifier","read_trait_use_statement","read_member_flags","read_function","variables","read_variable_list","read_constant_list","properties","read_optional_type","constName","asInterface","idx","read_type","variant","read_interface_declaration_statement","read_interface_extends_list","read_interface_body","method","read_function_declaration","read_trait_declaration_statement","traits","read_namespace_name","adaptations","read_trait_use_alias","methodName","read_name_list","alias","read_expr_item","read_class_name_reference","trueArg","read_expr_cast","read_isset_variable","read_isset_variables","read_function_list","read_internal_functions_in_yacc","expression","read_optional_expr","stopToken","read_exit_expr","parenthesizedExpression","handleDereferencable","read_encapsed_string","assign","isInner","assignList","hasItem","read_new_expr","useDie","read_inline_function","backup","isConst","read_assignref","read_scalar","left","right","isRef","is_reference","params","read_parameter_list","returnType","read_argument_list","read_new_class_name","read_static_getter","recursive_variable_chain_scan","read_dereferencable","is_variadic","closure","read_code_block","nodeName","nameNode","read_lexical_vars","read_lexical_var_list","read_lexical_var","read_byref","read_parameter","parameterName","isVariadic","read_non_empty_argument_list","wasVariadic","argument","read_argument","typereference","types","read_if","test","read_if_expr","alternate","read_elseif_short","read_else_short","read_inner_statement","read_statement","read_while","read_short_form","read_do","read_for","init","increment","read_foreach","read_foreach_variable","isShort","read_namespace","read_top_statement","read_top_statements","resolution","reference","RELATIVE_NAME","resolveReference","relative","read_use_statement","read_use_type","read_use_declaration","read_use_declarations","typed","read_use_alias","aliasName","useitem","TYPE_FUNCTION","TYPE_CONST","specialChar","f","String","fromCharCode","v","resolve_special_chars","doubleQuote","replace","$match","p1","p2","fromCodePoint","substr","remove_heredoc_leading_whitespace_chars","check_heredoc_indentation_level","matchedChar","removementRegExp","RegExp","removementFirstEncapsNodeRegExp","textSize","leadingWhitespaceCharCount","inCoutingState","chToCheck","inCheckState","read_dereferencable_scalar","isDoubleQuote","get_magic_constant","lastCh","read_encapsed_string_item","encapsedPart","syntax","curly","varName","read_simple_variable","read_encaps_var_offset","isBinary","labelStart","encapsed","TYPE_SHELL","TYPE_STRING","TYPE_HEREDOC","toUpperCase","statement","read_const_list","read_inner_statements","read_declare_list","directive","read_switch","level","current","read_variable_declarations","expressions","prevChar","fixFirstLine","directives","MODE_SHORT","MODE_BLOCK","MODE_NONE","read_try","labelNameText","labelName","top","read_switch_case_list","read_case_list","always","catches","variable","separator","preserveFirstSeparator","itemResult","cb","swapLocations","read_only","read_reference_variable","literal","read_what","is_static_lookup","recursive_scan_loop","isSquareBracket","num","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","Location","Position","withPositions","precedence","index","operator","isRightAssociative","target","first","last","resolveLocations","resolvePrecedence","lLevel","rLevel","falseExpr","astNode","instance","stackUid","ctor","Operation","Literal","impl","isAnonymous","ConstantStatement","ClassConstant","uses","Comment","Block","Declare","Encapsed","TYPE_OFFSET","expected","after","Identifier","once","_Function","Name","isRelative","UNQUALIFIED_NAME","QUALIFIED_NAME","FULL_QUALIFIED_NAME","withBrackets","Lookup","variadic","ParentReference","comments","PropertyStatement","trueExpr","SelfReference","defaultValue","StaticReference","unicode","instead","TypeReference","UseItem","activeWorkspace","workspaceFolders","path","workspace","uri","fsPath","getDefaultModelNamespace","modelNamespace","getConfiguration","endsWith","DOCUMENT_SELECTOR","scheme","language","TRIGGER_CHARACTERS","script","getScript","out","execute","exec","running","some","unixPlatforms","command","getCommand","Promise","resolve","stdout","stderr","filePath","isDocker","getDockerscript","file","phpParser","aliasToken","className","getClassNameFromToken","getUseClasses","find","j","joinClassNameFromTokens","classNameTokens","hasVariable","usedVariableToken","reverse","checkForDoubleColon","checkIfTheDoubleColonIsCorrect","isCorrectDoubleColon","indexForDoubleColon","tokensFromDoubleColon","parentTokens","usedVariableTokenOrClassName","getUsedVariableTokenOrClassName","isInsideFunctionParams","variableToken","firstVariableToken","getFirstVariableToken","hasDependency","hasFunction","getUsedVariableFirstIndexOrClassName","variableFirstIndexOrClassName","getClassNameFromDependencyInjection","getClassNameFromEquality","equalityIndex","tokensWithEquality","aliases","getAliasToken","lineTokens","beforeTokens","checkForAlias","tokensOnTheSameLine","tokensToString","document","cachedParseFunction","viewAliases","queryAliases","configAliases","routeAliases","translateAliases","parseTokens","getText","php7","handler","eloquentAliasToken","getEloquentAliasToken","hasModel","resourceAliasToken","getResourceAliasToken","hasResource","factoryAliasToken","getFactoryAliasToken","hasFactory","getFullClassName","hasAlias","views","watcher","syncViews","watchViews","hasView","view","Constant","range","getWordRangeAtPosition","run","then","JSON","createFileSystemWatcher","onDidCreate","onChange","onDidDelete","onDidChange","setInterval","attributes","model","getClassName","syncModel","attribute","getModelAttributes","exists","Uri","getFileUri","workspaceEdit","createFile","ignoreIfExists","applyEdit","InsertContent","insertToGitignore","getIdeHelperPath","startOfFile","insert","showInformationMessage","openTextDocument","save","getGitignoreUri","lastLineIndex","lineCount","content","elements","syncConfig","hasConfig","element","routes","syncRoutes","hasRoute","route","translations","syncTranslations","hasTranslation","translation","activate","context","subscriptions","registerCommand","generate","registerCompletionItemProvider","deactivate"],"mappings":"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","file":"extension.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 137);\n","module.exports = require(\"vscode\");","module.exports = require(\"util\");","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"statement\";\n\n/**\n * Any statement.\n * @constructor Statement\n * @extends {Node}\n */\nmodule.exports = Node.extends(KIND, function Statement(kind, docs, location) {\n  Node.apply(this, [kind || KIND, docs, location]);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"expression\";\n\n/**\n * Any expression node. Since the left-hand side of an assignment may\n * be any expression in general, an expression can also be a pattern.\n * @constructor Expression\n * @extends {Node}\n */\nmodule.exports = Node.extends(KIND, function Expression(kind, docs, location) {\n  Node.apply(this, [kind || KIND, docs, location]);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\n/**\n * A generic AST node\n * @constructor Node\n * @property {Location|null} loc\n * @property {Comment[]} leadingComments\n * @property {Comment[]?} trailingComments\n * @property {String} kind\n */\nconst Node = function Node(kind, docs, location) {\n  this.kind = kind;\n  if (docs) {\n    this.leadingComments = docs;\n  }\n  if (location) {\n    this.loc = location;\n  }\n};\n\n/**\n * Attach comments to current node\n * @param {*} docs\n */\nNode.prototype.setTrailingComments = function (docs) {\n  this.trailingComments = docs;\n};\n\n/**\n * Destroying an unused node\n */\nNode.prototype.destroy = function (node) {\n  if (!node) {\n    throw new Error(\n      \"Node already initialized, you must swap with another node\"\n    );\n  }\n  if (this.leadingComments) {\n    if (node.leadingComments) {\n      node.leadingComments = Array.concat(\n        this.leadingComments,\n        node.leadingComments\n      );\n    } else {\n      node.leadingComments = this.leadingComments;\n    }\n  }\n  if (this.trailingComments) {\n    if (node.trailingComments) {\n      node.trailingComments = Array.concat(\n        this.trailingComments,\n        node.trailingComments\n      );\n    } else {\n      node.trailingComments = this.trailingComments;\n    }\n  }\n  return node;\n};\n\n/**\n * Includes current token position of the parser\n * @param {*} parser\n */\nNode.prototype.includeToken = function (parser) {\n  if (this.loc) {\n    if (this.loc.end) {\n      this.loc.end.line = parser.lexer.yylloc.last_line;\n      this.loc.end.column = parser.lexer.yylloc.last_column;\n      this.loc.end.offset = parser.lexer.offset;\n    }\n    if (parser.ast.withSource) {\n      this.loc.source = parser.lexer._input.substring(\n        this.loc.start.offset,\n        parser.lexer.offset\n      );\n    }\n  }\n  return this;\n};\n\n/**\n * Helper for extending the Node class\n * @param {String} type\n * @param {Function} constructor\n * @return {Function}\n */\nNode.extends = function (type, constructor) {\n  constructor.prototype = Object.create(this.prototype);\n  constructor.extends = this.extends;\n  constructor.prototype.constructor = constructor;\n  constructor.kind = type;\n  return constructor;\n};\n\nmodule.exports = Node;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"literal\";\n\n/**\n * Defines an array structure\n * @constructor Literal\n * @extends {Expression}\n * @property {string} raw\n * @property {Node|string|number|boolean|null} value\n */\nmodule.exports = Expression.extends(KIND, function Literal(\n  kind,\n  value,\n  raw,\n  docs,\n  location\n) {\n  Expression.apply(this, [kind || KIND, docs, location]);\n  this.value = value;\n  if (raw) {\n    this.raw = raw;\n  }\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expr = require(\"./expression\");\nconst KIND = \"operation\";\n\n/**\n * Defines binary operations\n * @constructor Operation\n * @extends {Expression}\n */\nmodule.exports = Expr.extends(KIND, function Operation(kind, docs, location) {\n  Expr.apply(this, [kind || KIND, docs, location]);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"declaration\";\n\nconst IS_UNDEFINED = \"\";\nconst IS_PUBLIC = \"public\";\nconst IS_PROTECTED = \"protected\";\nconst IS_PRIVATE = \"private\";\n\n/**\n * A declaration statement (function, class, interface...)\n * @constructor Declaration\n * @extends {Statement}\n * @property {Identifier|string} name\n */\nconst Declaration = Statement.extends(KIND, function Declaration(\n  kind,\n  name,\n  docs,\n  location\n) {\n  Statement.apply(this, [kind || KIND, docs, location]);\n  this.name = name;\n});\n\n/**\n * Generic flags parser\n * @param {Integer[]} flags\n * @return {void}\n */\nDeclaration.prototype.parseFlags = function (flags) {\n  this.isAbstract = flags[2] === 1;\n  this.isFinal = flags[2] === 2;\n  if (this.kind !== \"class\") {\n    if (flags[0] === -1) {\n      this.visibility = IS_UNDEFINED;\n    } else if (flags[0] === null) {\n      this.visibility = null;\n    } else if (flags[0] === 0) {\n      this.visibility = IS_PUBLIC;\n    } else if (flags[0] === 1) {\n      this.visibility = IS_PROTECTED;\n    } else if (flags[0] === 2) {\n      this.visibility = IS_PRIVATE;\n    }\n    this.isStatic = flags[1] === 1;\n  }\n};\n\nmodule.exports = Declaration;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"reference\";\n\n/**\n * Defines a reference node\n * @constructor Reference\n * @extends {Node}\n */\nconst Reference = Node.extends(KIND, function Reference(kind, docs, location) {\n  Node.apply(this, [kind || KIND, docs, location]);\n});\n\nmodule.exports = Reference;\n","module.exports = require(\"fs\");","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"block\";\n\n/**\n * A block statement, i.e., a sequence of statements surrounded by braces.\n * @constructor Block\n * @extends {Statement}\n * @property {Node[]} children\n */\nmodule.exports = Statement.extends(KIND, function Block(\n  kind,\n  children,\n  docs,\n  location\n) {\n  Statement.apply(this, [kind || KIND, docs, location]);\n  this.children = children.filter(Boolean);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expr = require(\"./expression\");\nconst KIND = \"lookup\";\n\n/**\n * Lookup on an offset in the specified object\n * @constructor Lookup\n * @extends {Expression}\n * @property {Expression} what\n * @property {Expression} offset\n */\nmodule.exports = Expr.extends(KIND, function Lookup(\n  kind,\n  what,\n  offset,\n  docs,\n  location\n) {\n  Expr.apply(this, [kind || KIND, docs, location]);\n  this.what = what;\n  this.offset = offset;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\n\n/**\n * Abstract documentation node (ComentLine or CommentBlock)\n * @constructor Comment\n * @extends {Node}\n * @property {String} value\n */\nmodule.exports = Node.extends(\"comment\", function Comment(\n  kind,\n  value,\n  docs,\n  location\n) {\n  Node.apply(this, [kind, docs, location]);\n  this.value = value;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"constantstatement\";\n\n/**\n * Declares a constants into the current scope\n * @constructor ConstantStatement\n * @extends {Statement}\n * @property {Constant[]} constants\n */\nmodule.exports = Statement.extends(KIND, function ConstantStatement(\n  kind,\n  constants,\n  docs,\n  location\n) {\n  Statement.apply(this, [kind || KIND, docs, location]);\n  this.constants = constants;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Declaration = require(\"./declaration\");\nconst KIND = \"function\";\n\n/**\n * Defines a classic function\n * @constructor Function\n * @extends {Declaration}\n * @property {Parameter[]} arguments\n * @property {Identifier} type\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {Block|null} body\n */\nmodule.exports = Declaration.extends(KIND, function _Function(\n  name,\n  args,\n  byref,\n  type,\n  nullable,\n  docs,\n  location\n) {\n  Declaration.apply(this, [KIND, name, docs, location]);\n  this.arguments = args;\n  this.byref = byref;\n  this.type = type;\n  this.nullable = nullable;\n  this.body = null;\n});\n","module.exports = require(\"child_process\");","module.exports = require(\"os\");","/**\n * Copyright (C) 2020 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst lexer = require(\"./lexer\");\nconst parser = require(\"./parser\");\nconst tokens = require(\"./tokens\");\nconst AST = require(\"./ast\");\n\n/**\n * @private\n */\nfunction combine(src, to) {\n  const keys = Object.keys(src);\n  let i = keys.length;\n  while (i--) {\n    const k = keys[i];\n    const val = src[k];\n    if (val === null) {\n      delete to[k];\n    } else if (typeof val === \"function\") {\n      to[k] = val.bind(to);\n    } else if (Array.isArray(val)) {\n      to[k] = Array.isArray(to[k]) ? to[k].concat(val) : val;\n    } else if (typeof val === \"object\") {\n      to[k] = typeof to[k] === \"object\" ? combine(val, to[k]) : val;\n    } else {\n      to[k] = val;\n    }\n  }\n  return to;\n}\n\n/**\n * Initialise a new parser instance with the specified options\n *\n * @class\n * @tutorial Engine\n * @example\n * var parser = require('php-parser');\n * var instance = new parser({\n *   parser: {\n *     extractDoc: true,\n *     suppressErrors: true,\n *     version: 704 // or '7.4'\n *   },\n *   ast: {\n *     withPositions: true\n *   },\n *   lexer: {\n *     short_tags: true,\n *     asp_tags: true\n *   }\n * });\n *\n * var evalAST = instance.parseEval('some php code');\n * var codeAST = instance.parseCode('<?php some php code', 'foo.php');\n * var tokens = instance.tokenGetAll('<?php some php code');\n *\n * @param {Object} options - List of options\n * @property {Lexer} lexer\n * @property {Parser} parser\n * @property {AST} ast\n * @property {Object} tokens\n */\nconst engine = function (options) {\n  if (typeof this === \"function\") {\n    return new this(options);\n  }\n  this.tokens = tokens;\n  this.lexer = new lexer(this);\n  this.ast = new AST();\n  this.parser = new parser(this.lexer, this.ast);\n  if (options && typeof options === \"object\") {\n    // disable php7 from lexer if already disabled from parser\n    if (options.parser) {\n      if (!options.lexer) {\n        options.lexer = {};\n      }\n      if (options.parser.version) {\n        if (typeof options.parser.version === \"string\") {\n          let version = options.parser.version.split(\".\");\n          version = parseInt(version[0]) * 100 + parseInt(version[1]);\n          if (isNaN(version)) {\n            throw new Error(\"Bad version number : \" + options.parser.version);\n          } else {\n            options.parser.version = version;\n          }\n        } else if (typeof options.parser.version !== \"number\") {\n          throw new Error(\"Expecting a number for version\");\n        }\n        if (options.parser.version < 500 || options.parser.version > 704) {\n          throw new Error(\"Can only handle versions between 5.x to 7.x\");\n        }\n      }\n    }\n    combine(options, this);\n\n    // same version flags based on parser options\n    this.lexer.version = this.parser.version;\n  }\n};\n\n/**\n * Check if the inpyt is a buffer or a string\n * @param  {Buffer|String} buffer Input value that can be either a buffer or a string\n * @return {String}   Returns the string from input\n */\nconst getStringBuffer = function (buffer) {\n  return typeof buffer.write === \"function\" ? buffer.toString() : buffer;\n};\n\n/**\n * Creates a new instance (Helper)\n * @param {Object} options\n * @return {Engine}\n * @private\n */\nengine.create = function (options) {\n  return new engine(options);\n};\n\n/**\n * Evaluate the buffer\n * @private\n */\nengine.parseEval = function (buffer, options) {\n  const self = new engine(options);\n  return self.parseEval(buffer);\n};\n\n/**\n * Parse an evaluating mode string (no need to open php tags)\n * @param {String} buffer\n * @return {Program}\n */\nengine.prototype.parseEval = function (buffer) {\n  this.lexer.mode_eval = true;\n  this.lexer.all_tokens = false;\n  buffer = getStringBuffer(buffer);\n  return this.parser.parse(buffer, \"eval\");\n};\n\n/**\n * Static function that parse a php code with open/close tags\n * @private\n */\nengine.parseCode = function (buffer, filename, options) {\n  if (typeof filename === \"object\" && !options) {\n    // retro-compatibility\n    options = filename;\n    filename = \"unknown\";\n  }\n  const self = new engine(options);\n  return self.parseCode(buffer, filename);\n};\n\n/**\n * Function that parse a php code with open/close tags\n *\n * Sample code :\n * ```php\n * <?php $x = 1;\n * ```\n *\n * Usage :\n * ```js\n * var parser = require('php-parser');\n * var phpParser = new parser({\n *   // some options\n * });\n * var ast = phpParser.parseCode('...php code...', 'foo.php');\n * ```\n * @param {String} buffer - The code to be parsed\n * @param {String} filename - Filename\n * @return {Program}\n */\nengine.prototype.parseCode = function (buffer, filename) {\n  this.lexer.mode_eval = false;\n  this.lexer.all_tokens = false;\n  buffer = getStringBuffer(buffer);\n  return this.parser.parse(buffer, filename);\n};\n\n/**\n * Split the buffer into tokens\n * @private\n */\nengine.tokenGetAll = function (buffer, options) {\n  const self = new engine(options);\n  return self.tokenGetAll(buffer);\n};\n\n/**\n * Extract tokens from the specified buffer.\n * > Note that the output tokens are *STRICLY* similar to PHP function `token_get_all`\n * @param {String} buffer\n * @return {String[]} - Each item can be a string or an array with following informations [token_name, text, line_number]\n */\nengine.prototype.tokenGetAll = function (buffer) {\n  this.lexer.mode_eval = false;\n  this.lexer.all_tokens = true;\n  buffer = getStringBuffer(buffer);\n  const EOF = this.lexer.EOF;\n  const names = this.tokens.values;\n  this.lexer.setInput(buffer);\n  let token = this.lexer.lex() || EOF;\n  const result = [];\n  while (token != EOF) {\n    let entry = this.lexer.yytext;\n    if (names.hasOwnProperty(token)) {\n      entry = [names[token], entry, this.lexer.yylloc.first_line];\n    }\n    result.push(entry);\n    token = this.lexer.lex() || EOF;\n  }\n  return result;\n};\n\n// exports the function\nmodule.exports = engine;\n\n// makes libraries public\nmodule.exports.tokens = tokens;\nmodule.exports.lexer = lexer;\nmodule.exports.AST = AST;\nmodule.exports.parser = parser;\nmodule.exports.combine = combine;\n\n// allow the default export in index.d.ts\nmodule.exports.default = engine;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\n/**\n * This is the php lexer. It will tokenize the string for helping the\n * parser to build the AST from its grammar.\n *\n * @class\n * @property {Integer} EOF\n * @property {Boolean} all_tokens defines if all tokens must be retrieved (used by token_get_all only)\n * @property {Boolean} comment_tokens extracts comments tokens\n * @property {Boolean} mode_eval enables the evald mode (ignore opening tags)\n * @property {Boolean} asp_tags disables by default asp tags mode\n * @property {Boolean} short_tags enables by default short tags mode\n * @property {Object} keywords List of php keyword\n * @property {Object} castKeywords List of php keywords for type casting\n */\nconst lexer = function (engine) {\n  this.engine = engine;\n  this.tok = this.engine.tokens.names;\n  this.EOF = 1;\n  this.debug = false;\n  this.all_tokens = true;\n  this.comment_tokens = false;\n  this.mode_eval = false;\n  this.asp_tags = false;\n  this.short_tags = false;\n  this.version = 704;\n  this.yyprevcol = 0;\n  this.keywords = {\n    __class__: this.tok.T_CLASS_C,\n    __trait__: this.tok.T_TRAIT_C,\n    __function__: this.tok.T_FUNC_C,\n    __method__: this.tok.T_METHOD_C,\n    __line__: this.tok.T_LINE,\n    __file__: this.tok.T_FILE,\n    __dir__: this.tok.T_DIR,\n    __namespace__: this.tok.T_NS_C,\n    exit: this.tok.T_EXIT,\n    die: this.tok.T_EXIT,\n    function: this.tok.T_FUNCTION,\n    const: this.tok.T_CONST,\n    return: this.tok.T_RETURN,\n    try: this.tok.T_TRY,\n    catch: this.tok.T_CATCH,\n    finally: this.tok.T_FINALLY,\n    throw: this.tok.T_THROW,\n    if: this.tok.T_IF,\n    elseif: this.tok.T_ELSEIF,\n    endif: this.tok.T_ENDIF,\n    else: this.tok.T_ELSE,\n    while: this.tok.T_WHILE,\n    endwhile: this.tok.T_ENDWHILE,\n    do: this.tok.T_DO,\n    for: this.tok.T_FOR,\n    endfor: this.tok.T_ENDFOR,\n    foreach: this.tok.T_FOREACH,\n    endforeach: this.tok.T_ENDFOREACH,\n    declare: this.tok.T_DECLARE,\n    enddeclare: this.tok.T_ENDDECLARE,\n    instanceof: this.tok.T_INSTANCEOF,\n    as: this.tok.T_AS,\n    switch: this.tok.T_SWITCH,\n    endswitch: this.tok.T_ENDSWITCH,\n    case: this.tok.T_CASE,\n    default: this.tok.T_DEFAULT,\n    break: this.tok.T_BREAK,\n    continue: this.tok.T_CONTINUE,\n    goto: this.tok.T_GOTO,\n    echo: this.tok.T_ECHO,\n    print: this.tok.T_PRINT,\n    class: this.tok.T_CLASS,\n    interface: this.tok.T_INTERFACE,\n    trait: this.tok.T_TRAIT,\n    extends: this.tok.T_EXTENDS,\n    implements: this.tok.T_IMPLEMENTS,\n    new: this.tok.T_NEW,\n    clone: this.tok.T_CLONE,\n    var: this.tok.T_VAR,\n    eval: this.tok.T_EVAL,\n    include: this.tok.T_INCLUDE,\n    include_once: this.tok.T_INCLUDE_ONCE,\n    require: this.tok.T_REQUIRE,\n    require_once: this.tok.T_REQUIRE_ONCE,\n    namespace: this.tok.T_NAMESPACE,\n    use: this.tok.T_USE,\n    insteadof: this.tok.T_INSTEADOF,\n    global: this.tok.T_GLOBAL,\n    isset: this.tok.T_ISSET,\n    empty: this.tok.T_EMPTY,\n    __halt_compiler: this.tok.T_HALT_COMPILER,\n    static: this.tok.T_STATIC,\n    abstract: this.tok.T_ABSTRACT,\n    final: this.tok.T_FINAL,\n    private: this.tok.T_PRIVATE,\n    protected: this.tok.T_PROTECTED,\n    public: this.tok.T_PUBLIC,\n    unset: this.tok.T_UNSET,\n    list: this.tok.T_LIST,\n    array: this.tok.T_ARRAY,\n    callable: this.tok.T_CALLABLE,\n    or: this.tok.T_LOGICAL_OR,\n    and: this.tok.T_LOGICAL_AND,\n    xor: this.tok.T_LOGICAL_XOR,\n  };\n  this.castKeywords = {\n    int: this.tok.T_INT_CAST,\n    integer: this.tok.T_INT_CAST,\n    real: this.tok.T_DOUBLE_CAST,\n    double: this.tok.T_DOUBLE_CAST,\n    float: this.tok.T_DOUBLE_CAST,\n    string: this.tok.T_STRING_CAST,\n    binary: this.tok.T_STRING_CAST,\n    array: this.tok.T_ARRAY_CAST,\n    object: this.tok.T_OBJECT_CAST,\n    bool: this.tok.T_BOOL_CAST,\n    boolean: this.tok.T_BOOL_CAST,\n    unset: this.tok.T_UNSET_CAST,\n  };\n};\n\n/**\n * Initialize the lexer with the specified input\n */\nlexer.prototype.setInput = function (input) {\n  this._input = input;\n  this.size = input.length;\n  this.yylineno = 1;\n  this.offset = 0;\n  this.yyprevcol = 0;\n  this.yytext = \"\";\n  this.yylloc = {\n    first_offset: 0,\n    first_line: 1,\n    first_column: 0,\n    prev_offset: 0,\n    prev_line: 1,\n    prev_column: 0,\n    last_line: 1,\n    last_column: 0,\n  };\n  this.tokens = [];\n  if (this.version > 703) {\n    this.keywords.fn = this.tok.T_FN;\n  } else {\n    delete this.keywords.fn;\n  }\n  this.done = this.offset >= this.size;\n  if (!this.all_tokens && this.mode_eval) {\n    this.conditionStack = [\"INITIAL\"];\n    this.begin(\"ST_IN_SCRIPTING\");\n  } else {\n    this.conditionStack = [];\n    this.begin(\"INITIAL\");\n  }\n  // https://github.com/php/php-src/blob/999e32b65a8a4bb59e27e538fa68ffae4b99d863/Zend/zend_language_scanner.h#L59\n  // Used for heredoc and nowdoc\n  this.heredoc_label = {\n    label: \"\",\n    length: 0,\n    indentation: 0,\n    indentation_uses_spaces: false,\n    finished: false,\n    /**\n     * this used for parser to detemine the if current node segment is first encaps node.\n     * if ture, the indentation will remove from the begining. and if false, the prev node\n     * might be a variable '}' ,and the leading spaces should not be removed util meet the\n     * first \\n\n     */\n    first_encaps_node: false,\n    // for backward compatible\n    toString: function () {\n      this.label;\n    },\n  };\n  return this;\n};\n\n/**\n * consumes and returns one char from the input\n */\nlexer.prototype.input = function () {\n  const ch = this._input[this.offset];\n  if (!ch) return \"\";\n  this.yytext += ch;\n  this.offset++;\n  if (ch === \"\\r\" && this._input[this.offset] === \"\\n\") {\n    this.yytext += \"\\n\";\n    this.offset++;\n  }\n  if (ch === \"\\n\" || ch === \"\\r\") {\n    this.yylloc.last_line = ++this.yylineno;\n    this.yyprevcol = this.yylloc.last_column;\n    this.yylloc.last_column = 0;\n  } else {\n    this.yylloc.last_column++;\n  }\n  return ch;\n};\n\n/**\n * revert eating specified size\n */\nlexer.prototype.unput = function (size) {\n  if (size === 1) {\n    // 1 char unput (most cases)\n    this.offset--;\n    if (\n      this._input[this.offset] === \"\\n\" &&\n      this._input[this.offset - 1] === \"\\r\"\n    ) {\n      this.offset--;\n      size++;\n    }\n    if (\n      this._input[this.offset] === \"\\r\" ||\n      this._input[this.offset] === \"\\n\"\n    ) {\n      this.yylloc.last_line--;\n      this.yylineno--;\n      this.yylloc.last_column = this.yyprevcol;\n    } else {\n      this.yylloc.last_column--;\n    }\n    this.yytext = this.yytext.substring(0, this.yytext.length - size);\n  } else if (size > 0) {\n    this.offset -= size;\n    if (size < this.yytext.length) {\n      this.yytext = this.yytext.substring(0, this.yytext.length - size);\n      // re-calculate position\n      this.yylloc.last_line = this.yylloc.first_line;\n      this.yylloc.last_column = this.yyprevcol = this.yylloc.first_column;\n      for (let i = 0; i < this.yytext.length; i++) {\n        let c = this.yytext[i];\n        if (c === \"\\r\") {\n          c = this.yytext[++i];\n          this.yyprevcol = this.yylloc.last_column;\n          this.yylloc.last_line++;\n          this.yylloc.last_column = 0;\n          if (c !== \"\\n\") {\n            if (c === \"\\r\") {\n              this.yylloc.last_line++;\n            } else {\n              this.yylloc.last_column++;\n            }\n          }\n        } else if (c === \"\\n\") {\n          this.yyprevcol = this.yylloc.last_column;\n          this.yylloc.last_line++;\n          this.yylloc.last_column = 0;\n        } else {\n          this.yylloc.last_column++;\n        }\n      }\n      this.yylineno = this.yylloc.last_line;\n    } else {\n      // reset full text\n      this.yytext = \"\";\n      this.yylloc.last_line = this.yylineno = this.yylloc.first_line;\n      this.yylloc.last_column = this.yylloc.first_column;\n    }\n  }\n\n  return this;\n};\n\n// check if the text matches\nlexer.prototype.tryMatch = function (text) {\n  return text === this.ahead(text.length);\n};\n\n// check if the text matches\nlexer.prototype.tryMatchCaseless = function (text) {\n  return text === this.ahead(text.length).toLowerCase();\n};\n\n// look ahead\nlexer.prototype.ahead = function (size) {\n  let text = this._input.substring(this.offset, this.offset + size);\n  if (\n    text[text.length - 1] === \"\\r\" &&\n    this._input[this.offset + size + 1] === \"\\n\"\n  ) {\n    text += \"\\n\";\n  }\n  return text;\n};\n\n// consume the specified size\nlexer.prototype.consume = function (size) {\n  for (let i = 0; i < size; i++) {\n    const ch = this._input[this.offset];\n    if (!ch) break;\n    this.yytext += ch;\n    this.offset++;\n    if (ch === \"\\r\" && this._input[this.offset] === \"\\n\") {\n      this.yytext += \"\\n\";\n      this.offset++;\n      i++;\n    }\n    if (ch === \"\\n\" || ch === \"\\r\") {\n      this.yylloc.last_line = ++this.yylineno;\n      this.yyprevcol = this.yylloc.last_column;\n      this.yylloc.last_column = 0;\n    } else {\n      this.yylloc.last_column++;\n    }\n  }\n  return this;\n};\n\n/**\n * Gets the current state\n */\nlexer.prototype.getState = function () {\n  return {\n    yytext: this.yytext,\n    offset: this.offset,\n    yylineno: this.yylineno,\n    yyprevcol: this.yyprevcol,\n    yylloc: {\n      first_offset: this.yylloc.first_offset,\n      first_line: this.yylloc.first_line,\n      first_column: this.yylloc.first_column,\n      last_line: this.yylloc.last_line,\n      last_column: this.yylloc.last_column,\n    },\n    heredoc_label: this.heredoc_label,\n  };\n};\n\n/**\n * Sets the current lexer state\n */\nlexer.prototype.setState = function (state) {\n  this.yytext = state.yytext;\n  this.offset = state.offset;\n  this.yylineno = state.yylineno;\n  this.yyprevcol = state.yyprevcol;\n  this.yylloc = state.yylloc;\n  if (state.heredoc_label) {\n    this.heredoc_label = state.heredoc_label;\n  }\n  return this;\n};\n\n// prepend next token\nlexer.prototype.appendToken = function (value, ahead) {\n  this.tokens.push([value, ahead]);\n  return this;\n};\n\n// return next match that has a token\nlexer.prototype.lex = function () {\n  this.yylloc.prev_offset = this.offset;\n  this.yylloc.prev_line = this.yylloc.last_line;\n  this.yylloc.prev_column = this.yylloc.last_column;\n  let token = this.next() || this.lex();\n  if (!this.all_tokens) {\n    while (\n      token === this.tok.T_WHITESPACE || // ignore white space\n      (!this.comment_tokens &&\n        (token === this.tok.T_COMMENT || // ignore single lines comments\n          token === this.tok.T_DOC_COMMENT)) || // ignore doc comments\n      // ignore open tags\n      token === this.tok.T_OPEN_TAG\n    ) {\n      token = this.next() || this.lex();\n    }\n    if (token == this.tok.T_OPEN_TAG_WITH_ECHO) {\n      // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1683\n      // open tag with echo statement\n      return this.tok.T_ECHO;\n    } else if (token === this.tok.T_CLOSE_TAG) {\n      // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1680\n      return \";\"; /* implicit ; */\n    }\n  }\n  if (!this.yylloc.prev_offset) {\n    this.yylloc.prev_offset = this.yylloc.first_offset;\n    this.yylloc.prev_line = this.yylloc.first_line;\n    this.yylloc.prev_column = this.yylloc.first_column;\n  }\n  /*else if (this.yylloc.prev_offset === this.offset && this.offset !== this.size) {\n    throw new Error('Infinite loop @ ' + this.offset + ' / ' + this.size);\n  }*/\n  return token;\n};\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nlexer.prototype.begin = function (condition) {\n  this.conditionStack.push(condition);\n  this.curCondition = condition;\n  this.stateCb = this[\"match\" + condition];\n  if (typeof this.stateCb !== \"function\") {\n    throw new Error('Undefined condition state \"' + condition + '\"');\n  }\n  return this;\n};\n\n// pop the previously active lexer condition state off the condition stack\nlexer.prototype.popState = function () {\n  const n = this.conditionStack.length - 1;\n  const condition = n > 0 ? this.conditionStack.pop() : this.conditionStack[0];\n  this.curCondition = this.conditionStack[this.conditionStack.length - 1];\n  this.stateCb = this[\"match\" + this.curCondition];\n  if (typeof this.stateCb !== \"function\") {\n    throw new Error('Undefined condition state \"' + this.curCondition + '\"');\n  }\n  return condition;\n};\n\n// return next match in input\nlexer.prototype.next = function () {\n  let token;\n  if (!this._input) {\n    this.done = true;\n  }\n  this.yylloc.first_offset = this.offset;\n  this.yylloc.first_line = this.yylloc.last_line;\n  this.yylloc.first_column = this.yylloc.last_column;\n  this.yytext = \"\";\n  if (this.done) {\n    this.yylloc.prev_offset = this.yylloc.first_offset;\n    this.yylloc.prev_line = this.yylloc.first_line;\n    this.yylloc.prev_column = this.yylloc.first_column;\n    return this.EOF;\n  }\n  if (this.tokens.length > 0) {\n    token = this.tokens.shift();\n    if (typeof token[1] === \"object\") {\n      this.setState(token[1]);\n    } else {\n      this.consume(token[1]);\n    }\n    token = token[0];\n  } else {\n    token = this.stateCb.apply(this, []);\n  }\n  if (this.offset >= this.size && this.tokens.length === 0) {\n    this.done = true;\n  }\n  if (this.debug) {\n    let tName = token;\n    if (typeof tName === \"number\") {\n      tName = this.engine.tokens.values[tName];\n    } else {\n      tName = '\"' + tName + '\"';\n    }\n    const e = new Error(\n      tName +\n        \"\\tfrom \" +\n        this.yylloc.first_line +\n        \",\" +\n        this.yylloc.first_column +\n        \"\\t - to \" +\n        this.yylloc.last_line +\n        \",\" +\n        this.yylloc.last_column +\n        '\\t\"' +\n        this.yytext +\n        '\"'\n    );\n    // eslint-disable-next-line no-console\n    console.error(e.stack);\n  }\n  return token;\n};\n\n// extends the lexer with states\n[\n  require(\"./lexer/comments.js\"),\n  require(\"./lexer/initial.js\"),\n  require(\"./lexer/numbers.js\"),\n  require(\"./lexer/property.js\"),\n  require(\"./lexer/scripting.js\"),\n  require(\"./lexer/strings.js\"),\n  require(\"./lexer/tokens.js\"),\n  require(\"./lexer/utils.js\"),\n].forEach(function (ext) {\n  for (const k in ext) {\n    lexer.prototype[k] = ext[k];\n  }\n});\n\nmodule.exports = lexer;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   * Reads a single line comment\n   */\n  T_COMMENT: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (ch === \"\\n\" || ch === \"\\r\") {\n        return this.tok.T_COMMENT;\n      } else if (\n        ch === \"?\" &&\n        !this.aspTagMode &&\n        this._input[this.offset] === \">\"\n      ) {\n        this.unput(1);\n        return this.tok.T_COMMENT;\n      } else if (\n        ch === \"%\" &&\n        this.aspTagMode &&\n        this._input[this.offset] === \">\"\n      ) {\n        this.unput(1);\n        return this.tok.T_COMMENT;\n      }\n    }\n    return this.tok.T_COMMENT;\n  },\n  /**\n   * Behaviour : https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1927\n   */\n  T_DOC_COMMENT: function () {\n    let ch = this.input();\n    let token = this.tok.T_COMMENT;\n    if (ch === \"*\") {\n      // started with '/*' , check is next is '*'\n      ch = this.input();\n      if (this.is_WHITESPACE()) {\n        // check if next is WHITESPACE\n        token = this.tok.T_DOC_COMMENT;\n      }\n      if (ch === \"/\") {\n        return token;\n      } else {\n        this.unput(1); // reset\n      }\n    }\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch === \"*\" && this._input[this.offset] === \"/\") {\n        this.input();\n        break;\n      }\n    }\n    return token;\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  nextINITIAL: function () {\n    if (\n      this.conditionStack.length > 1 &&\n      this.conditionStack[this.conditionStack.length - 1] === \"INITIAL\"\n    ) {\n      // Return to HEREDOC/ST_DOUBLE_QUOTES mode\n      this.popState();\n    } else {\n      this.begin(\"ST_IN_SCRIPTING\");\n    }\n    return this;\n  },\n  matchINITIAL: function () {\n    while (this.offset < this.size) {\n      let ch = this.input();\n      if (ch == \"<\") {\n        ch = this.ahead(1);\n        if (ch == \"?\") {\n          if (this.tryMatch(\"?=\")) {\n            this.unput(1)\n              .appendToken(this.tok.T_OPEN_TAG_WITH_ECHO, 3)\n              .nextINITIAL();\n            break;\n          } else if (this.tryMatchCaseless(\"?php\")) {\n            ch = this._input[this.offset + 4];\n            if (ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\") {\n              this.unput(1).appendToken(this.tok.T_OPEN_TAG, 6).nextINITIAL();\n              break;\n            }\n          }\n          if (this.short_tags) {\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG, 2).nextINITIAL();\n            break;\n          }\n        } else if (this.asp_tags && ch == \"%\") {\n          if (this.tryMatch(\"%=\")) {\n            this.aspTagMode = true;\n            this.unput(1)\n              .appendToken(this.tok.T_OPEN_TAG_WITH_ECHO, 3)\n              .nextINITIAL();\n            break;\n          } else {\n            this.aspTagMode = true;\n            this.unput(1).appendToken(this.tok.T_OPEN_TAG, 2).nextINITIAL();\n            break;\n          }\n        }\n      }\n    }\n    if (this.yytext.length > 0) {\n      return this.tok.T_INLINE_HTML;\n    } else {\n      return false;\n    }\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\n/* istanbul ignore else  */\nlet MAX_LENGTH_OF_LONG = 10;\nlet long_min_digits = \"2147483648\";\nif (process.arch == \"x64\") {\n  MAX_LENGTH_OF_LONG = 19;\n  long_min_digits = \"9223372036854775808\";\n}\n\nmodule.exports = {\n  consume_NUM: function () {\n    let ch = this.yytext[0];\n    let hasPoint = ch === \".\";\n    if (ch === \"0\") {\n      ch = this.input();\n      // check if hexa\n      if (ch === \"x\" || ch === \"X\") {\n        ch = this.input();\n        if (ch !== \"_\" && this.is_HEX()) {\n          return this.consume_HNUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        }\n        // check binary notation\n      } else if (ch === \"b\" || ch === \"B\") {\n        ch = this.input();\n        if ((ch !== \"_\" && ch === \"0\") || ch === \"1\") {\n          return this.consume_BNUM();\n        } else {\n          this.unput(ch ? 2 : 1);\n        }\n        // @fixme check octal notation ? not usefull\n      } else if (!this.is_NUM()) {\n        if (ch) this.unput(1);\n      }\n    }\n\n    while (this.offset < this.size) {\n      const prev = ch;\n      ch = this.input();\n\n      if (ch === \"_\") {\n        if (prev === \"_\") {\n          // restriction : next to underscore / 1__1;\n          this.unput(2); // keep 1\n          break;\n        }\n        if (prev === \".\") {\n          // next to decimal point  \"1._0\"\n          this.unput(1); // keep 1.\n          break;\n        }\n        if (prev === \"e\" || prev === \"E\") {\n          // next to e \"1e_10\"\n          this.unput(2); // keep 1\n          break;\n        }\n      } else if (ch === \".\") {\n        if (hasPoint) {\n          // no multiple points \"1.0.5\"\n          this.unput(1); // keep 1.0\n          break;\n        }\n        if (prev === \"_\") {\n          // next to decimal point  \"1_.0\"\n          this.unput(2); // keep 1\n          break;\n        }\n        hasPoint = true;\n        continue;\n      } else if (ch === \"e\" || ch === \"E\") {\n        if (prev === \"_\") {\n          // next to e \"1_e10\"\n          this.unput(1);\n          break;\n        }\n        let undo = 2;\n        ch = this.input();\n        if (ch === \"+\" || ch === \"-\") {\n          // 1e-5\n          undo = 3;\n          ch = this.input();\n        }\n        if (this.is_NUM_START()) {\n          this.consume_LNUM();\n          return this.tok.T_DNUMBER;\n        }\n        this.unput(ch ? undo : undo - 1); // keep only 1\n        break;\n      }\n\n      if (!this.is_NUM()) {\n        // example : 10.0a\n        if (ch) this.unput(1); // keep 10.0\n        break;\n      }\n    }\n\n    if (hasPoint) {\n      return this.tok.T_DNUMBER;\n    } else if (this.yytext.length < MAX_LENGTH_OF_LONG - 1) {\n      return this.tok.T_LNUMBER;\n    } else {\n      if (\n        this.yytext.length < MAX_LENGTH_OF_LONG ||\n        (this.yytext.length == MAX_LENGTH_OF_LONG &&\n          this.yytext < long_min_digits)\n      ) {\n        return this.tok.T_LNUMBER;\n      }\n      return this.tok.T_DNUMBER;\n    }\n  },\n  // read hexa\n  consume_HNUM: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_HEX()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n  // read a generic number\n  consume_LNUM: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_NUM()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n  // read binary\n  consume_BNUM: function () {\n    let ch;\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch !== \"0\" && ch !== \"1\" && ch !== \"_\") {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this.tok.T_LNUMBER;\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  matchST_LOOKING_FOR_PROPERTY: function () {\n    let ch = this.input();\n    if (ch === \"-\") {\n      ch = this.input();\n      if (ch === \">\") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1296\n        return this.tok.T_OBJECT_OPERATOR;\n      }\n      if (ch) this.unput(1);\n    } else if (this.is_WHITESPACE()) {\n      return this.tok.T_WHITESPACE;\n    } else if (this.is_LABEL_START()) {\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1300\n      this.consume_LABEL();\n      this.popState();\n      return this.tok.T_STRING;\n    }\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_scanner.l#L1306\n    this.popState();\n    if (ch) this.unput(1);\n    return false;\n  },\n  matchST_LOOKING_FOR_VARNAME: function () {\n    let ch = this.input();\n\n    // SHIFT STATE\n    this.popState();\n    this.begin(\"ST_IN_SCRIPTING\");\n\n    if (this.is_LABEL_START()) {\n      this.consume_LABEL();\n      ch = this.input();\n      if (ch === \"[\" || ch === \"}\") {\n        this.unput(1);\n        return this.tok.T_STRING_VARNAME;\n      } else {\n        // any char (that's started with a label sequence)\n        this.unput(this.yytext.length);\n      }\n    } else {\n      // any char (thats not a label start sequence)\n      if (ch) this.unput(1);\n    }\n    // stops looking for a varname and starts the scripting mode\n    return false;\n  },\n  matchST_VAR_OFFSET: function () {\n    const ch = this.input();\n    if (this.is_NUM_START()) {\n      this.consume_NUM();\n      return this.tok.T_NUM_STRING;\n    } else if (ch === \"]\") {\n      this.popState();\n      return \"]\";\n    } else if (ch === \"$\") {\n      this.input();\n      if (this.is_LABEL_START()) {\n        this.consume_LABEL();\n        return this.tok.T_VARIABLE;\n      } else {\n        throw new Error(\"Unexpected terminal\");\n      }\n    } else if (this.is_LABEL_START()) {\n      this.consume_LABEL();\n      return this.tok.T_STRING;\n    } else if (\n      this.is_WHITESPACE() ||\n      ch === \"\\\\\" ||\n      ch === \"'\" ||\n      ch === \"#\"\n    ) {\n      return this.tok.T_ENCAPSED_AND_WHITESPACE;\n    } else if (\n      ch === \"[\" ||\n      ch === \"{\" ||\n      ch === \"}\" ||\n      ch === '\"' ||\n      ch === \"`\" ||\n      this.is_TOKEN()\n    ) {\n      return ch;\n    } else {\n      throw new Error(\"Unexpected terminal\");\n    }\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  matchST_IN_SCRIPTING: function () {\n    let ch = this.input();\n    switch (ch) {\n      case \" \":\n      case \"\\t\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\r\\n\":\n        return this.T_WHITESPACE();\n      case \"#\":\n        return this.T_COMMENT();\n      case \"/\":\n        if (this._input[this.offset] === \"/\") {\n          return this.T_COMMENT();\n        } else if (this._input[this.offset] === \"*\") {\n          this.input();\n          return this.T_DOC_COMMENT();\n        }\n        return this.consume_TOKEN();\n      case \"'\":\n        return this.T_CONSTANT_ENCAPSED_STRING();\n      case '\"':\n        return this.ST_DOUBLE_QUOTES();\n      case \"`\":\n        this.begin(\"ST_BACKQUOTE\");\n        return \"`\";\n      case \"?\":\n        if (!this.aspTagMode && this.tryMatch(\">\")) {\n          this.input();\n          const nextCH = this._input[this.offset];\n          if (nextCH === \"\\n\" || nextCH === \"\\r\") this.input();\n          if (this.conditionStack.length > 1) {\n            this.begin(\"INITIAL\");\n          }\n          return this.tok.T_CLOSE_TAG;\n        }\n        return this.consume_TOKEN();\n      case \"%\":\n        if (this.aspTagMode && this._input[this.offset] === \">\") {\n          this.input(); // consume the '>'\n          ch = this._input[this.offset]; // read next\n          if (ch === \"\\n\" || ch === \"\\r\") {\n            this.input(); // consume the newline\n          }\n          this.aspTagMode = false;\n          if (this.conditionStack.length > 1) {\n            this.begin(\"INITIAL\");\n          }\n          return this.tok.T_CLOSE_TAG;\n        }\n        return this.consume_TOKEN();\n      case \"{\":\n        this.begin(\"ST_IN_SCRIPTING\");\n        return \"{\";\n      case \"}\":\n        if (this.conditionStack.length > 2) {\n          // Return to HEREDOC/ST_DOUBLE_QUOTES mode\n          this.popState();\n        }\n        return \"}\";\n      default:\n        if (ch === \".\") {\n          ch = this.input();\n          if (this.is_NUM_START()) {\n            return this.consume_NUM();\n          } else {\n            if (ch) this.unput(1);\n          }\n        }\n        if (this.is_NUM_START()) {\n          return this.consume_NUM();\n        } else if (this.is_LABEL_START()) {\n          return this.consume_LABEL().T_STRING();\n        } else if (this.is_TOKEN()) {\n          return this.consume_TOKEN();\n        }\n    }\n    throw new Error(\n      'Bad terminal sequence \"' +\n        ch +\n        '\" at line ' +\n        this.yylineno +\n        \" (offset \" +\n        this.offset +\n        \")\"\n    );\n  },\n\n  T_WHITESPACE: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\") {\n        continue;\n      }\n      if (ch) this.unput(1);\n      break;\n    }\n    return this.tok.T_WHITESPACE;\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst newline = [\"\\n\", \"\\r\"];\nconst valid_after_heredoc = [\"\\n\", \"\\r\", \";\"];\nconst valid_after_heredoc_73 = valid_after_heredoc.concat([\n  \"\\t\",\n  \" \",\n  \",\",\n  \"]\",\n  \")\",\n  \"/\",\n  \"=\",\n  \"!\",\n]);\n\nmodule.exports = {\n  T_CONSTANT_ENCAPSED_STRING: function () {\n    let ch;\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch == \"\\\\\") {\n        this.input();\n      } else if (ch == \"'\") {\n        break;\n      }\n    }\n    return this.tok.T_CONSTANT_ENCAPSED_STRING;\n  },\n  // check if matching a HEREDOC state\n  is_HEREDOC: function () {\n    const revert = this.offset;\n    if (\n      this._input[this.offset - 1] === \"<\" &&\n      this._input[this.offset] === \"<\" &&\n      this._input[this.offset + 1] === \"<\"\n    ) {\n      this.offset += 3;\n\n      // optional tabs / spaces\n      if (this.is_TABSPACE()) {\n        while (this.offset < this.size) {\n          this.offset++;\n          if (!this.is_TABSPACE()) {\n            break;\n          }\n        }\n      }\n\n      // optional quotes\n      let tChar = this._input[this.offset - 1];\n      if (tChar === \"'\" || tChar === '\"') {\n        this.offset++;\n      } else {\n        tChar = null;\n      }\n\n      // required label\n      if (this.is_LABEL_START()) {\n        let yyoffset = this.offset - 1;\n        while (this.offset < this.size) {\n          this.offset++;\n          if (!this.is_LABEL()) {\n            break;\n          }\n        }\n        const yylabel = this._input.substring(yyoffset, this.offset - 1);\n        if (!tChar || tChar === this._input[this.offset - 1]) {\n          // required ending quote\n          if (tChar) this.offset++;\n          // require newline\n          if (newline.includes(this._input[this.offset - 1])) {\n            // go go go\n            this.heredoc_label.label = yylabel;\n            this.heredoc_label.length = yylabel.length;\n            this.heredoc_label.finished = false;\n            yyoffset = this.offset - revert;\n            this.offset = revert;\n            this.consume(yyoffset);\n            if (tChar === \"'\") {\n              this.begin(\"ST_NOWDOC\");\n            } else {\n              this.begin(\"ST_HEREDOC\");\n            }\n            // prematch to get the indentation information from end of doc\n            this.prematch_ENDOFDOC();\n            return this.tok.T_START_HEREDOC;\n          }\n        }\n      }\n    }\n    this.offset = revert;\n    return false;\n  },\n  ST_DOUBLE_QUOTES: function () {\n    let ch;\n    while (this.offset < this.size) {\n      ch = this.input();\n      if (ch == \"\\\\\") {\n        this.input();\n      } else if (ch == '\"') {\n        break;\n      } else if (ch == \"$\") {\n        ch = this.input();\n        if (ch == \"{\" || this.is_LABEL_START()) {\n          this.unput(2);\n          break;\n        }\n        if (ch) this.unput(1);\n      } else if (ch == \"{\") {\n        ch = this.input();\n        if (ch == \"$\") {\n          this.unput(2);\n          break;\n        }\n        if (ch) this.unput(1);\n      }\n    }\n    if (ch == '\"') {\n      return this.tok.T_CONSTANT_ENCAPSED_STRING;\n    } else {\n      let prefix = 1;\n      if (this.yytext[0] === \"b\" || this.yytext[0] === \"B\") {\n        prefix = 2;\n      }\n      if (this.yytext.length > 2) {\n        this.appendToken(\n          this.tok.T_ENCAPSED_AND_WHITESPACE,\n          this.yytext.length - prefix\n        );\n      }\n      this.unput(this.yytext.length - prefix);\n      this.begin(\"ST_DOUBLE_QUOTES\");\n      return this.yytext;\n    }\n  },\n\n  // check if its a DOC end sequence\n  isDOC_MATCH: function (offset, consumeLeadingSpaces) {\n    // @fixme : check if out of text limits\n\n    // consumeLeadingSpaces is false happen DOC prematch END HEREDOC stage.\n\n    // Ensure current state is really after a new line break, not after a such as ${variables}\n    const prev_ch = this._input[offset - 2];\n    if (!newline.includes(prev_ch)) {\n      return false;\n    }\n\n    // skip leading spaces or tabs\n    let indentation_uses_spaces = false;\n    let indentation_uses_tabs = false;\n    // reset heredoc_label structure\n    let indentation = 0;\n    let leading_ch = this._input[offset - 1];\n\n    if (this.version >= 703) {\n      while (leading_ch === \"\\t\" || leading_ch === \" \") {\n        if (leading_ch === \" \") {\n          indentation_uses_spaces = true;\n        } else if (leading_ch === \"\\t\") {\n          indentation_uses_tabs = true;\n        }\n\n        leading_ch = this._input[offset + indentation];\n        indentation++;\n      }\n\n      // Move offset to skip leading whitespace\n      offset = offset + indentation;\n\n      // return out if there was only whitespace on this line\n      if (newline.includes(this._input[offset - 1])) {\n        return false;\n      }\n    }\n\n    if (\n      this._input.substring(\n        offset - 1,\n        offset - 1 + this.heredoc_label.length\n      ) === this.heredoc_label.label\n    ) {\n      const ch = this._input[offset - 1 + this.heredoc_label.length];\n      if (\n        (this.version >= 703\n          ? valid_after_heredoc_73\n          : valid_after_heredoc\n        ).includes(ch)\n      ) {\n        if (consumeLeadingSpaces) {\n          this.consume(indentation);\n          // https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes\n          if (indentation_uses_spaces && indentation_uses_tabs) {\n            throw new Error(\n              \"Parse error:  mixing spaces and tabs in ending marker at line \" +\n                this.yylineno +\n                \" (offset \" +\n                this.offset +\n                \")\"\n            );\n          }\n        } else {\n          // Called in prematch_ENDOFDOC\n          this.heredoc_label.indentation = indentation;\n          this.heredoc_label.indentation_uses_spaces = indentation_uses_spaces;\n          this.heredoc_label.first_encaps_node = true;\n        }\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\n   * Prematch the end of HEREDOC/NOWDOC end tag to preset the\n   * context of this.heredoc_label\n   */\n  prematch_ENDOFDOC: function () {\n    // reset heredoc\n    this.heredoc_label.indentation_uses_spaces = false;\n    this.heredoc_label.indentation = 0;\n    this.heredoc_label.first_encaps_node = true;\n    let offset = this.offset + 1;\n\n    while (offset < this._input.length) {\n      // if match heredoc_label structrue will be set\n      if (this.isDOC_MATCH(offset, false)) {\n        return;\n      }\n\n      if (!newline.includes(this._input[offset - 1])) {\n        // skip one line\n        while (\n          !newline.includes(this._input[offset++]) &&\n          offset < this._input.length\n        ) {\n          // skip\n        }\n      }\n\n      offset++;\n    }\n  },\n\n  matchST_NOWDOC: function () {\n    /** edge case : empty now doc **/\n    if (this.isDOC_MATCH(this.offset, true)) {\n      // @fixme : never reached (may be caused by quotes)\n      this.consume(this.heredoc_label.length);\n      this.popState();\n      return this.tok.T_END_HEREDOC;\n    }\n    /** SCANNING CONTENTS **/\n    let ch = this._input[this.offset - 1];\n    while (this.offset < this.size) {\n      if (newline.includes(ch)) {\n        ch = this.input();\n        if (this.isDOC_MATCH(this.offset, true)) {\n          this.unput(1).popState();\n          this.appendToken(this.tok.T_END_HEREDOC, this.heredoc_label.length);\n          return this.tok.T_ENCAPSED_AND_WHITESPACE;\n        }\n      } else {\n        ch = this.input();\n      }\n    }\n    // too bad ! reached end of document (will get a parse error)\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n\n  matchST_HEREDOC: function () {\n    /** edge case : empty here doc **/\n    let ch = this.input();\n    if (this.isDOC_MATCH(this.offset, true)) {\n      this.consume(this.heredoc_label.length - 1);\n      this.popState();\n      return this.tok.T_END_HEREDOC;\n    }\n    /** SCANNING CONTENTS **/\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        ch = this.input(); // ignore next\n        if (!newline.includes(ch)) {\n          ch = this.input();\n        }\n      }\n\n      if (newline.includes(ch)) {\n        ch = this.input();\n        if (this.isDOC_MATCH(this.offset, true)) {\n          this.unput(1).popState();\n          this.appendToken(this.tok.T_END_HEREDOC, this.heredoc_label.length);\n          return this.tok.T_ENCAPSED_AND_WHITESPACE;\n        }\n      } else if (ch === \"$\") {\n        ch = this.input();\n        if (ch === \"{\") {\n          // start of ${\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          const yyoffset = this.offset;\n          const next = this.consume_VARIABLE();\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n          //console.log(this.yytext);\n        }\n      } else if (ch === \"{\") {\n        ch = this.input();\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n      } else {\n        ch = this.input();\n      }\n    }\n\n    // too bad ! reached end of document (will get a parse error)\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n\n  consume_VARIABLE: function () {\n    this.consume_LABEL();\n    const ch = this.input();\n    if (ch == \"[\") {\n      this.unput(1);\n      this.begin(\"ST_VAR_OFFSET\");\n      return this.tok.T_VARIABLE;\n    } else if (ch === \"-\") {\n      if (this.input() === \">\") {\n        this.input();\n        if (this.is_LABEL_START()) {\n          this.begin(\"ST_LOOKING_FOR_PROPERTY\");\n        }\n        this.unput(3);\n        return this.tok.T_VARIABLE;\n      } else {\n        this.unput(2);\n      }\n    } else {\n      if (ch) this.unput(1);\n    }\n    return this.tok.T_VARIABLE;\n  },\n  // HANDLES BACKQUOTES\n  matchST_BACKQUOTE: function () {\n    let ch = this.input();\n    if (ch === \"$\") {\n      ch = this.input();\n      if (ch === \"{\") {\n        this.begin(\"ST_LOOKING_FOR_VARNAME\");\n        return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n      } else if (this.is_LABEL_START()) {\n        const tok = this.consume_VARIABLE();\n        return tok;\n      }\n    } else if (ch === \"{\") {\n      if (this._input[this.offset] === \"$\") {\n        this.begin(\"ST_IN_SCRIPTING\");\n        return this.tok.T_CURLY_OPEN;\n      }\n    } else if (ch === \"`\") {\n      this.popState();\n      return \"`\";\n    }\n\n    // any char\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        this.input();\n      } else if (ch === \"`\") {\n        this.unput(1);\n        this.popState();\n        this.appendToken(\"`\", 1);\n        break;\n      } else if (ch === \"$\") {\n        ch = this.input();\n        if (ch === \"{\") {\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          const yyoffset = this.offset;\n          const next = this.consume_VARIABLE();\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n        }\n        continue;\n      } else if (ch === \"{\") {\n        ch = this.input();\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n        continue;\n      }\n      ch = this.input();\n    }\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n\n  matchST_DOUBLE_QUOTES: function () {\n    let ch = this.input();\n    if (ch === \"$\") {\n      ch = this.input();\n      if (ch === \"{\") {\n        this.begin(\"ST_LOOKING_FOR_VARNAME\");\n        return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n      } else if (this.is_LABEL_START()) {\n        const tok = this.consume_VARIABLE();\n        return tok;\n      }\n    } else if (ch === \"{\") {\n      if (this._input[this.offset] === \"$\") {\n        this.begin(\"ST_IN_SCRIPTING\");\n        return this.tok.T_CURLY_OPEN;\n      }\n    } else if (ch === '\"') {\n      this.popState();\n      return '\"';\n    }\n\n    // any char\n    while (this.offset < this.size) {\n      if (ch === \"\\\\\") {\n        this.input();\n      } else if (ch === '\"') {\n        this.unput(1);\n        this.popState();\n        this.appendToken('\"', 1);\n        break;\n      } else if (ch === \"$\") {\n        ch = this.input();\n        if (ch === \"{\") {\n          this.begin(\"ST_LOOKING_FOR_VARNAME\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_DOLLAR_OPEN_CURLY_BRACES, 2);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return this.tok.T_DOLLAR_OPEN_CURLY_BRACES;\n          }\n        } else if (this.is_LABEL_START()) {\n          // start of $var...\n          const yyoffset = this.offset;\n          const next = this.consume_VARIABLE();\n          if (this.yytext.length > this.offset - yyoffset + 2) {\n            this.appendToken(next, this.offset - yyoffset + 2);\n            this.unput(this.offset - yyoffset + 2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            return next;\n          }\n        }\n        if (ch) this.unput(1);\n      } else if (ch === \"{\") {\n        ch = this.input();\n        if (ch === \"$\") {\n          // start of {$...\n          this.begin(\"ST_IN_SCRIPTING\");\n          if (this.yytext.length > 2) {\n            this.appendToken(this.tok.T_CURLY_OPEN, 1);\n            this.unput(2);\n            return this.tok.T_ENCAPSED_AND_WHITESPACE;\n          } else {\n            // @fixme : yytext = '\"{$' (this.yytext.length > 3)\n            this.unput(1);\n            return this.tok.T_CURLY_OPEN;\n          }\n        }\n        if (ch) this.unput(1);\n      }\n      ch = this.input();\n    }\n    return this.tok.T_ENCAPSED_AND_WHITESPACE;\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  T_STRING: function () {\n    const token = this.yytext.toLowerCase();\n    let id = this.keywords[token];\n    if (typeof id !== \"number\") {\n      if (token === \"yield\") {\n        if (this.version >= 700 && this.tryMatch(\" from\")) {\n          this.consume(5);\n          id = this.tok.T_YIELD_FROM;\n        } else {\n          id = this.tok.T_YIELD;\n        }\n      } else {\n        id = this.tok.T_STRING;\n        if (token === \"b\" || token === \"B\") {\n          const ch = this.input(1);\n          if (ch === '\"') {\n            return this.ST_DOUBLE_QUOTES();\n          } else if (ch === \"'\") {\n            return this.T_CONSTANT_ENCAPSED_STRING();\n          } else if (ch) {\n            this.unput(1);\n          }\n        }\n      }\n    }\n    return id;\n  },\n  // reads a custom token\n  consume_TOKEN: function () {\n    const ch = this._input[this.offset - 1];\n    const fn = this.tokenTerminals[ch];\n    if (fn) {\n      return fn.apply(this, []);\n    } else {\n      return this.yytext;\n    }\n  },\n  // list of special char tokens\n  tokenTerminals: {\n    $: function () {\n      this.offset++;\n      if (this.is_LABEL_START()) {\n        this.offset--;\n        this.consume_LABEL();\n        return this.tok.T_VARIABLE;\n      } else {\n        this.offset--;\n        return \"$\";\n      }\n    },\n    \"-\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \">\") {\n        this.begin(\"ST_LOOKING_FOR_PROPERTY\").input();\n        return this.tok.T_OBJECT_OPERATOR;\n      } else if (nchar === \"-\") {\n        this.input();\n        return this.tok.T_DEC;\n      } else if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_MINUS_EQUAL;\n      }\n      return \"-\";\n    },\n    \"\\\\\": function () {\n      return this.tok.T_NS_SEPARATOR;\n    },\n    \"/\": function () {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_DIV_EQUAL;\n      }\n      return \"/\";\n    },\n    \":\": function () {\n      if (this._input[this.offset] === \":\") {\n        this.input();\n        return this.tok.T_DOUBLE_COLON;\n      } else {\n        return \":\";\n      }\n    },\n    \"(\": function () {\n      const initial = this.offset;\n      this.input();\n      if (this.is_TABSPACE()) {\n        this.consume_TABSPACE().input();\n      }\n      if (this.is_LABEL_START()) {\n        const yylen = this.yytext.length;\n        this.consume_LABEL();\n        const castToken = this.yytext.substring(yylen - 1).toLowerCase();\n        const castId = this.castKeywords[castToken];\n        if (typeof castId === \"number\") {\n          this.input();\n          if (this.is_TABSPACE()) {\n            this.consume_TABSPACE().input();\n          }\n          if (this._input[this.offset - 1] === \")\") {\n            return castId;\n          }\n        }\n      }\n      // revert the check\n      this.unput(this.offset - initial);\n      return \"(\";\n    },\n    \"=\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \">\") {\n        this.input();\n        return this.tok.T_DOUBLE_ARROW;\n      } else if (nchar === \"=\") {\n        if (this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_IS_IDENTICAL;\n        } else {\n          this.input();\n          return this.tok.T_IS_EQUAL;\n        }\n      }\n      return \"=\";\n    },\n    \"+\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"+\") {\n        this.input();\n        return this.tok.T_INC;\n      } else if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_PLUS_EQUAL;\n      }\n      return \"+\";\n    },\n    \"!\": function () {\n      if (this._input[this.offset] === \"=\") {\n        if (this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_IS_NOT_IDENTICAL;\n        } else {\n          this.input();\n          return this.tok.T_IS_NOT_EQUAL;\n        }\n      }\n      return \"!\";\n    },\n    \"?\": function () {\n      if (this.version >= 700 && this._input[this.offset] === \"?\") {\n        if (this.version >= 704 && this._input[this.offset + 1] === \"=\") {\n          this.consume(2);\n          return this.tok.T_COALESCE_EQUAL;\n        } else {\n          this.input();\n          return this.tok.T_COALESCE;\n        }\n      }\n      return \"?\";\n    },\n    \"<\": function () {\n      let nchar = this._input[this.offset];\n      if (nchar === \"<\") {\n        nchar = this._input[this.offset + 1];\n        if (nchar === \"=\") {\n          this.consume(2);\n          return this.tok.T_SL_EQUAL;\n        } else if (nchar === \"<\") {\n          if (this.is_HEREDOC()) {\n            return this.tok.T_START_HEREDOC;\n          }\n        }\n        this.input();\n        return this.tok.T_SL;\n      } else if (nchar === \"=\") {\n        this.input();\n        if (this.version >= 700 && this._input[this.offset] === \">\") {\n          this.input();\n          return this.tok.T_SPACESHIP;\n        } else {\n          return this.tok.T_IS_SMALLER_OR_EQUAL;\n        }\n      } else if (nchar === \">\") {\n        this.input();\n        return this.tok.T_IS_NOT_EQUAL;\n      }\n      return \"<\";\n    },\n    \">\": function () {\n      let nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_IS_GREATER_OR_EQUAL;\n      } else if (nchar === \">\") {\n        nchar = this._input[this.offset + 1];\n        if (nchar === \"=\") {\n          this.consume(2);\n          return this.tok.T_SR_EQUAL;\n        } else {\n          this.input();\n          return this.tok.T_SR;\n        }\n      }\n      return \">\";\n    },\n    \"*\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_MUL_EQUAL;\n      } else if (nchar === \"*\") {\n        this.input();\n        if (this._input[this.offset] === \"=\") {\n          this.input();\n          return this.tok.T_POW_EQUAL;\n        } else {\n          return this.tok.T_POW;\n        }\n      }\n      return \"*\";\n    },\n    \".\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_CONCAT_EQUAL;\n      } else if (nchar === \".\" && this._input[this.offset + 1] === \".\") {\n        this.consume(2);\n        return this.tok.T_ELLIPSIS;\n      }\n      return \".\";\n    },\n    \"%\": function () {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_MOD_EQUAL;\n      }\n      return \"%\";\n    },\n    \"&\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_AND_EQUAL;\n      } else if (nchar === \"&\") {\n        this.input();\n        return this.tok.T_BOOLEAN_AND;\n      }\n      return \"&\";\n    },\n    \"|\": function () {\n      const nchar = this._input[this.offset];\n      if (nchar === \"=\") {\n        this.input();\n        return this.tok.T_OR_EQUAL;\n      } else if (nchar === \"|\") {\n        this.input();\n        return this.tok.T_BOOLEAN_OR;\n      }\n      return \"|\";\n    },\n    \"^\": function () {\n      if (this._input[this.offset] === \"=\") {\n        this.input();\n        return this.tok.T_XOR_EQUAL;\n      }\n      return \"^\";\n    },\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst tokens = \";:,.\\\\[]()|^&+-/*=%!~$<>?@\";\n\nmodule.exports = {\n  // check if the char can be a numeric\n  is_NUM: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    return (ch > 47 && ch < 58) || ch === 95;\n  },\n\n  // check if the char can be a numeric\n  is_NUM_START: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    return ch > 47 && ch < 58;\n  },\n\n  // check if current char can be a label\n  is_LABEL: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    return (\n      (ch > 96 && ch < 123) ||\n      (ch > 64 && ch < 91) ||\n      ch === 95 ||\n      (ch > 47 && ch < 58) ||\n      ch > 126\n    );\n  },\n\n  // check if current char can be a label\n  is_LABEL_START: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    // A - Z\n    if (ch > 64 && ch < 91) return true;\n    // a - z\n    if (ch > 96 && ch < 123) return true;\n    // _ (95)\n    if (ch === 95) return true;\n    // utf8 / extended\n    if (ch > 126) return true;\n    // else\n    return false;\n  },\n\n  // reads each char of the label\n  consume_LABEL: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_LABEL()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this;\n  },\n\n  // check if current char is a token char\n  is_TOKEN: function () {\n    const ch = this._input[this.offset - 1];\n    return tokens.indexOf(ch) !== -1;\n  },\n  // check if current char is a whitespace\n  is_WHITESPACE: function () {\n    const ch = this._input[this.offset - 1];\n    return ch === \" \" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\r\";\n  },\n  // check if current char is a whitespace (without newlines)\n  is_TABSPACE: function () {\n    const ch = this._input[this.offset - 1];\n    return ch === \" \" || ch === \"\\t\";\n  },\n  // consume all whitespaces (excluding newlines)\n  consume_TABSPACE: function () {\n    while (this.offset < this.size) {\n      const ch = this.input();\n      if (!this.is_TABSPACE()) {\n        if (ch) this.unput(1);\n        break;\n      }\n    }\n    return this;\n  },\n  // check if current char can be a hexadecimal number\n  is_HEX: function () {\n    const ch = this._input.charCodeAt(this.offset - 1);\n    // 0 - 9\n    if (ch > 47 && ch < 58) return true;\n    // A - F\n    if (ch > 64 && ch < 71) return true;\n    // a - f\n    if (ch > 96 && ch < 103) return true;\n    // _ (code 95)\n    if (ch === 95) return true;\n    // else\n    return false;\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\n/**\n * @private\n */\nfunction isNumber(n) {\n  return n != \".\" && n != \",\" && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * The PHP Parser class that build the AST tree from the lexer\n *\n * @class\n * @tutorial Parser\n * @property {Lexer} lexer - current lexer instance\n * @property {AST} ast - the AST factory instance\n * @property {Integer|String} token - current token\n * @property {Boolean} extractDoc - should extract documentation as AST node\n * @property {Boolean} extractTokens - should extract each token\n * @property {Boolean} suppressErrors - should ignore parsing errors and continue\n * @property {Boolean} debug - should output debug informations\n */\nconst parser = function (lexer, ast) {\n  this.lexer = lexer;\n  this.ast = ast;\n  this.tok = lexer.tok;\n  this.EOF = lexer.EOF;\n  this.token = null;\n  this.prev = null;\n  this.debug = false;\n  this.version = 704;\n  this.extractDoc = false;\n  this.extractTokens = false;\n  this.suppressErrors = false;\n  const mapIt = function (item) {\n    return [item, null];\n  };\n  this.entries = {\n    // reserved_non_modifiers\n    IDENTIFIER: new Map(\n      [\n        this.tok.T_ABSTRACT,\n        this.tok.T_ARRAY,\n        this.tok.T_AS,\n        this.tok.T_BREAK,\n        this.tok.T_CALLABLE,\n        this.tok.T_CASE,\n        this.tok.T_CATCH,\n        this.tok.T_CLASS,\n        this.tok.T_CLASS_C,\n        this.tok.T_CLONE,\n        this.tok.T_CONST,\n        this.tok.T_CONTINUE,\n        this.tok.T_DECLARE,\n        this.tok.T_DEFAULT,\n        this.tok.T_DIR,\n        this.tok.T_DO,\n        this.tok.T_ECHO,\n        this.tok.T_ELSE,\n        this.tok.T_ELSEIF,\n        this.tok.T_EMPTY,\n        this.tok.T_ENDDECLARE,\n        this.tok.T_ENDFOR,\n        this.tok.T_ENDFOREACH,\n        this.tok.T_ENDIF,\n        this.tok.T_ENDSWITCH,\n        this.tok.T_ENDWHILE,\n        this.tok.T_EVAL,\n        this.tok.T_EXIT,\n        this.tok.T_EXTENDS,\n        this.tok.T_FILE,\n        this.tok.T_FINAL,\n        this.tok.T_FINALLY,\n        this.tok.T_FN,\n        this.tok.T_FOR,\n        this.tok.T_FOREACH,\n        this.tok.T_FUNC_C,\n        this.tok.T_FUNCTION,\n        this.tok.T_GLOBAL,\n        this.tok.T_GOTO,\n        this.tok.T_IF,\n        this.tok.T_IMPLEMENTS,\n        this.tok.T_INCLUDE,\n        this.tok.T_INCLUDE_ONCE,\n        this.tok.T_INSTANCEOF,\n        this.tok.T_INSTEADOF,\n        this.tok.T_INTERFACE,\n        this.tok.T_ISSET,\n        this.tok.T_LINE,\n        this.tok.T_LIST,\n        this.tok.T_LOGICAL_AND,\n        this.tok.T_LOGICAL_OR,\n        this.tok.T_LOGICAL_XOR,\n        this.tok.T_METHOD_C,\n        this.tok.T_NAMESPACE,\n        this.tok.T_NEW,\n        this.tok.T_NS_C,\n        this.tok.T_PRINT,\n        this.tok.T_PRIVATE,\n        this.tok.T_PROTECTED,\n        this.tok.T_PUBLIC,\n        this.tok.T_REQUIRE,\n        this.tok.T_REQUIRE_ONCE,\n        this.tok.T_RETURN,\n        this.tok.T_STATIC,\n        this.tok.T_SWITCH,\n        this.tok.T_THROW,\n        this.tok.T_TRAIT,\n        this.tok.T_TRY,\n        this.tok.T_UNSET,\n        this.tok.T_USE,\n        this.tok.T_VAR,\n        this.tok.T_WHILE,\n        this.tok.T_YIELD,\n      ].map(mapIt)\n    ),\n    VARIABLE: new Map(\n      [\n        this.tok.T_VARIABLE,\n        \"$\",\n        \"&\",\n        this.tok.T_NS_SEPARATOR,\n        this.tok.T_STRING,\n        this.tok.T_NAMESPACE,\n        this.tok.T_STATIC,\n      ].map(mapIt)\n    ),\n    SCALAR: new Map(\n      [\n        this.tok.T_CONSTANT_ENCAPSED_STRING,\n        this.tok.T_START_HEREDOC,\n        this.tok.T_LNUMBER,\n        this.tok.T_DNUMBER,\n        this.tok.T_ARRAY,\n        \"[\",\n        this.tok.T_CLASS_C,\n        this.tok.T_TRAIT_C,\n        this.tok.T_FUNC_C,\n        this.tok.T_METHOD_C,\n        this.tok.T_LINE,\n        this.tok.T_FILE,\n        this.tok.T_DIR,\n        this.tok.T_NS_C,\n        '\"',\n        'b\"',\n        'B\"',\n        \"-\",\n        this.tok.T_NS_SEPARATOR,\n      ].map(mapIt)\n    ),\n    T_MAGIC_CONST: new Map(\n      [\n        this.tok.T_CLASS_C,\n        this.tok.T_TRAIT_C,\n        this.tok.T_FUNC_C,\n        this.tok.T_METHOD_C,\n        this.tok.T_LINE,\n        this.tok.T_FILE,\n        this.tok.T_DIR,\n        this.tok.T_NS_C,\n      ].map(mapIt)\n    ),\n    T_MEMBER_FLAGS: new Map(\n      [\n        this.tok.T_PUBLIC,\n        this.tok.T_PRIVATE,\n        this.tok.T_PROTECTED,\n        this.tok.T_STATIC,\n        this.tok.T_ABSTRACT,\n        this.tok.T_FINAL,\n      ].map(mapIt)\n    ),\n    EOS: new Map([\";\", this.EOF, this.tok.T_INLINE_HTML].map(mapIt)),\n    EXPR: new Map(\n      [\n        \"@\",\n        \"-\",\n        \"+\",\n        \"!\",\n        \"~\",\n        \"(\",\n        \"`\",\n        this.tok.T_LIST,\n        this.tok.T_CLONE,\n        this.tok.T_INC,\n        this.tok.T_DEC,\n        this.tok.T_NEW,\n        this.tok.T_ISSET,\n        this.tok.T_EMPTY,\n        this.tok.T_INCLUDE,\n        this.tok.T_INCLUDE_ONCE,\n        this.tok.T_REQUIRE,\n        this.tok.T_REQUIRE_ONCE,\n        this.tok.T_EVAL,\n        this.tok.T_INT_CAST,\n        this.tok.T_DOUBLE_CAST,\n        this.tok.T_STRING_CAST,\n        this.tok.T_ARRAY_CAST,\n        this.tok.T_OBJECT_CAST,\n        this.tok.T_BOOL_CAST,\n        this.tok.T_UNSET_CAST,\n        this.tok.T_EXIT,\n        this.tok.T_PRINT,\n        this.tok.T_YIELD,\n        this.tok.T_STATIC,\n        this.tok.T_FUNCTION,\n        this.tok.T_FN,\n        // using VARIABLES :\n        this.tok.T_VARIABLE,\n        \"$\",\n        this.tok.T_NS_SEPARATOR,\n        this.tok.T_STRING,\n        // using SCALAR :\n        this.tok.T_STRING, // @see variable.js line 45 > conflict with variable = shift/reduce :)\n        this.tok.T_CONSTANT_ENCAPSED_STRING,\n        this.tok.T_START_HEREDOC,\n        this.tok.T_LNUMBER,\n        this.tok.T_DNUMBER,\n        this.tok.T_ARRAY,\n        \"[\",\n        this.tok.T_CLASS_C,\n        this.tok.T_TRAIT_C,\n        this.tok.T_FUNC_C,\n        this.tok.T_METHOD_C,\n        this.tok.T_LINE,\n        this.tok.T_FILE,\n        this.tok.T_DIR,\n        this.tok.T_NS_C,\n        '\"',\n        'b\"',\n        'B\"',\n        \"-\",\n        this.tok.T_NS_SEPARATOR,\n      ].map(mapIt)\n    ),\n  };\n};\n\n/**\n * helper : gets a token name\n */\nparser.prototype.getTokenName = function (token) {\n  if (!isNumber(token)) {\n    return \"'\" + token + \"'\";\n  } else {\n    if (token == this.EOF) return \"the end of file (EOF)\";\n    return this.lexer.engine.tokens.values[token];\n  }\n};\n\n/**\n * main entry point : converts a source code to AST\n */\nparser.prototype.parse = function (code, filename) {\n  this._errors = [];\n  this.filename = filename || \"eval\";\n  this.currentNamespace = [\"\"];\n  if (this.extractDoc) {\n    this._docs = [];\n  } else {\n    this._docs = null;\n  }\n  if (this.extractTokens) {\n    this._tokens = [];\n  } else {\n    this._tokens = null;\n  }\n  this._docIndex = 0;\n  this._lastNode = null;\n  this.lexer.setInput(code);\n  this.lexer.all_tokens = this.extractTokens;\n  this.lexer.comment_tokens = this.extractDoc;\n  this.length = this.lexer._input.length;\n  this.innerList = false;\n  this.innerListForm = false;\n  const program = this.node(\"program\");\n  const childs = [];\n  this.next();\n  while (this.token != this.EOF) {\n    childs.push(this.read_start());\n  }\n  // append last comment\n  if (\n    childs.length === 0 &&\n    this.extractDoc &&\n    this._docs.length > this._docIndex\n  ) {\n    childs.push(this.node(\"noop\")());\n  }\n  // #176 : register latest position\n  this.prev = [\n    this.lexer.yylloc.last_line,\n    this.lexer.yylloc.last_column,\n    this.lexer.offset,\n  ];\n  const result = program(childs, this._errors, this._docs, this._tokens);\n  if (this.debug) {\n    const errors = this.ast.checkNodes();\n    if (errors.length > 0) {\n      errors.forEach(function (error) {\n        if (error.position) {\n          // eslint-disable-next-line no-console\n          console.log(\n            \"Node at line \" +\n              error.position.line +\n              \", column \" +\n              error.position.column\n          );\n        }\n        // eslint-disable-next-line no-console\n        console.log(error.stack.join(\"\\n\"));\n      });\n      throw new Error(\"Some nodes are not closed\");\n    }\n  }\n  return result;\n};\n\n/**\n * Raise an error\n */\nparser.prototype.raiseError = function (message, msgExpect, expect, token) {\n  message += \" on line \" + this.lexer.yylloc.first_line;\n  if (!this.suppressErrors) {\n    const err = new SyntaxError(\n      message,\n      this.filename,\n      this.lexer.yylloc.first_line\n    );\n    err.lineNumber = this.lexer.yylloc.first_line;\n    err.fileName = this.filename;\n    err.columnNumber = this.lexer.yylloc.first_column;\n    throw err;\n  }\n  // Error node :\n  const node = this.ast.prepare(\"error\", null, this)(\n    message,\n    token,\n    this.lexer.yylloc.first_line,\n    expect\n  );\n  this._errors.push(node);\n  return node;\n};\n\n/**\n * handling errors\n */\nparser.prototype.error = function (expect) {\n  let msg = \"Parse Error : syntax error\";\n  let token = this.getTokenName(this.token);\n  let msgExpect = \"\";\n\n  if (this.token !== this.EOF) {\n    if (isNumber(this.token)) {\n      let symbol = this.text();\n      if (symbol.length > 10) {\n        symbol = symbol.substring(0, 7) + \"...\";\n      }\n      token = \"'\" + symbol + \"' (\" + token + \")\";\n    }\n    msg += \", unexpected \" + token;\n  }\n  if (expect && !Array.isArray(expect)) {\n    if (isNumber(expect) || expect.length === 1) {\n      msgExpect = \", expecting \" + this.getTokenName(expect);\n    }\n    msg += msgExpect;\n  }\n  return this.raiseError(msg, msgExpect, expect, token);\n};\n\n/**\n * Creates a new AST node\n */\nparser.prototype.node = function (name) {\n  if (this.extractDoc) {\n    let docs = null;\n    if (this._docIndex < this._docs.length) {\n      docs = this._docs.slice(this._docIndex);\n      this._docIndex = this._docs.length;\n      if (this.debug) {\n        // eslint-disable-next-line no-console\n        console.log(new Error(\"Append docs on \" + name));\n        // eslint-disable-next-line no-console\n        console.log(docs);\n      }\n    }\n    const node = this.ast.prepare(name, docs, this);\n    /**\n     * TOKENS :\n     * node1 commentA token commmentB node2 commentC token commentD node3 commentE token\n     *\n     * AST :\n     * structure:S1 [\n     *    left: node1 ( trail: commentA ),\n     *    right: structure:S2 [\n     *       node2 (lead: commentB, trail: commentC),\n     *       node3 (lead: commentD)\n     *    ],\n     *    trail: commentE\n     * ]\n     *\n     * Algorithm :\n     *\n     * Attach the last comments on parent of current node\n     * If a new node is started and the parent has a trailing comment\n     * the move it on previous node\n     *\n     * start S2\n     * start node1\n     * consume node1 & set commentA as trailingComment on S2\n     * start S2\n     * S1 has a trailingComment, attach it on node1\n     * ...\n     * NOTE : As the trailingComment Behavior depends on AST, it will be build on\n     * the AST layer - last child node will keep it's trailingComment nodes\n     */\n    node.postBuild = function (self) {\n      if (this._docIndex < this._docs.length) {\n        if (this._lastNode) {\n          const offset = this.prev[2];\n          let max = this._docIndex;\n          for (; max < this._docs.length; max++) {\n            if (this._docs[max].offset > offset) {\n              break;\n            }\n          }\n          if (max > this._docIndex) {\n            // inject trailing comment on child node\n            this._lastNode.setTrailingComments(\n              this._docs.slice(this._docIndex, max)\n            );\n            this._docIndex = max;\n          }\n        } else if (this.token === this.EOF) {\n          // end of content\n          self.setTrailingComments(this._docs.slice(this._docIndex));\n          this._docIndex = this._docs.length;\n        }\n      }\n      this._lastNode = self;\n    }.bind(this);\n    return node;\n  }\n  return this.ast.prepare(name, null, this);\n};\n\n/**\n * expects an end of statement or end of file\n * @return {boolean}\n */\nparser.prototype.expectEndOfStatement = function (node) {\n  if (this.token === \";\") {\n    // include only real ';' statements\n    // https://github.com/glayzzle/php-parser/issues/164\n    if (node && this.lexer.yytext === \";\") {\n      node.includeToken(this);\n    }\n  } else if (this.token !== this.tok.T_INLINE_HTML && this.token !== this.EOF) {\n    this.error(\";\");\n    return false;\n  }\n  this.next();\n  return true;\n};\n\n/** outputs some debug information on current token **/\nconst ignoreStack = [\"parser.next\", \"parser.node\", \"parser.showlog\"];\nparser.prototype.showlog = function () {\n  const stack = new Error().stack.split(\"\\n\");\n  let line;\n  for (let offset = 2; offset < stack.length; offset++) {\n    line = stack[offset].trim();\n    let found = false;\n    for (let i = 0; i < ignoreStack.length; i++) {\n      if (line.substring(3, 3 + ignoreStack[i].length) === ignoreStack[i]) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      break;\n    }\n  }\n  // eslint-disable-next-line no-console\n  console.log(\n    \"Line \" +\n      this.lexer.yylloc.first_line +\n      \" : \" +\n      this.getTokenName(this.token) +\n      \">\" +\n      this.lexer.yytext +\n      \"<\" +\n      \" @-->\" +\n      line\n  );\n  return this;\n};\n\n/**\n * Force the parser to check the current token.\n *\n * If the current token does not match to expected token,\n * the an error will be raised.\n *\n * If the suppressError mode is activated, then the error will\n * be added to the program error stack and this function will return `false`.\n *\n * @param {String|Number} token\n * @return {boolean}\n * @throws Error\n */\nparser.prototype.expect = function (token) {\n  if (Array.isArray(token)) {\n    if (token.indexOf(this.token) === -1) {\n      this.error(token);\n      return false;\n    }\n  } else if (this.token != token) {\n    this.error(token);\n    return false;\n  }\n  return true;\n};\n\n/**\n * Returns the current token contents\n * @return {String}\n */\nparser.prototype.text = function () {\n  return this.lexer.yytext;\n};\n\n/** consume the next token **/\nparser.prototype.next = function () {\n  // prepare the back command\n  if (this.token !== \";\" || this.lexer.yytext === \";\") {\n    // ignore '?>' from automated resolution\n    // https://github.com/glayzzle/php-parser/issues/168\n    this.prev = [\n      this.lexer.yylloc.last_line,\n      this.lexer.yylloc.last_column,\n      this.lexer.offset,\n    ];\n  }\n\n  // eating the token\n  this.lex();\n\n  // showing the debug\n  if (this.debug) {\n    this.showlog();\n  }\n\n  // handling comments\n  if (this.extractDoc) {\n    while (\n      this.token === this.tok.T_COMMENT ||\n      this.token === this.tok.T_DOC_COMMENT\n    ) {\n      // APPEND COMMENTS\n      if (this.token === this.tok.T_COMMENT) {\n        this._docs.push(this.read_comment());\n      } else {\n        this._docs.push(this.read_doc_comment());\n      }\n    }\n  }\n\n  return this;\n};\n\n/**\n * Eating a token\n */\nparser.prototype.lex = function () {\n  // append on token stack\n  if (this.extractTokens) {\n    do {\n      // the token\n      this.token = this.lexer.lex() || this.EOF;\n      if (this.token === this.EOF) return this;\n      let entry = this.lexer.yytext;\n      if (this.lexer.engine.tokens.values.hasOwnProperty(this.token)) {\n        entry = [\n          this.lexer.engine.tokens.values[this.token],\n          entry,\n          this.lexer.yylloc.first_line,\n          this.lexer.yylloc.first_offset,\n          this.lexer.offset,\n        ];\n      } else {\n        entry = [\n          null,\n          entry,\n          this.lexer.yylloc.first_line,\n          this.lexer.yylloc.first_offset,\n          this.lexer.offset,\n        ];\n      }\n      this._tokens.push(entry);\n      if (this.token === this.tok.T_CLOSE_TAG) {\n        // https://github.com/php/php-src/blob/7ff186434e82ee7be7c59d0db9a976641cf7b09c/Zend/zend_compile.c#L1680\n        this.token = \";\";\n        return this;\n      } else if (this.token === this.tok.T_OPEN_TAG_WITH_ECHO) {\n        this.token = this.tok.T_ECHO;\n        return this;\n      }\n    } while (\n      this.token === this.tok.T_WHITESPACE || // ignore white space\n      (!this.extractDoc &&\n        (this.token === this.tok.T_COMMENT || // ignore single lines comments\n          this.token === this.tok.T_DOC_COMMENT)) || // ignore doc comments\n      // ignore open tags\n      this.token === this.tok.T_OPEN_TAG\n    );\n  } else {\n    this.token = this.lexer.lex() || this.EOF;\n  }\n  return this;\n};\n\n/**\n * Check if token is of specified type\n */\nparser.prototype.is = function (type) {\n  if (Array.isArray(type)) {\n    return type.indexOf(this.token) !== -1;\n  }\n  return this.entries[type].has(this.token);\n};\n\n// extends the parser with syntax files\n[\n  require(\"./parser/array.js\"),\n  require(\"./parser/class.js\"),\n  require(\"./parser/comment.js\"),\n  require(\"./parser/expr.js\"),\n  require(\"./parser/function.js\"),\n  require(\"./parser/if.js\"),\n  require(\"./parser/loops.js\"),\n  require(\"./parser/main.js\"),\n  require(\"./parser/namespace.js\"),\n  require(\"./parser/scalar.js\"),\n  require(\"./parser/statement.js\"),\n  require(\"./parser/switch.js\"),\n  require(\"./parser/try.js\"),\n  require(\"./parser/utils.js\"),\n  require(\"./parser/variable.js\"),\n].forEach(function (ext) {\n  for (const k in ext) {\n    if (parser.prototype.hasOwnProperty(k)) {\n      // @see https://github.com/glayzzle/php-parser/issues/234\n      throw new Error(\"Function \" + k + \" is already defined - collision\");\n    }\n    parser.prototype[k] = ext[k];\n  }\n});\n\nmodule.exports = parser;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   * Parse an array\n   * ```ebnf\n   * array ::= T_ARRAY '(' array_pair_list ')' |\n   *   '[' array_pair_list ']'\n   * ```\n   */\n  read_array: function () {\n    let expect = null;\n    let shortForm = false;\n    const result = this.node(\"array\");\n\n    if (this.token === this.tok.T_ARRAY) {\n      this.next().expect(\"(\");\n      expect = \")\";\n    } else {\n      shortForm = true;\n      expect = \"]\";\n    }\n    let items = [];\n    if (this.next().token !== expect) {\n      items = this.read_array_pair_list(shortForm);\n    }\n    this.expect(expect);\n    this.next();\n    return result(shortForm, items);\n  },\n  /**\n   * Reads an array of items\n   * ```ebnf\n   * array_pair_list ::= array_pair (',' array_pair?)*\n   * ```\n   */\n  read_array_pair_list: function (shortForm) {\n    const self = this;\n    return this.read_list(\n      function () {\n        return self.read_array_pair(shortForm);\n      },\n      \",\",\n      true\n    );\n  },\n  /**\n   * Reads an entry\n   * array_pair:\n   *  expr T_DOUBLE_ARROW expr\n   *  | expr\n   *  | expr T_DOUBLE_ARROW '&' variable\n   *  | '&' variable\n   *  | expr T_DOUBLE_ARROW T_LIST '(' array_pair_list ')'\n   *  | T_LIST '(' array_pair_list ')'\n   */\n  read_array_pair: function (shortForm) {\n    if (\n      (!shortForm && this.token === \")\") ||\n      (shortForm && this.token === \"]\")\n    ) {\n      return;\n    }\n\n    if (this.token === \",\") {\n      return this.node(\"noop\")();\n    }\n\n    const entry = this.node(\"entry\");\n\n    let key = null;\n    let value = null;\n    let byRef = false;\n    let unpack = false;\n\n    if (this.token === \"&\") {\n      this.next();\n      byRef = true;\n      value = this.read_variable(true, false);\n    } else if (this.token === this.tok.T_ELLIPSIS && this.version >= 704) {\n      this.next();\n      if (this.token === \"&\") {\n        this.error();\n      }\n      unpack = true;\n      value = this.read_expr();\n    } else {\n      const expr = this.read_expr();\n\n      if (this.token === this.tok.T_DOUBLE_ARROW) {\n        this.next();\n        key = expr;\n\n        if (this.token === \"&\") {\n          this.next();\n          byRef = true;\n          value = this.read_variable(true, false);\n        } else {\n          value = this.read_expr();\n        }\n      } else {\n        value = expr;\n      }\n    }\n\n    return entry(key, value, byRef, unpack);\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   * reading a class\n   * ```ebnf\n   * class ::= class_scope? T_CLASS T_STRING (T_EXTENDS NAMESPACE_NAME)? (T_IMPLEMENTS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' CLASS_BODY '}'\n   * ```\n   */\n  read_class_declaration_statement: function () {\n    const result = this.node(\"class\");\n    const flag = this.read_class_modifiers();\n    // graceful mode : ignore token & go next\n    if (this.token !== this.tok.T_CLASS) {\n      this.error(this.tok.T_CLASS);\n      this.next();\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    const propExtends = this.read_extends_from();\n    const propImplements = this.read_implements_list();\n    this.expect(\"{\");\n    const body = this.next().read_class_body();\n    return result(propName, propExtends, propImplements, body, flag);\n  },\n\n  read_class_modifiers: function () {\n    return [0, 0, this.read_class_modifier()];\n  },\n\n  read_class_modifier: function () {\n    const result = 0;\n\n    if (this.token === this.tok.T_ABSTRACT) {\n      this.next();\n      return 1;\n    } else if (this.token === this.tok.T_FINAL) {\n      this.next();\n      return 2;\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads a class body\n   * ```ebnf\n   *   class_body ::= (member_flags? (T_VAR | T_STRING | T_FUNCTION))*\n   * ```\n   */\n  read_class_body: function () {\n    let result = [];\n\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      if (this.token === this.tok.T_COMMENT) {\n        result.push(this.read_comment());\n        continue;\n      }\n\n      if (this.token === this.tok.T_DOC_COMMENT) {\n        result.push(this.read_doc_comment());\n        continue;\n      }\n\n      // check T_USE trait\n      if (this.token === this.tok.T_USE) {\n        result = result.concat(this.read_trait_use_statement());\n        continue;\n      }\n\n      // read member flags\n      const flags = this.read_member_flags(false);\n\n      // check constant\n      if (this.token === this.tok.T_CONST) {\n        const constants = this.read_constant_list(flags);\n        if (this.expect(\";\")) {\n          this.next();\n        }\n        result = result.concat(constants);\n        continue;\n      }\n\n      // jump over T_VAR then land on T_VARIABLE\n      if (this.token === this.tok.T_VAR) {\n        this.next().expect(this.tok.T_VARIABLE);\n        flags[0] = null; // public (as null)\n        flags[1] = 0; // non static var\n      }\n\n      if (this.token === this.tok.T_FUNCTION) {\n        // reads a function\n        result.push(this.read_function(false, flags));\n      } else if (\n        this.token === this.tok.T_VARIABLE ||\n        // support https://wiki.php.net/rfc/typed_properties_v2\n        (this.version >= 704 &&\n          (this.token === \"?\" ||\n            this.token === this.tok.T_CALLABLE ||\n            this.token === this.tok.T_ARRAY ||\n            this.token === this.tok.T_NS_SEPARATOR ||\n            this.token === this.tok.T_STRING ||\n            this.token === this.tok.T_NAMESPACE))\n      ) {\n        // reads a variable\n        const variables = this.read_variable_list(flags);\n        this.expect(\";\");\n        this.next();\n        result = result.concat(variables);\n      } else {\n        // raise an error\n        this.error([\n          this.tok.T_CONST,\n          this.tok.T_VARIABLE,\n          this.tok.T_FUNCTION,\n        ]);\n        // ignore token\n        this.next();\n      }\n    }\n    this.expect(\"}\");\n    this.next();\n    return result;\n  },\n  /**\n   * Reads variable list\n   * ```ebnf\n   *  variable_list ::= (variable_declaration ',')* variable_declaration\n   * ```\n   */\n  read_variable_list: function (flags) {\n    const result = this.node(\"propertystatement\");\n\n    const properties = this.read_list(\n      /**\n       * Reads a variable declaration\n       *\n       * ```ebnf\n       *  variable_declaration ::= T_VARIABLE '=' scalar\n       * ```\n       */\n      function read_variable_declaration() {\n        const result = this.node(\"property\");\n        const [nullable, type] = this.read_optional_type();\n        this.expect(this.tok.T_VARIABLE);\n        let propName = this.node(\"identifier\");\n        const name = this.text().substring(1); // ignore $\n        this.next();\n        propName = propName(name);\n        if (this.token === \";\" || this.token === \",\") {\n          return result(propName, null, nullable, type);\n        } else if (this.token === \"=\") {\n          // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L815\n          return result(propName, this.next().read_expr(), nullable, type);\n        } else {\n          this.expect([\",\", \";\", \"=\"]);\n          return result(propName, null, nullable, type);\n        }\n      },\n      \",\"\n    );\n\n    return result(null, properties, flags);\n  },\n  /**\n   * Reads constant list\n   * ```ebnf\n   *  constant_list ::= T_CONST (constant_declaration ',')* constant_declaration\n   * ```\n   */\n  read_constant_list: function (flags) {\n    if (this.expect(this.tok.T_CONST)) {\n      this.next();\n    }\n    const result = this.node(\"classconstant\");\n    const items = this.read_list(\n      /**\n       * Reads a constant declaration\n       *\n       * ```ebnf\n       *  constant_declaration ::= (T_STRING | IDENTIFIER) '=' expr\n       * ```\n       * @return {Constant} [:link:](AST.md#constant)\n       */\n      function read_constant_declaration() {\n        const result = this.node(\"constant\");\n        let constName = null;\n        let value = null;\n        if (\n          this.token === this.tok.T_STRING ||\n          (this.version >= 700 && this.is(\"IDENTIFIER\"))\n        ) {\n          constName = this.node(\"identifier\");\n          const name = this.text();\n          this.next();\n          constName = constName(name);\n        } else {\n          this.expect(\"IDENTIFIER\");\n        }\n        if (this.expect(\"=\")) {\n          value = this.next().read_expr();\n        }\n        return result(constName, value);\n      },\n      \",\"\n    );\n\n    return result(null, items, flags);\n  },\n  /**\n   * Read member flags\n   * @return array\n   *  1st index : 0 => public, 1 => protected, 2 => private\n   *  2nd index : 0 => instance member, 1 => static member\n   *  3rd index : 0 => normal, 1 => abstract member, 2 => final member\n   */\n  read_member_flags: function (asInterface) {\n    const result = [-1, -1, -1];\n    if (this.is(\"T_MEMBER_FLAGS\")) {\n      let idx = 0,\n        val = 0;\n      do {\n        switch (this.token) {\n          case this.tok.T_PUBLIC:\n            idx = 0;\n            val = 0;\n            break;\n          case this.tok.T_PROTECTED:\n            idx = 0;\n            val = 1;\n            break;\n          case this.tok.T_PRIVATE:\n            idx = 0;\n            val = 2;\n            break;\n          case this.tok.T_STATIC:\n            idx = 1;\n            val = 1;\n            break;\n          case this.tok.T_ABSTRACT:\n            idx = 2;\n            val = 1;\n            break;\n          case this.tok.T_FINAL:\n            idx = 2;\n            val = 2;\n            break;\n        }\n        if (asInterface) {\n          if (idx == 0 && val == 2) {\n            // an interface can't be private\n            this.expect([this.tok.T_PUBLIC, this.tok.T_PROTECTED]);\n            val = -1;\n          } else if (idx == 2 && val == 1) {\n            // an interface cant be abstract\n            this.error();\n            val = -1;\n          }\n        }\n        if (result[idx] !== -1) {\n          // already defined flag\n          this.error();\n        } else if (val !== -1) {\n          result[idx] = val;\n        }\n      } while (this.next().is(\"T_MEMBER_FLAGS\"));\n    }\n\n    if (result[1] == -1) result[1] = 0;\n    if (result[2] == -1) result[2] = 0;\n    return result;\n  },\n\n  /**\n   * optional_type:\n   *\t  /- empty -/\t{ $$ = NULL; }\n   *   |\ttype_expr\t{ $$ = $1; }\n   * ;\n   *\n   * type_expr:\n   *\t\ttype\t\t{ $$ = $1; }\n   *\t|\t'?' type\t{ $$ = $2; $$->attr |= ZEND_TYPE_NULLABLE; }\n   *\t|\tunion_type\t{ $$ = $1; }\n   * ;\n   *\n   * type:\n   * \t\tT_ARRAY\t\t{ $$ = zend_ast_create_ex(ZEND_AST_TYPE, IS_ARRAY); }\n   * \t|\tT_CALLABLE\t{ $$ = zend_ast_create_ex(ZEND_AST_TYPE, IS_CALLABLE); }\n   * \t|\tname\t\t{ $$ = $1; }\n   * ;\n   *\n   * union_type:\n   * \t\ttype '|' type       { $$ = zend_ast_create_list(2, ZEND_AST_TYPE_UNION, $1, $3); }\n   * \t|\tunion_type '|' type { $$ = zend_ast_list_add($1, $3); }\n   * ;\n   */\n  read_optional_type: function () {\n    let nullable = false;\n    if (this.token === \"?\") {\n      nullable = true;\n      this.next();\n    }\n    let type = this.read_type();\n    if (nullable && !type) {\n      this.raiseError(\n        \"Expecting a type definition combined with nullable operator\"\n      );\n    }\n    if (!nullable && !type) {\n      return [false, null];\n    }\n    if (this.token === \"|\") {\n      type = [type];\n      do {\n        this.next();\n        const variant = this.read_type();\n        if (!variant) {\n          this.raiseError(\"Expecting a type definition\");\n          break;\n        }\n        type.push(variant);\n      } while (this.token === \"|\");\n    }\n    return [nullable, type];\n  },\n\n  /**\n   * reading an interface\n   * ```ebnf\n   * interface ::= T_INTERFACE T_STRING (T_EXTENDS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' INTERFACE_BODY '}'\n   * ```\n   */\n  read_interface_declaration_statement: function () {\n    const result = this.node(\"interface\");\n    if (this.token !== this.tok.T_INTERFACE) {\n      this.error(this.tok.T_INTERFACE);\n      this.next();\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    const propExtends = this.read_interface_extends_list();\n    this.expect(\"{\");\n    const body = this.next().read_interface_body();\n    return result(propName, propExtends, body);\n  },\n  /**\n   * Reads an interface body\n   * ```ebnf\n   *   interface_body ::= (member_flags? (T_CONST | T_FUNCTION))*\n   * ```\n   */\n  read_interface_body: function () {\n    let result = [];\n\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      if (this.token === this.tok.T_COMMENT) {\n        result.push(this.read_comment());\n        continue;\n      }\n\n      if (this.token === this.tok.T_DOC_COMMENT) {\n        result.push(this.read_doc_comment());\n        continue;\n      }\n\n      // read member flags\n      const flags = this.read_member_flags(true);\n\n      // check constant\n      if (this.token == this.tok.T_CONST) {\n        const constants = this.read_constant_list(flags);\n        if (this.expect(\";\")) {\n          this.next();\n        }\n        result = result.concat(constants);\n      } else if (this.token === this.tok.T_FUNCTION) {\n        // reads a function\n        const method = this.read_function_declaration(2, flags);\n        method.parseFlags(flags);\n        result.push(method);\n        if (this.expect(\";\")) {\n          this.next();\n        }\n      } else {\n        // raise an error\n        this.error([this.tok.T_CONST, this.tok.T_FUNCTION]);\n        this.next();\n      }\n    }\n    if (this.expect(\"}\")) {\n      this.next();\n    }\n    return result;\n  },\n  /**\n   * reading a trait\n   * ```ebnf\n   * trait ::= T_TRAIT T_STRING (T_EXTENDS (NAMESPACE_NAME ',')* NAMESPACE_NAME)? '{' FUNCTION* '}'\n   * ```\n   */\n  read_trait_declaration_statement: function () {\n    const result = this.node(\"trait\");\n    // graceful mode : ignore token & go next\n    if (this.token !== this.tok.T_TRAIT) {\n      this.error(this.tok.T_TRAIT);\n      this.next();\n      return null;\n    }\n    this.next().expect(this.tok.T_STRING);\n    let propName = this.node(\"identifier\");\n    const name = this.text();\n    this.next();\n    propName = propName(name);\n    this.expect(\"{\");\n    const body = this.next().read_class_body();\n    return result(propName, body);\n  },\n  /**\n   * reading a use statement\n   * ```ebnf\n   * trait_use_statement ::= namespace_name (',' namespace_name)* ('{' trait_use_alias '}')?\n   * ```\n   */\n  read_trait_use_statement: function () {\n    // defines use statements\n    const node = this.node(\"traituse\");\n    this.expect(this.tok.T_USE) && this.next();\n    const traits = [this.read_namespace_name()];\n    let adaptations = null;\n    while (this.token === \",\") {\n      traits.push(this.next().read_namespace_name());\n    }\n    if (this.token === \"{\") {\n      adaptations = [];\n      // defines alias statements\n      while (this.next().token !== this.EOF) {\n        if (this.token === \"}\") break;\n        adaptations.push(this.read_trait_use_alias());\n        this.expect(\";\");\n      }\n      if (this.expect(\"}\")) {\n        this.next();\n      }\n    } else {\n      if (this.expect(\";\")) {\n        this.next();\n      }\n    }\n    return node(traits, adaptations);\n  },\n  /**\n   * Reading trait alias\n   * ```ebnf\n   * trait_use_alias ::= namespace_name ( T_DOUBLE_COLON T_STRING )? (T_INSTEADOF namespace_name) | (T_AS member_flags? T_STRING)\n   * ```\n   * name list : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L303\n   * trait adaptation : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L742\n   */\n  read_trait_use_alias: function () {\n    const node = this.node();\n    let trait = null;\n    let method;\n\n    if (this.is(\"IDENTIFIER\")) {\n      method = this.node(\"identifier\");\n      const methodName = this.text();\n      this.next();\n      method = method(methodName);\n    } else {\n      method = this.read_namespace_name();\n\n      if (this.token === this.tok.T_DOUBLE_COLON) {\n        this.next();\n        if (\n          this.token === this.tok.T_STRING ||\n          (this.version >= 700 && this.is(\"IDENTIFIER\"))\n        ) {\n          trait = method;\n          method = this.node(\"identifier\");\n          const methodName = this.text();\n          this.next();\n          method = method(methodName);\n        } else {\n          this.expect(this.tok.T_STRING);\n        }\n      } else {\n        // convert identifier as string\n        method = method.name;\n      }\n    }\n\n    // handle trait precedence\n    if (this.token === this.tok.T_INSTEADOF) {\n      return node(\n        \"traitprecedence\",\n        trait,\n        method,\n        this.next().read_name_list()\n      );\n    } else if (this.token === this.tok.T_AS) {\n      // handle trait alias\n      let flags = null;\n      let alias = null;\n      if (this.next().is(\"T_MEMBER_FLAGS\")) {\n        flags = this.read_member_flags();\n      }\n\n      if (\n        this.token === this.tok.T_STRING ||\n        (this.version >= 700 && this.is(\"IDENTIFIER\"))\n      ) {\n        alias = this.node(\"identifier\");\n        const name = this.text();\n        this.next();\n        alias = alias(name);\n      } else if (flags === false) {\n        // no visibility flags and no name => too bad\n        this.expect(this.tok.T_STRING);\n      }\n\n      return node(\"traitalias\", trait, method, alias, flags);\n    }\n\n    // handle errors\n    this.expect([this.tok.T_AS, this.tok.T_INSTEADOF]);\n    return node(\"traitalias\", trait, method, null, null);\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   *  Comments with // or # or / * ... * /\n   */\n  read_comment: function () {\n    const text = this.text();\n    let result = this.ast.prepare(\n      text.substring(0, 2) === \"/*\" ? \"commentblock\" : \"commentline\",\n      null,\n      this\n    );\n    const offset = this.lexer.yylloc.first_offset;\n    // handle location on comment\n    const prev = this.prev;\n    this.prev = [\n      this.lexer.yylloc.last_line,\n      this.lexer.yylloc.last_column,\n      this.lexer.offset,\n    ];\n    this.lex();\n    result = result(text);\n    result.offset = offset;\n    this.prev = prev;\n    return result;\n  },\n  /**\n   * Comments with / ** ... * /\n   */\n  read_doc_comment: function () {\n    let result = this.ast.prepare(\"commentblock\", null, this);\n    const offset = this.lexer.yylloc.first_offset;\n    const text = this.text();\n    const prev = this.prev;\n    this.prev = [\n      this.lexer.yylloc.last_line,\n      this.lexer.yylloc.last_column,\n      this.lexer.offset,\n    ];\n    this.lex();\n    result = result(text);\n    result.offset = offset;\n    this.prev = prev;\n    return result;\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  read_expr: function (expr) {\n    const result = this.node();\n    if (this.token === \"@\") {\n      if (!expr) {\n        expr = this.next().read_expr();\n      }\n      return result(\"silent\", expr);\n    }\n    if (!expr) {\n      expr = this.read_expr_item();\n    }\n    // binary operations\n    if (this.token === \"|\")\n      return result(\"bin\", \"|\", expr, this.next().read_expr());\n    if (this.token === \"&\")\n      return result(\"bin\", \"&\", expr, this.next().read_expr());\n    if (this.token === \"^\")\n      return result(\"bin\", \"^\", expr, this.next().read_expr());\n    if (this.token === \".\")\n      return result(\"bin\", \".\", expr, this.next().read_expr());\n    if (this.token === \"+\")\n      return result(\"bin\", \"+\", expr, this.next().read_expr());\n    if (this.token === \"-\")\n      return result(\"bin\", \"-\", expr, this.next().read_expr());\n    if (this.token === \"*\")\n      return result(\"bin\", \"*\", expr, this.next().read_expr());\n    if (this.token === \"/\")\n      return result(\"bin\", \"/\", expr, this.next().read_expr());\n    if (this.token === \"%\")\n      return result(\"bin\", \"%\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_POW)\n      return result(\"bin\", \"**\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_SL)\n      return result(\"bin\", \"<<\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_SR)\n      return result(\"bin\", \">>\", expr, this.next().read_expr());\n    // more binary operations (formerly bool)\n    if (this.token === this.tok.T_BOOLEAN_OR)\n      return result(\"bin\", \"||\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_LOGICAL_OR)\n      return result(\"bin\", \"or\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_BOOLEAN_AND)\n      return result(\"bin\", \"&&\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_LOGICAL_AND)\n      return result(\"bin\", \"and\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_LOGICAL_XOR)\n      return result(\"bin\", \"xor\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_IDENTICAL)\n      return result(\"bin\", \"===\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_NOT_IDENTICAL)\n      return result(\"bin\", \"!==\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_EQUAL)\n      return result(\"bin\", \"==\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_NOT_EQUAL)\n      return result(\"bin\", \"!=\", expr, this.next().read_expr());\n    if (this.token === \"<\")\n      return result(\"bin\", \"<\", expr, this.next().read_expr());\n    if (this.token === \">\")\n      return result(\"bin\", \">\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_SMALLER_OR_EQUAL)\n      return result(\"bin\", \"<=\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_IS_GREATER_OR_EQUAL)\n      return result(\"bin\", \">=\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_SPACESHIP)\n      return result(\"bin\", \"<=>\", expr, this.next().read_expr());\n    if (this.token === this.tok.T_INSTANCEOF) {\n      expr = result(\n        \"bin\",\n        \"instanceof\",\n        expr,\n        this.next().read_class_name_reference()\n      );\n      if (\n        this.token !== \";\" &&\n        this.token !== this.tok.T_INLINE_HTML &&\n        this.token !== this.EOF\n      ) {\n        expr = this.read_expr(expr);\n      }\n    }\n\n    // extra operations :\n    // $username = $_GET['user'] ?? 'nobody';\n    if (this.token === this.tok.T_COALESCE)\n      return result(\"bin\", \"??\", expr, this.next().read_expr());\n\n    // extra operations :\n    // $username = $_GET['user'] ? true : false;\n    if (this.token === \"?\") {\n      let trueArg = null;\n      if (this.next().token !== \":\") {\n        trueArg = this.read_expr();\n      }\n      this.expect(\":\") && this.next();\n      return result(\"retif\", expr, trueArg, this.read_expr());\n    } else {\n      // see #193\n      result.destroy(expr);\n    }\n\n    return expr;\n  },\n\n  /**\n   * Reads a cast expression\n   */\n  read_expr_cast: function (type) {\n    return this.node(\"cast\")(type, this.text(), this.next().read_expr());\n  },\n\n  /**\n   * Read a isset variable\n   */\n  read_isset_variable: function () {\n    return this.read_expr();\n  },\n\n  /**\n   * Reads isset variables\n   */\n  read_isset_variables: function () {\n    return this.read_function_list(this.read_isset_variable, \",\");\n  },\n\n  /*\n   * Reads internal PHP functions\n   */\n  read_internal_functions_in_yacc: function () {\n    let result = null;\n    switch (this.token) {\n      case this.tok.T_ISSET:\n        {\n          result = this.node(\"isset\");\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n          const variables = this.read_isset_variables();\n          if (this.expect(\")\")) {\n            this.next();\n          }\n          result = result(variables);\n        }\n        break;\n      case this.tok.T_EMPTY:\n        {\n          result = this.node(\"empty\");\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n          const expression = this.read_expr();\n          if (this.expect(\")\")) {\n            this.next();\n          }\n          result = result(expression);\n        }\n        break;\n      case this.tok.T_INCLUDE:\n        result = this.node(\"include\")(false, false, this.next().read_expr());\n        break;\n      case this.tok.T_INCLUDE_ONCE:\n        result = this.node(\"include\")(true, false, this.next().read_expr());\n        break;\n      case this.tok.T_EVAL:\n        {\n          result = this.node(\"eval\");\n          if (this.next().expect(\"(\")) {\n            this.next();\n          }\n          const expr = this.read_expr();\n          if (this.expect(\")\")) {\n            this.next();\n          }\n          result = result(expr);\n        }\n        break;\n      case this.tok.T_REQUIRE:\n        result = this.node(\"include\")(false, true, this.next().read_expr());\n        break;\n      case this.tok.T_REQUIRE_ONCE:\n        result = this.node(\"include\")(true, true, this.next().read_expr());\n        break;\n    }\n\n    return result;\n  },\n\n  /**\n   * Reads optional expression\n   */\n  read_optional_expr: function (stopToken) {\n    if (this.token !== stopToken) {\n      return this.read_expr();\n    }\n\n    return null;\n  },\n\n  /**\n   * Reads exit expression\n   */\n  read_exit_expr: function () {\n    let expression = null;\n\n    if (this.token === \"(\") {\n      this.next();\n      expression = this.read_optional_expr(\")\");\n      this.expect(\")\") && this.next();\n    }\n\n    return expression;\n  },\n\n  /**\n   * ```ebnf\n   * Reads an expression\n   *  expr ::= @todo\n   * ```\n   */\n  read_expr_item: function () {\n    let result, expr;\n    if (this.token === \"+\")\n      return this.node(\"unary\")(\"+\", this.next().read_expr());\n    if (this.token === \"-\")\n      return this.node(\"unary\")(\"-\", this.next().read_expr());\n    if (this.token === \"!\")\n      return this.node(\"unary\")(\"!\", this.next().read_expr());\n    if (this.token === \"~\")\n      return this.node(\"unary\")(\"~\", this.next().read_expr());\n\n    if (this.token === \"(\") {\n      expr = this.next().read_expr();\n      expr.parenthesizedExpression = true;\n      this.expect(\")\") && this.next();\n      return this.handleDereferencable(expr);\n    }\n\n    if (this.token === \"`\") {\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1048\n      return this.read_encapsed_string(\"`\");\n    }\n\n    if (this.token === this.tok.T_LIST) {\n      let assign = null;\n      const isInner = this.innerList;\n      result = this.node(\"list\");\n      if (!isInner) {\n        assign = this.node(\"assign\");\n      }\n      if (this.next().expect(\"(\")) {\n        this.next();\n      }\n\n      if (!this.innerList) this.innerList = true;\n\n      // reads inner items\n      const assignList = this.read_array_pair_list(false);\n      if (this.expect(\")\")) {\n        this.next();\n      }\n\n      // check if contains at least one assignment statement\n      let hasItem = false;\n      for (let i = 0; i < assignList.length; i++) {\n        if (assignList[i] !== null && assignList[i].kind !== \"noop\") {\n          hasItem = true;\n          break;\n        }\n      }\n      if (!hasItem) {\n        this.raiseError(\n          \"Fatal Error :  Cannot use empty list on line \" +\n            this.lexer.yylloc.first_line\n        );\n      }\n\n      // handles the node resolution\n      if (!isInner) {\n        this.innerList = false;\n        if (this.expect(\"=\")) {\n          return assign(\n            result(assignList, false),\n            this.next().read_expr(),\n            \"=\"\n          );\n        } else {\n          // error fallback : list($a, $b);\n          return result(assignList, false);\n        }\n      } else {\n        return result(assignList, false);\n      }\n    }\n\n    if (this.token === this.tok.T_CLONE)\n      return this.node(\"clone\")(this.next().read_expr());\n\n    switch (this.token) {\n      case this.tok.T_INC:\n        return this.node(\"pre\")(\"+\", this.next().read_variable(false, false));\n\n      case this.tok.T_DEC:\n        return this.node(\"pre\")(\"-\", this.next().read_variable(false, false));\n\n      case this.tok.T_NEW:\n        return this.read_new_expr();\n\n      case this.tok.T_ISSET:\n      case this.tok.T_EMPTY:\n      case this.tok.T_INCLUDE:\n      case this.tok.T_INCLUDE_ONCE:\n      case this.tok.T_EVAL:\n      case this.tok.T_REQUIRE:\n      case this.tok.T_REQUIRE_ONCE:\n        return this.read_internal_functions_in_yacc();\n      case this.tok.T_INT_CAST:\n        return this.read_expr_cast(\"int\");\n\n      case this.tok.T_DOUBLE_CAST:\n        return this.read_expr_cast(\"float\");\n\n      case this.tok.T_STRING_CAST:\n        return this.read_expr_cast(\n          this.text().indexOf(\"binary\") !== -1 ? \"binary\" : \"string\"\n        );\n\n      case this.tok.T_ARRAY_CAST:\n        return this.read_expr_cast(\"array\");\n\n      case this.tok.T_OBJECT_CAST:\n        return this.read_expr_cast(\"object\");\n\n      case this.tok.T_BOOL_CAST:\n        return this.read_expr_cast(\"bool\");\n\n      case this.tok.T_UNSET_CAST:\n        return this.read_expr_cast(\"unset\");\n\n      case this.tok.T_EXIT: {\n        const useDie = this.lexer.yytext.toLowerCase() === \"die\";\n        result = this.node(\"exit\");\n        this.next();\n        const expression = this.read_exit_expr();\n        return result(expression, useDie);\n      }\n\n      case this.tok.T_PRINT:\n        return this.node(\"print\")(this.next().read_expr());\n\n      // T_YIELD (expr (T_DOUBLE_ARROW expr)?)?\n      case this.tok.T_YIELD: {\n        let value = null;\n        let key = null;\n        result = this.node(\"yield\");\n        if (this.next().is(\"EXPR\")) {\n          // reads the yield return value\n          value = this.read_expr();\n          if (this.token === this.tok.T_DOUBLE_ARROW) {\n            // reads the yield returned key\n            key = value;\n            value = this.next().read_expr();\n          }\n        }\n        return result(value, key);\n      }\n\n      // T_YIELD_FROM expr\n      case this.tok.T_YIELD_FROM:\n        result = this.node(\"yieldfrom\");\n        expr = this.next().read_expr();\n        return result(expr);\n\n      case this.tok.T_FN:\n      case this.tok.T_FUNCTION:\n        return this.read_inline_function();\n\n      case this.tok.T_STATIC: {\n        const backup = [this.token, this.lexer.getState()];\n        this.next();\n        if (\n          this.token === this.tok.T_FUNCTION ||\n          (this.version >= 704 && this.token === this.tok.T_FN)\n        ) {\n          // handles static function\n          return this.read_inline_function([0, 1, 0]);\n        } else {\n          // rollback\n          this.lexer.tokens.push(backup);\n          this.next();\n        }\n      }\n    }\n\n    // SCALAR | VARIABLE\n    if (this.is(\"VARIABLE\")) {\n      result = this.node();\n      expr = this.read_variable(false, false);\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L877\n      // should accept only a variable\n      const isConst =\n        expr.kind === \"identifier\" ||\n        (expr.kind === \"staticlookup\" && expr.offset.kind === \"identifier\");\n\n      // VARIABLES SPECIFIC OPERATIONS\n      switch (this.token) {\n        case \"=\": {\n          if (isConst) this.error(\"VARIABLE\");\n          if (this.next().token == \"&\") {\n            return this.read_assignref(result, expr);\n          }\n          return result(\"assign\", expr, this.read_expr(), \"=\");\n        }\n\n        // operations :\n        case this.tok.T_PLUS_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"+=\");\n\n        case this.tok.T_MINUS_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"-=\");\n\n        case this.tok.T_MUL_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"*=\");\n\n        case this.tok.T_POW_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"**=\");\n\n        case this.tok.T_DIV_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"/=\");\n\n        case this.tok.T_CONCAT_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \".=\");\n\n        case this.tok.T_MOD_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"%=\");\n\n        case this.tok.T_AND_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"&=\");\n\n        case this.tok.T_OR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"|=\");\n\n        case this.tok.T_XOR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"^=\");\n\n        case this.tok.T_SL_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"<<=\");\n\n        case this.tok.T_SR_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \">>=\");\n\n        case this.tok.T_COALESCE_EQUAL:\n          if (isConst) this.error(\"VARIABLE\");\n          return result(\"assign\", expr, this.next().read_expr(), \"??=\");\n\n        case this.tok.T_INC:\n          if (isConst) this.error(\"VARIABLE\");\n          this.next();\n          return result(\"post\", \"+\", expr);\n        case this.tok.T_DEC:\n          if (isConst) this.error(\"VARIABLE\");\n          this.next();\n          return result(\"post\", \"-\", expr);\n        default:\n          // see #193\n          result.destroy(expr);\n      }\n    } else if (this.is(\"SCALAR\")) {\n      result = this.node();\n      expr = this.read_scalar();\n      if (expr.kind === \"array\" && expr.shortForm && this.token === \"=\") {\n        // list assign\n        const list = this.node(\"list\")(expr.items, true);\n        if (expr.loc) list.loc = expr.loc;\n        const right = this.next().read_expr();\n        return result(\"assign\", list, right, \"=\");\n      } else {\n        // see #189 - swap docs on nodes\n        result.destroy(expr);\n      }\n      // classic array\n      return this.handleDereferencable(expr);\n    } else {\n      this.error(\"EXPR\");\n      this.next();\n    }\n\n    // returns variable | scalar\n    return expr;\n  },\n\n  /**\n   * Reads assignment\n   * @param {*} left\n   */\n  read_assignref: function (result, left) {\n    this.next();\n    let right;\n    if (this.token === this.tok.T_NEW) {\n      if (this.version >= 700) {\n        this.error();\n      }\n      right = this.read_new_expr();\n    } else {\n      right = this.read_variable(false, false);\n    }\n\n    return result(\"assignref\", left, right);\n  },\n\n  /**\n   *\n   * inline_function:\n   * \t\tfunction returns_ref backup_doc_comment '(' parameter_list ')' lexical_vars return_type\n   * \t\tbackup_fn_flags '{' inner_statement_list '}' backup_fn_flags\n   * \t\t\t{ $$ = zend_ast_create_decl(ZEND_AST_CLOSURE, $2 | $13, $1, $3,\n   * \t\t\t\t  zend_string_init(\"{closure}\", sizeof(\"{closure}\") - 1, 0),\n   * \t\t\t\t  $5, $7, $11, $8); CG(extra_fn_flags) = $9; }\n   * \t|\tfn returns_ref '(' parameter_list ')' return_type backup_doc_comment T_DOUBLE_ARROW backup_fn_flags backup_lex_pos expr backup_fn_flags\n   * \t\t\t{ $$ = zend_ast_create_decl(ZEND_AST_ARROW_FUNC, $2 | $12, $1, $7,\n   * \t\t\t\t  zend_string_init(\"{closure}\", sizeof(\"{closure}\") - 1, 0), $4, NULL,\n   * \t\t\t\t  zend_ast_create(ZEND_AST_RETURN, $11), $6);\n   * \t\t\t\t  ((zend_ast_decl *) $$)->lex_pos = $10;\n   * \t\t\t\t  CG(extra_fn_flags) = $9; }   *\n   */\n  read_inline_function: function (flags) {\n    if (this.token === this.tok.T_FUNCTION) {\n      return this.read_function(true, flags);\n    }\n    // introduced in PHP 7.4\n    if (!this.version >= 704) {\n      this.raiseError(\"Arrow Functions are not allowed\");\n    }\n    // as an arrowfunc\n    const node = this.node(\"arrowfunc\");\n    // eat T_FN\n    if (this.expect(this.tok.T_FN)) this.next();\n    // check the &\n    const isRef = this.is_reference();\n    // ...\n    if (this.expect(\"(\")) this.next();\n    const params = this.read_parameter_list();\n    if (this.expect(\")\")) this.next();\n    let nullable = false;\n    let returnType = null;\n    if (this.token === \":\") {\n      if (this.next().token === \"?\") {\n        nullable = true;\n        this.next();\n      }\n      returnType = this.read_type();\n    }\n    if (this.expect(this.tok.T_DOUBLE_ARROW)) this.next();\n    const body = this.read_expr();\n    return node(\n      params,\n      isRef,\n      body,\n      returnType,\n      nullable,\n      flags ? true : false\n    );\n  },\n\n  /**\n   * ```ebnf\n   *    new_expr ::= T_NEW (namespace_name function_argument_list) | (T_CLASS ... class declaration)\n   * ```\n   * https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L850\n   */\n  read_new_expr: function () {\n    const result = this.node(\"new\");\n    this.expect(this.tok.T_NEW) && this.next();\n    let args = [];\n    if (this.token === this.tok.T_CLASS) {\n      const what = this.node(\"class\");\n      // Annonymous class declaration\n      if (this.next().token === \"(\") {\n        args = this.read_argument_list();\n      }\n      const propExtends = this.read_extends_from();\n      const propImplements = this.read_implements_list();\n      let body = null;\n      if (this.expect(\"{\")) {\n        body = this.next().read_class_body();\n      }\n      return result(\n        what(null, propExtends, propImplements, body, [0, 0, 0]),\n        args\n      );\n    }\n    // Already existing class\n    const name = this.read_new_class_name();\n    if (this.token === \"(\") {\n      args = this.read_argument_list();\n    }\n    return result(name, args);\n  },\n  /**\n   * Reads a class name\n   * ```ebnf\n   * read_new_class_name ::= namespace_name | variable\n   * ```\n   */\n  read_new_class_name: function () {\n    if (\n      this.token === this.tok.T_NS_SEPARATOR ||\n      this.token === this.tok.T_STRING ||\n      this.token === this.tok.T_NAMESPACE\n    ) {\n      let result = this.read_namespace_name(true);\n      if (this.token === this.tok.T_DOUBLE_COLON) {\n        result = this.read_static_getter(result);\n      }\n      return result;\n    } else if (this.is(\"VARIABLE\")) {\n      return this.read_variable(true, false);\n    } else {\n      this.expect([this.tok.T_STRING, \"VARIABLE\"]);\n    }\n  },\n  handleDereferencable: function (expr) {\n    while (this.token !== this.EOF) {\n      if (\n        this.token === this.tok.T_OBJECT_OPERATOR ||\n        this.token === this.tok.T_DOUBLE_COLON\n      ) {\n        expr = this.recursive_variable_chain_scan(expr, false, false, true);\n      } else if (this.token === this.tok.T_CURLY_OPEN || this.token === \"[\") {\n        expr = this.read_dereferencable(expr);\n      } else if (this.token === \"(\") {\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1118\n        expr = this.node(\"call\")(expr, this.read_argument_list());\n      } else {\n        return expr;\n      }\n    }\n    return expr;\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   * checks if current token is a reference keyword\n   */\n  is_reference: function () {\n    if (this.token == \"&\") {\n      this.next();\n      return true;\n    }\n    return false;\n  },\n  /**\n   * checks if current token is a variadic keyword\n   */\n  is_variadic: function () {\n    if (this.token === this.tok.T_ELLIPSIS) {\n      this.next();\n      return true;\n    }\n    return false;\n  },\n  /**\n   * reading a function\n   * ```ebnf\n   * function ::= function_declaration code_block\n   * ```\n   */\n  read_function: function (closure, flag) {\n    const result = this.read_function_declaration(\n      closure ? 1 : flag ? 2 : 0,\n      flag && flag[1] === 1\n    );\n    if (flag && flag[2] == 1) {\n      // abstract function :\n      result.parseFlags(flag);\n      if (this.expect(\";\")) {\n        this.next();\n      }\n    } else {\n      if (this.expect(\"{\")) {\n        result.body = this.read_code_block(false);\n        if (result.loc && result.body.loc) {\n          result.loc.end = result.body.loc.end;\n        }\n      }\n      if (!closure && flag) {\n        result.parseFlags(flag);\n      }\n    }\n    return result;\n  },\n  /**\n   * reads a function declaration (without his body)\n   * ```ebnf\n   * function_declaration ::= T_FUNCTION '&'?  T_STRING '(' parameter_list ')'\n   * ```\n   */\n  read_function_declaration: function (type, isStatic) {\n    let nodeName = \"function\";\n    if (type === 1) {\n      nodeName = \"closure\";\n    } else if (type === 2) {\n      nodeName = \"method\";\n    }\n    const result = this.node(nodeName);\n\n    if (this.expect(this.tok.T_FUNCTION)) {\n      this.next();\n    }\n    const isRef = this.is_reference();\n    let name = false,\n      use = [],\n      returnType = null,\n      nullable = false;\n    if (type !== 1) {\n      const nameNode = this.node(\"identifier\");\n      if (type === 2) {\n        if (this.version >= 700) {\n          if (this.token === this.tok.T_STRING || this.is(\"IDENTIFIER\")) {\n            name = this.text();\n            this.next();\n          } else if (this.version < 704) {\n            this.error(\"IDENTIFIER\");\n          }\n        } else if (this.token === this.tok.T_STRING) {\n          name = this.text();\n          this.next();\n        } else {\n          this.error(\"IDENTIFIER\");\n        }\n      } else {\n        if (this.version >= 700) {\n          if (this.token === this.tok.T_STRING) {\n            name = this.text();\n            this.next();\n          } else if (this.version >= 704) {\n            if (!this.expect(\"(\")) {\n              this.next();\n            }\n          } else {\n            this.error(this.tok.T_STRING);\n            this.next();\n          }\n        } else {\n          if (this.expect(this.tok.T_STRING)) {\n            name = this.text();\n          }\n          this.next();\n        }\n      }\n      name = nameNode(name);\n    }\n    if (this.expect(\"(\")) this.next();\n    const params = this.read_parameter_list();\n    if (this.expect(\")\")) this.next();\n    if (type === 1) {\n      use = this.read_lexical_vars();\n    }\n    if (this.token === \":\") {\n      if (this.next().token === \"?\") {\n        nullable = true;\n        this.next();\n      }\n      returnType = this.read_type();\n    }\n    if (type === 1) {\n      // closure\n      return result(params, isRef, use, returnType, nullable, isStatic);\n    }\n    return result(name, params, isRef, returnType, nullable);\n  },\n\n  read_lexical_vars: function () {\n    let result = [];\n\n    if (this.token === this.tok.T_USE) {\n      this.next();\n      this.expect(\"(\") && this.next();\n      result = this.read_lexical_var_list();\n      this.expect(\")\") && this.next();\n    }\n\n    return result;\n  },\n\n  read_lexical_var_list: function () {\n    return this.read_list(this.read_lexical_var, \",\");\n  },\n\n  /**\n   * ```ebnf\n   * lexical_var ::= '&'? T_VARIABLE\n   * ```\n   */\n  read_lexical_var: function () {\n    if (this.token === \"&\") {\n      return this.read_byref(this.read_lexical_var.bind(this));\n    }\n    const result = this.node(\"variable\");\n    this.expect(this.tok.T_VARIABLE);\n    const name = this.text().substring(1);\n    this.next();\n    return result(name, false);\n  },\n  /**\n   * reads a list of parameters\n   * ```ebnf\n   *  parameter_list ::= (parameter ',')* parameter?\n   * ```\n   */\n  read_parameter_list: function () {\n    const result = [];\n    if (this.token != \")\") {\n      while (this.token != this.EOF) {\n        result.push(this.read_parameter());\n        if (this.token == \",\") {\n          this.next();\n        } else if (this.token == \")\") {\n          break;\n        } else {\n          this.error([\",\", \")\"]);\n          break;\n        }\n      }\n    }\n    return result;\n  },\n  /**\n   * ```ebnf\n   *  parameter ::= type? '&'? T_ELLIPSIS? T_VARIABLE ('=' expr)?\n   * ```\n   * @see https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L640\n   */\n  read_parameter: function () {\n    const node = this.node(\"parameter\");\n    let parameterName = null;\n    let value = null;\n    let type = null;\n    let nullable = false;\n    if (this.token === \"?\") {\n      this.next();\n      nullable = true;\n    }\n    type = this.read_type();\n    if (nullable && !type) {\n      this.raiseError(\n        \"Expecting a type definition combined with nullable operator\"\n      );\n    }\n    const isRef = this.is_reference();\n    const isVariadic = this.is_variadic();\n    if (this.expect(this.tok.T_VARIABLE)) {\n      parameterName = this.node(\"identifier\");\n      const name = this.text().substring(1);\n      this.next();\n      parameterName = parameterName(name);\n    }\n    if (this.token == \"=\") {\n      value = this.next().read_expr();\n    }\n    return node(parameterName, type, value, isRef, isVariadic, nullable);\n  },\n  /**\n   * Reads a list of arguments\n   * ```ebnf\n   *  function_argument_list ::= '(' (argument_list (',' argument_list)*)? ')'\n   * ```\n   */\n  read_argument_list: function () {\n    let result = [];\n    this.expect(\"(\") && this.next();\n    if (this.token !== \")\") {\n      result = this.read_non_empty_argument_list();\n    }\n    this.expect(\")\") && this.next();\n    return result;\n  },\n  /**\n   * Reads non empty argument list\n   */\n  read_non_empty_argument_list: function () {\n    let wasVariadic = false;\n\n    return this.read_function_list(\n      function () {\n        const argument = this.read_argument();\n        if (argument) {\n          if (wasVariadic) {\n            this.raiseError(\"Unexpected argument after a variadic argument\");\n          }\n          if (argument.kind === \"variadic\") {\n            wasVariadic = true;\n          }\n        }\n        return argument;\n      }.bind(this),\n      \",\"\n    );\n  },\n  /**\n   * ```ebnf\n   *    argument_list ::= T_ELLIPSIS? expr\n   * ```\n   */\n  read_argument: function () {\n    if (this.token === this.tok.T_ELLIPSIS) {\n      return this.node(\"variadic\")(this.next().read_expr());\n    }\n    return this.read_expr();\n  },\n  /**\n   * read type hinting\n   * ```ebnf\n   *  type ::= T_ARRAY | T_CALLABLE | namespace_name\n   * ```\n   */\n  read_type: function () {\n    const result = this.node();\n    if (this.token === this.tok.T_ARRAY || this.token === this.tok.T_CALLABLE) {\n      const type = this.text();\n      this.next();\n      return result(\"typereference\", type.toLowerCase(), type);\n    } else if (this.token === this.tok.T_STRING) {\n      const type = this.text();\n      const backup = [this.token, this.lexer.getState()];\n      this.next();\n      if (\n        this.token !== this.tok.T_NS_SEPARATOR &&\n        this.ast.typereference.types.indexOf(type.toLowerCase()) > -1\n      ) {\n        return result(\"typereference\", type.toLowerCase(), type);\n      } else {\n        // rollback a classic namespace\n        this.lexer.tokens.push(backup);\n        this.next();\n        // fix : destroy not consumed node (release comments)\n        result.destroy();\n        return this.read_namespace_name();\n      }\n    } else if (\n      this.token === this.tok.T_NAMESPACE ||\n      this.token === this.tok.T_NS_SEPARATOR\n    ) {\n      // fix : destroy not consumed node (release comments)\n      result.destroy();\n      return this.read_namespace_name();\n    }\n    // fix : destroy not consumed node (release comments)\n    result.destroy();\n    return null;\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   * Reads an IF statement\n   *\n   * ```ebnf\n   *  if ::= T_IF '(' expr ')' ':' ...\n   * ```\n   */\n  read_if: function () {\n    const result = this.node(\"if\");\n    const test = this.next().read_if_expr();\n    let body = null;\n    let alternate = null;\n    let shortForm = false;\n\n    if (this.token === \":\") {\n      shortForm = true;\n      this.next();\n      body = this.node(\"block\");\n      const items = [];\n      while (this.token !== this.EOF && this.token !== this.tok.T_ENDIF) {\n        if (this.token === this.tok.T_ELSEIF) {\n          alternate = this.read_elseif_short();\n          break;\n        } else if (this.token === this.tok.T_ELSE) {\n          alternate = this.read_else_short();\n          break;\n        }\n        items.push(this.read_inner_statement());\n      }\n      body = body(null, items);\n      this.expect(this.tok.T_ENDIF) && this.next();\n      this.expectEndOfStatement();\n    } else {\n      body = this.read_statement();\n      if (this.token === this.tok.T_ELSEIF) {\n        alternate = this.read_if();\n      } else if (this.token === this.tok.T_ELSE) {\n        alternate = this.next().read_statement();\n      }\n    }\n    return result(test, body, alternate, shortForm);\n  },\n  /**\n   * reads an if expression : '(' expr ')'\n   */\n  read_if_expr: function () {\n    this.expect(\"(\") && this.next();\n    const result = this.read_expr();\n    this.expect(\")\") && this.next();\n    return result;\n  },\n  /**\n   * reads an elseif (expr): statements\n   */\n  read_elseif_short: function () {\n    let alternate = null;\n    const result = this.node(\"if\");\n    const test = this.next().read_if_expr();\n    if (this.expect(\":\")) this.next();\n    const body = this.node(\"block\");\n    const items = [];\n    while (this.token != this.EOF && this.token !== this.tok.T_ENDIF) {\n      if (this.token === this.tok.T_ELSEIF) {\n        alternate = this.read_elseif_short();\n        break;\n      } else if (this.token === this.tok.T_ELSE) {\n        alternate = this.read_else_short();\n        break;\n      }\n      items.push(this.read_inner_statement());\n    }\n    return result(test, body(null, items), alternate, true);\n  },\n  /**\n   *\n   */\n  read_else_short: function () {\n    if (this.next().expect(\":\")) this.next();\n    const body = this.node(\"block\");\n    const items = [];\n    while (this.token != this.EOF && this.token !== this.tok.T_ENDIF) {\n      items.push(this.read_inner_statement());\n    }\n    return body(null, items);\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   * Reads a while statement\n   * ```ebnf\n   * while ::= T_WHILE (statement | ':' inner_statement_list T_ENDWHILE ';')\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L587\n   * @return {While}\n   */\n  read_while: function () {\n    const result = this.node(\"while\");\n    this.expect(this.tok.T_WHILE) && this.next();\n    let test = null;\n    let body = null;\n    let shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    test = this.read_expr();\n    if (this.expect(\")\")) this.next();\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDWHILE);\n    } else {\n      body = this.read_statement();\n    }\n    return result(test, body, shortForm);\n  },\n  /**\n   * Reads a do / while loop\n   * ```ebnf\n   * do ::= T_DO statement T_WHILE '(' expr ')' ';'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L423\n   * @return {Do}\n   */\n  read_do: function () {\n    const result = this.node(\"do\");\n    this.expect(this.tok.T_DO) && this.next();\n    let test = null;\n    let body = null;\n    body = this.read_statement();\n    if (this.expect(this.tok.T_WHILE)) {\n      if (this.next().expect(\"(\")) this.next();\n      test = this.read_expr();\n      if (this.expect(\")\")) this.next();\n      if (this.expect(\";\")) this.next();\n    }\n    return result(test, body);\n  },\n  /**\n   * Read a for incremental loop\n   * ```ebnf\n   * for ::= T_FOR '(' for_exprs ';' for_exprs ';' for_exprs ')' for_statement\n   * for_statement ::= statement | ':' inner_statement_list T_ENDFOR ';'\n   * for_exprs ::= expr? (',' expr)*\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L425\n   * @return {For}\n   */\n  read_for: function () {\n    const result = this.node(\"for\");\n    this.expect(this.tok.T_FOR) && this.next();\n    let init = [];\n    let test = [];\n    let increment = [];\n    let body = null;\n    let shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    if (this.token !== \";\") {\n      init = this.read_list(this.read_expr, \",\");\n      if (this.expect(\";\")) this.next();\n    } else {\n      this.next();\n    }\n    if (this.token !== \";\") {\n      test = this.read_list(this.read_expr, \",\");\n      if (this.expect(\";\")) this.next();\n    } else {\n      this.next();\n    }\n    if (this.token !== \")\") {\n      increment = this.read_list(this.read_expr, \",\");\n      if (this.expect(\")\")) this.next();\n    } else {\n      this.next();\n    }\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDFOR);\n    } else {\n      body = this.read_statement();\n    }\n    return result(init, test, increment, body, shortForm);\n  },\n  /**\n   * Reads a foreach loop\n   * ```ebnf\n   * foreach ::= '(' expr T_AS foreach_variable (T_DOUBLE_ARROW foreach_variable)? ')' statement\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L438\n   * @return {Foreach}\n   */\n  read_foreach: function () {\n    const result = this.node(\"foreach\");\n    this.expect(this.tok.T_FOREACH) && this.next();\n    let source = null;\n    let key = null;\n    let value = null;\n    let body = null;\n    let shortForm = false;\n    if (this.expect(\"(\")) this.next();\n    source = this.read_expr();\n    if (this.expect(this.tok.T_AS)) {\n      this.next();\n      value = this.read_foreach_variable();\n      if (this.token === this.tok.T_DOUBLE_ARROW) {\n        key = value;\n        value = this.next().read_foreach_variable();\n      }\n    }\n\n    // grammatically correct but not supported by PHP\n    if (key && key.kind === \"list\") {\n      this.raiseError(\"Fatal Error : Cannot use list as key element\");\n    }\n\n    if (this.expect(\")\")) this.next();\n\n    if (this.token === \":\") {\n      shortForm = true;\n      body = this.read_short_form(this.tok.T_ENDFOREACH);\n    } else {\n      body = this.read_statement();\n    }\n    return result(source, key, value, body, shortForm);\n  },\n  /**\n   * Reads a foreach variable statement\n   * ```ebnf\n   * foreach_variable =\n   *    variable |\n   *    '&' variable |\n   *    T_LIST '(' assignment_list ')' |\n   *    '[' assignment_list ']'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L544\n   * @return {Expression}\n   */\n  read_foreach_variable: function () {\n    if (this.token === this.tok.T_LIST || this.token === \"[\") {\n      const isShort = this.token === \"[\";\n      const result = this.node(\"list\");\n      this.next();\n      if (!isShort && this.expect(\"(\")) this.next();\n      const assignList = this.read_array_pair_list(isShort);\n      if (this.expect(isShort ? \"]\" : \")\")) this.next();\n      return result(assignList, isShort);\n    } else {\n      return this.read_variable(false, false);\n    }\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   * ```ebnf\n   * start ::= (namespace | top_statement)*\n   * ```\n   */\n  read_start: function () {\n    if (this.token == this.tok.T_NAMESPACE) {\n      return this.read_namespace();\n    } else {\n      return this.read_top_statement();\n    }\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   * Reads a namespace declaration block\n   * ```ebnf\n   * namespace ::= T_NAMESPACE namespace_name? '{'\n   *    top_statements\n   * '}'\n   * | T_NAMESPACE namespace_name ';' top_statements\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.php\n   * @return {Namespace}\n   */\n  read_namespace: function () {\n    const result = this.node(\"namespace\");\n    let body;\n    this.expect(this.tok.T_NAMESPACE) && this.next();\n    let name;\n\n    if (this.token == \"{\") {\n      name = {\n        name: [\"\"],\n      };\n    } else {\n      name = this.read_namespace_name();\n    }\n    this.currentNamespace = name;\n\n    if (this.token == \";\") {\n      this.currentNamespace = name;\n      body = this.next().read_top_statements();\n      this.expect(this.EOF);\n      return result(name.name, body, false);\n    } else if (this.token == \"{\") {\n      this.currentNamespace = name;\n      body = this.next().read_top_statements();\n      this.expect(\"}\") && this.next();\n      if (\n        body.length === 0 &&\n        this.extractDoc &&\n        this._docs.length > this._docIndex\n      ) {\n        body.push(this.node(\"noop\")());\n      }\n      return result(name.name, body, true);\n    } else if (this.token === \"(\") {\n      // @fixme after merging #478\n      name.resolution = this.ast.reference.RELATIVE_NAME;\n      name.name = name.name.substring(1);\n      result.destroy();\n      return this.node(\"call\")(name, this.read_argument_list());\n    } else {\n      this.error([\"{\", \";\"]);\n      // graceful mode :\n      this.currentNamespace = name;\n      body = this.read_top_statements();\n      this.expect(this.EOF);\n      return result(name, body, false);\n    }\n  },\n  /**\n   * Reads a namespace name\n   * ```ebnf\n   *  namespace_name ::= T_NS_SEPARATOR? (T_STRING T_NS_SEPARATOR)* T_STRING\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.rules.php\n   * @return {Reference}\n   */\n  read_namespace_name: function (resolveReference) {\n    const result = this.node();\n    let relative = false;\n    if (this.token === this.tok.T_NAMESPACE) {\n      this.next().expect(this.tok.T_NS_SEPARATOR) && this.next();\n      relative = true;\n    }\n    const names = this.read_list(\n      this.tok.T_STRING,\n      this.tok.T_NS_SEPARATOR,\n      true\n    );\n    if (\n      !relative &&\n      names.length === 1 &&\n      (resolveReference || this.token !== \"(\")\n    ) {\n      if (names[0].toLowerCase() === \"parent\") {\n        return result(\"parentreference\", names[0]);\n      } else if (names[0].toLowerCase() === \"self\") {\n        return result(\"selfreference\", names[0]);\n      }\n    }\n    return result(\"name\", names, relative);\n  },\n  /**\n   * Reads a use statement\n   * ```ebnf\n   * use_statement ::= T_USE\n   *   use_type? use_declarations |\n   *   use_type use_statement '{' use_declarations '}' |\n   *   use_statement '{' use_declarations(=>typed) '}'\n   * ';'\n   * ```\n   * @see http://php.net/manual/en/language.namespaces.importing.php\n   * @return {UseGroup}\n   */\n  read_use_statement: function () {\n    let result = this.node(\"usegroup\");\n    let items = [];\n    let name = null;\n    this.expect(this.tok.T_USE) && this.next();\n    const type = this.read_use_type();\n    items.push(this.read_use_declaration(false));\n    if (this.token === \",\") {\n      items = items.concat(this.next().read_use_declarations(false));\n    } else if (this.token === \"{\") {\n      name = items[0].name;\n      items = this.next().read_use_declarations(type === null);\n      this.expect(\"}\") && this.next();\n    }\n    result = result(name, type, items);\n    this.expect(\";\") && this.next();\n    return result;\n  },\n  /**\n   *\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1045\n   */\n  read_class_name_reference: function () {\n    // resolved as the same\n    return this.read_variable(true, false);\n  },\n  /**\n   * Reads a use declaration\n   * ```ebnf\n   * use_declaration ::= use_type? namespace_name use_alias\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L380\n   * @return {UseItem}\n   */\n  read_use_declaration: function (typed) {\n    const result = this.node(\"useitem\");\n    let type = null;\n    if (typed) type = this.read_use_type();\n    const name = this.read_namespace_name();\n    const alias = this.read_use_alias();\n    return result(name.name, alias, type);\n  },\n  /**\n   * Reads a list of use declarations\n   * ```ebnf\n   * use_declarations ::= use_declaration (',' use_declaration)*\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L380\n   * @return {UseItem[]}\n   */\n  read_use_declarations: function (typed) {\n    const result = [this.read_use_declaration(typed)];\n    while (this.token === \",\") {\n      this.next();\n      if (typed) {\n        if (\n          this.token !== this.tok.T_FUNCTION &&\n          this.token !== this.tok.T_CONST &&\n          this.token !== this.tok.T_STRING\n        ) {\n          break;\n        }\n      } else if (\n        this.token !== this.tok.T_STRING &&\n        this.token !== this.tok.T_NS_SEPARATOR\n      ) {\n        break;\n      }\n      result.push(this.read_use_declaration(typed));\n    }\n    return result;\n  },\n  /**\n   * Reads a use statement\n   * ```ebnf\n   * use_alias ::= (T_AS T_STRING)?\n   * ```\n   * @return {String|null}\n   */\n  read_use_alias: function () {\n    let result = null;\n    if (this.token === this.tok.T_AS) {\n      if (this.next().expect(this.tok.T_STRING)) {\n        const aliasName = this.node(\"identifier\");\n        const name = this.text();\n        this.next();\n        result = aliasName(name);\n      }\n    }\n    return result;\n  },\n  /**\n   * Reads the namespace type declaration\n   * ```ebnf\n   * use_type ::= (T_FUNCTION | T_CONST)?\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L335\n   * @return {String|null} Possible values : function, const\n   */\n  read_use_type: function () {\n    if (this.token === this.tok.T_FUNCTION) {\n      this.next();\n      return this.ast.useitem.TYPE_FUNCTION;\n    } else if (this.token === this.tok.T_CONST) {\n      this.next();\n      return this.ast.useitem.TYPE_CONST;\n    }\n    return null;\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst specialChar = {\n  \"\\\\\": \"\\\\\",\n  $: \"$\",\n  n: \"\\n\",\n  r: \"\\r\",\n  t: \"\\t\",\n  f: String.fromCharCode(12),\n  v: String.fromCharCode(11),\n  e: String.fromCharCode(27),\n};\n\nmodule.exports = {\n  /**\n   * Unescape special chars\n   */\n  resolve_special_chars: function (text, doubleQuote) {\n    if (!doubleQuote) {\n      // single quote fix\n      return text.replace(/\\\\\\\\/g, \"\\\\\").replace(/\\\\'/g, \"'\");\n    }\n    return text\n      .replace(/\\\\\"/, '\"')\n      .replace(\n        /\\\\([\\\\$nrtfve]|[xX][0-9a-fA-F]{1,2}|[0-7]{1,3}|u{([0-9a-fA-F]+)})/g,\n        ($match, p1, p2) => {\n          if (specialChar[p1]) {\n            return specialChar[p1];\n          } else if (\"x\" === p1[0] || \"X\" === p1[0]) {\n            return String.fromCodePoint(parseInt(p1.substr(1), 16));\n          } else if (\"u\" === p1[0]) {\n            return String.fromCodePoint(parseInt(p2, 16));\n          } else {\n            return String.fromCodePoint(parseInt(p1, 8));\n          }\n        }\n      );\n  },\n\n  /**\n   * Remove all leading spaces each line for heredoc text if there is a indentation\n   * @param {string} text\n   * @param {number} indentation\n   * @param {boolean} indentation_uses_spaces\n   * @param {boolean} first_encaps_node if it is behind a variable, the first N spaces should not be removed\n   */\n  remove_heredoc_leading_whitespace_chars: function (\n    text,\n    indentation,\n    indentation_uses_spaces,\n    first_encaps_node\n  ) {\n    if (indentation === 0) {\n      return text;\n    }\n\n    this.check_heredoc_indentation_level(\n      text,\n      indentation,\n      indentation_uses_spaces,\n      first_encaps_node\n    );\n\n    const matchedChar = indentation_uses_spaces ? \" \" : \"\\t\";\n    const removementRegExp = new RegExp(\n      `\\\\n${matchedChar}{${indentation}}`,\n      \"g\"\n    );\n    const removementFirstEncapsNodeRegExp = new RegExp(\n      `^${matchedChar}{${indentation}}`\n    );\n\n    // Rough replace, need more check\n    if (first_encaps_node) {\n      // Remove text leading whitespace\n      text = text.replace(removementFirstEncapsNodeRegExp, \"\");\n    }\n\n    // Remove leading whitespace after \\n\n    return text.replace(removementRegExp, \"\\n\");\n  },\n\n  /**\n   * Check indentation level of heredoc in text, if mismatch, raiseError\n   * @param {string} text\n   * @param {number} indentation\n   * @param {boolean} indentation_uses_spaces\n   * @param {boolean} first_encaps_node if it is behind a variable, the first N spaces should not be removed\n   */\n  check_heredoc_indentation_level: function (\n    text,\n    indentation,\n    indentation_uses_spaces,\n    first_encaps_node\n  ) {\n    const textSize = text.length;\n    let offset = 0;\n    let leadingWhitespaceCharCount = 0;\n    /**\n     * @var inCoutingState {boolean} reset to true after a new line\n     */\n    let inCoutingState = true;\n    const chToCheck = indentation_uses_spaces ? \" \" : \"\\t\";\n    let inCheckState = false;\n    if (!first_encaps_node) {\n      // start from first \\n\n      offset = text.indexOf(\"\\n\");\n      // if no \\n, just return\n      if (offset === -1) {\n        return;\n      }\n      offset++;\n    }\n    while (offset < textSize) {\n      if (inCoutingState) {\n        if (text[offset] === chToCheck) {\n          leadingWhitespaceCharCount++;\n        } else {\n          inCheckState = true;\n        }\n      } else {\n        inCoutingState = false;\n      }\n\n      if (\n        text[offset] !== \"\\n\" &&\n        inCheckState &&\n        leadingWhitespaceCharCount < indentation\n      ) {\n        this.raiseError(\n          `Invalid body indentation level (expecting an indentation at least ${indentation})`\n        );\n      } else {\n        inCheckState = false;\n      }\n\n      if (text[offset] === \"\\n\") {\n        // Reset counting state\n        inCoutingState = true;\n        leadingWhitespaceCharCount = 0;\n      }\n      offset++;\n    }\n  },\n\n  /**\n   * Reads dereferencable scalar\n   */\n  read_dereferencable_scalar: function () {\n    let result = null;\n\n    switch (this.token) {\n      case this.tok.T_CONSTANT_ENCAPSED_STRING:\n        {\n          let value = this.node(\"string\");\n          const text = this.text();\n          let offset = 0;\n          if (text[0] === \"b\" || text[0] === \"B\") {\n            offset = 1;\n          }\n          const isDoubleQuote = text[offset] === '\"';\n          this.next();\n          const textValue = this.resolve_special_chars(\n            text.substring(offset + 1, text.length - 1),\n            isDoubleQuote\n          );\n          value = value(\n            isDoubleQuote,\n            textValue,\n            offset === 1, // unicode flag\n            text\n          );\n          if (this.token === this.tok.T_DOUBLE_COLON) {\n            // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1151\n            result = this.read_static_getter(value);\n          } else {\n            // dirrect string\n            result = value;\n          }\n        }\n        break;\n      case this.tok.T_ARRAY: // array parser\n        result = this.read_array();\n        break;\n      case \"[\": // short array format\n        result = this.read_array();\n        break;\n    }\n\n    return result;\n  },\n\n  /**\n   * ```ebnf\n   *  scalar ::= T_MAGIC_CONST\n   *       | T_LNUMBER | T_DNUMBER\n   *       | T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE? T_END_HEREDOC\n   *       | '\"' encaps_list '\"'\n   *       | T_START_HEREDOC encaps_list T_END_HEREDOC\n   *       | namespace_name (T_DOUBLE_COLON T_STRING)?\n   * ```\n   */\n  read_scalar: function () {\n    if (this.is(\"T_MAGIC_CONST\")) {\n      return this.get_magic_constant();\n    } else {\n      let value, node;\n      switch (this.token) {\n        // NUMERIC\n        case this.tok.T_LNUMBER: // long\n        case this.tok.T_DNUMBER: {\n          // double\n          const result = this.node(\"number\");\n          value = this.text();\n          this.next();\n          return result(value, null);\n        }\n        case this.tok.T_START_HEREDOC:\n          if (this.lexer.curCondition === \"ST_NOWDOC\") {\n            const start = this.lexer.yylloc.first_offset;\n            node = this.node(\"nowdoc\");\n            value = this.next().text();\n            // strip the last line return char\n            if (this.lexer.heredoc_label.indentation > 0) {\n              value = value.substring(\n                0,\n                value.length - this.lexer.heredoc_label.indentation\n              );\n            }\n            const lastCh = value[value.length - 1];\n            if (lastCh === \"\\n\") {\n              if (value[value.length - 2] === \"\\r\") {\n                // windows style\n                value = value.substring(0, value.length - 2);\n              } else {\n                // linux style\n                value = value.substring(0, value.length - 1);\n              }\n            } else if (lastCh === \"\\r\") {\n              // mac style\n              value = value.substring(0, value.length - 1);\n            }\n            this.expect(this.tok.T_ENCAPSED_AND_WHITESPACE) && this.next();\n            this.expect(this.tok.T_END_HEREDOC) && this.next();\n            const raw = this.lexer._input.substring(\n              start,\n              this.lexer.yylloc.first_offset\n            );\n            node = node(\n              this.remove_heredoc_leading_whitespace_chars(\n                value,\n                this.lexer.heredoc_label.indentation,\n                this.lexer.heredoc_label.indentation_uses_spaces,\n                this.lexer.heredoc_label.first_encaps_node\n              ),\n              raw,\n              this.lexer.heredoc_label.label\n            );\n            return node;\n          } else {\n            return this.read_encapsed_string(this.tok.T_END_HEREDOC);\n          }\n\n        case '\"':\n          return this.read_encapsed_string('\"');\n\n        case 'b\"':\n        case 'B\"': {\n          return this.read_encapsed_string('\"', true);\n        }\n\n        // TEXTS\n        case this.tok.T_CONSTANT_ENCAPSED_STRING:\n        case this.tok.T_ARRAY: // array parser\n        case \"[\": // short array format\n          return this.read_dereferencable_scalar();\n        default: {\n          const err = this.error(\"SCALAR\");\n          // graceful mode : ignore token & return error node\n          this.next();\n          return err;\n        }\n      }\n    }\n  },\n  /**\n   * Handles the dereferencing\n   */\n  read_dereferencable: function (expr) {\n    let result, offset;\n    const node = this.node(\"offsetlookup\");\n    if (this.token === \"[\") {\n      offset = this.next().read_expr();\n      if (this.expect(\"]\")) this.next();\n      result = node(expr, offset);\n    } else if (this.token === this.tok.T_DOLLAR_OPEN_CURLY_BRACES) {\n      offset = this.read_encapsed_string_item(false);\n      result = node(expr, offset);\n    }\n    return result;\n  },\n  /**\n   * Reads and extracts an encapsed item\n   * ```ebnf\n   * encapsed_string_item ::= T_ENCAPSED_AND_WHITESPACE\n   *  | T_DOLLAR_OPEN_CURLY_BRACES expr '}'\n   *  | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '}'\n   *  | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}'\n   *  | T_CURLY_OPEN variable '}'\n   *  | variable\n   *  | variable '[' expr ']'\n   *  | variable T_OBJECT_OPERATOR T_STRING\n   * ```\n   * @return {String|Variable|Expr|Lookup}\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1219\n   */\n  read_encapsed_string_item: function (isDoubleQuote) {\n    const encapsedPart = this.node(\"encapsedpart\");\n    let syntax = null;\n    let curly = false;\n    let result = this.node(),\n      offset,\n      node,\n      name;\n\n    // plain text\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1222\n    if (this.token === this.tok.T_ENCAPSED_AND_WHITESPACE) {\n      const text = this.text();\n      this.next();\n\n      // if this.lexer.heredoc_label.first_encaps_node -> remove first indents\n      result = result(\n        \"string\",\n        false,\n        this.version >= 703 && !this.lexer.heredoc_label.finished\n          ? this.remove_heredoc_leading_whitespace_chars(\n              this.resolve_special_chars(text, isDoubleQuote),\n              this.lexer.heredoc_label.indentation,\n              this.lexer.heredoc_label.indentation_uses_spaces,\n              this.lexer.heredoc_label.first_encaps_node\n            )\n          : text,\n        false,\n        text\n      );\n    } else if (this.token === this.tok.T_DOLLAR_OPEN_CURLY_BRACES) {\n      syntax = \"simple\";\n      curly = true;\n      // dynamic variable name\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1239\n      name = null;\n      if (this.next().token === this.tok.T_STRING_VARNAME) {\n        name = this.node(\"variable\");\n        const varName = this.text();\n        this.next();\n        // check if lookup an offset\n        // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1243\n        if (this.token === \"[\") {\n          name = name(varName, false);\n          node = this.node(\"offsetlookup\");\n          offset = this.next().read_expr();\n          this.expect(\"]\") && this.next();\n          result = node(name, offset);\n        } else {\n          result = name(varName, false);\n        }\n      } else {\n        result = result(\"variable\", this.read_expr(), false);\n      }\n      this.expect(\"}\") && this.next();\n    } else if (this.token === this.tok.T_CURLY_OPEN) {\n      // expression\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1246\n      syntax = \"complex\";\n      result.destroy();\n      result = this.next().read_variable(false, false);\n      this.expect(\"}\") && this.next();\n    } else if (this.token === this.tok.T_VARIABLE) {\n      syntax = \"simple\";\n      // plain variable\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1231\n      result.destroy();\n      result = this.read_simple_variable();\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1233\n      if (this.token === \"[\") {\n        node = this.node(\"offsetlookup\");\n        offset = this.next().read_encaps_var_offset();\n        this.expect(\"]\") && this.next();\n        result = node(result, offset);\n      }\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L1236\n      if (this.token === this.tok.T_OBJECT_OPERATOR) {\n        node = this.node(\"propertylookup\");\n        this.next().expect(this.tok.T_STRING);\n        const what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        result = node(result, what(name));\n      }\n\n      // error / fallback\n    } else {\n      this.expect(this.tok.T_ENCAPSED_AND_WHITESPACE);\n      const value = this.text();\n      this.next();\n      // consider it as string\n      result.destroy();\n      result = result(\"string\", false, value, false, value);\n    }\n\n    // reset first_encaps_node to false after access any node\n    this.lexer.heredoc_label.first_encaps_node = false;\n    return encapsedPart(result, syntax, curly);\n  },\n  /**\n   * Reads an encapsed string\n   */\n  read_encapsed_string: function (expect, isBinary = false) {\n    const labelStart = this.lexer.yylloc.first_offset;\n    let node = this.node(\"encapsed\");\n    this.next();\n    const start = this.lexer.yylloc.prev_offset - (isBinary ? 1 : 0);\n    const value = [];\n    let type = null;\n\n    if (expect === \"`\") {\n      type = this.ast.encapsed.TYPE_SHELL;\n    } else if (expect === '\"') {\n      type = this.ast.encapsed.TYPE_STRING;\n    } else {\n      type = this.ast.encapsed.TYPE_HEREDOC;\n    }\n\n    // reading encapsed parts\n    while (this.token !== expect && this.token !== this.EOF) {\n      value.push(this.read_encapsed_string_item(true));\n    }\n    if (\n      value.length > 0 &&\n      value[value.length - 1].kind === \"encapsedpart\" &&\n      value[value.length - 1].expression.kind === \"string\"\n    ) {\n      const node = value[value.length - 1].expression;\n      const lastCh = node.value[node.value.length - 1];\n      if (lastCh === \"\\n\") {\n        if (node.value[node.value.length - 2] === \"\\r\") {\n          // windows style\n          node.value = node.value.substring(0, node.value.length - 2);\n        } else {\n          // linux style\n          node.value = node.value.substring(0, node.value.length - 1);\n        }\n      } else if (lastCh === \"\\r\") {\n        // mac style\n        node.value = node.value.substring(0, node.value.length - 1);\n      }\n    }\n    this.expect(expect) && this.next();\n    const raw = this.lexer._input.substring(\n      type === \"heredoc\" ? labelStart : start - 1,\n      this.lexer.yylloc.first_offset\n    );\n    node = node(value, raw, type);\n\n    if (expect === this.tok.T_END_HEREDOC) {\n      node.label = this.lexer.heredoc_label.label;\n      this.lexer.heredoc_label.finished = true;\n    }\n    return node;\n  },\n  /**\n   * Constant token\n   */\n  get_magic_constant: function () {\n    const result = this.node(\"magic\");\n    const name = this.text();\n    this.next();\n    return result(name.toUpperCase(), name);\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   * reading a list of top statements (helper for top_statement*)\n   * ```ebnf\n   *  top_statements ::= top_statement*\n   * ```\n   */\n  read_top_statements: function () {\n    let result = [];\n    while (this.token !== this.EOF && this.token !== \"}\") {\n      const statement = this.read_top_statement();\n      if (statement) {\n        if (Array.isArray(statement)) {\n          result = result.concat(statement);\n        } else {\n          result.push(statement);\n        }\n      }\n    }\n    return result;\n  },\n  /**\n   * reading a top statement\n   * ```ebnf\n   *  top_statement ::=\n   *       namespace | function | class\n   *       | interface | trait\n   *       | use_statements | const_list\n   *       | statement\n   * ```\n   */\n  read_top_statement: function () {\n    switch (this.token) {\n      case this.tok.T_FUNCTION:\n        return this.read_function(false, false);\n      // optional flags\n      case this.tok.T_ABSTRACT:\n      case this.tok.T_FINAL:\n      case this.tok.T_CLASS:\n        return this.read_class_declaration_statement();\n      case this.tok.T_INTERFACE:\n        return this.read_interface_declaration_statement();\n      case this.tok.T_TRAIT:\n        return this.read_trait_declaration_statement();\n      case this.tok.T_USE:\n        return this.read_use_statement();\n      case this.tok.T_CONST: {\n        const result = this.node(\"constantstatement\");\n        const items = this.next().read_const_list();\n        this.expectEndOfStatement();\n        return result(null, items);\n      }\n      case this.tok.T_NAMESPACE:\n        return this.read_namespace();\n      case this.tok.T_HALT_COMPILER: {\n        const result = this.node(\"halt\");\n        if (this.next().expect(\"(\")) this.next();\n        if (this.expect(\")\")) this.next();\n        this.expect(\";\");\n        this.lexer.done = true;\n        return result(this.lexer._input.substring(this.lexer.offset));\n      }\n      default:\n        return this.read_statement();\n    }\n  },\n  /**\n   * reads a list of simple inner statements (helper for inner_statement*)\n   * ```ebnf\n   *  inner_statements ::= inner_statement*\n   * ```\n   */\n  read_inner_statements: function () {\n    let result = [];\n    while (this.token != this.EOF && this.token !== \"}\") {\n      const statement = this.read_inner_statement();\n      if (statement) {\n        if (Array.isArray(statement)) {\n          result = result.concat(statement);\n        } else {\n          result.push(statement);\n        }\n      }\n    }\n    return result;\n  },\n  /**\n   * Reads a list of constants declaration\n   * ```ebnf\n   *   const_list ::= T_CONST T_STRING '=' expr (',' T_STRING '=' expr)* ';'\n   * ```\n   */\n  read_const_list: function () {\n    return this.read_list(\n      function () {\n        this.expect(this.tok.T_STRING);\n        const result = this.node(\"constant\");\n        let constName = this.node(\"identifier\");\n        const name = this.text();\n        this.next();\n        constName = constName(name);\n        if (this.expect(\"=\")) {\n          return result(constName, this.next().read_expr());\n        } else {\n          // fallback\n          return result(constName, null);\n        }\n      },\n      \",\",\n      false\n    );\n  },\n  /**\n   * Reads a list of constants declaration\n   * ```ebnf\n   *   declare_list ::= IDENTIFIER '=' expr (',' IDENTIFIER '=' expr)*\n   * ```\n   * @retrurn {Array}\n   */\n  read_declare_list: function () {\n    const result = [];\n    while (this.token != this.EOF && this.token !== \")\") {\n      this.expect(this.tok.T_STRING);\n      const directive = this.node(\"declaredirective\");\n      let key = this.node(\"identifier\");\n      const name = this.text();\n      this.next();\n      key = key(name);\n      let value = null;\n      if (this.expect(\"=\")) {\n        value = this.next().read_expr();\n      }\n      result.push(directive(key, value));\n      if (this.token !== \",\") break;\n      this.next();\n    }\n    return result;\n  },\n  /**\n   * reads a simple inner statement\n   * ```ebnf\n   *  inner_statement ::= '{' inner_statements '}' | token\n   * ```\n   */\n  read_inner_statement: function () {\n    switch (this.token) {\n      case this.tok.T_FUNCTION:\n        return this.read_function(false, false);\n      // optional flags\n      case this.tok.T_ABSTRACT:\n      case this.tok.T_FINAL:\n      case this.tok.T_CLASS:\n        return this.read_class_declaration_statement();\n      case this.tok.T_INTERFACE:\n        return this.read_interface_declaration_statement();\n      case this.tok.T_TRAIT:\n        return this.read_trait_declaration_statement();\n      case this.tok.T_HALT_COMPILER: {\n        this.raiseError(\n          \"__HALT_COMPILER() can only be used from the outermost scope\"\n        );\n        // fallback : returns a node but does not stop the parsing\n        let node = this.node(\"halt\");\n        this.next().expect(\"(\") && this.next();\n        this.expect(\")\") && this.next();\n        node = node(this.lexer._input.substring(this.lexer.offset));\n        this.expect(\";\") && this.next();\n        return node;\n      }\n      default:\n        return this.read_statement();\n    }\n  },\n  /**\n   * Reads statements\n   */\n  read_statement: function () {\n    switch (this.token) {\n      case \"{\":\n        return this.read_code_block(false);\n\n      case this.tok.T_IF:\n        return this.read_if();\n\n      case this.tok.T_SWITCH:\n        return this.read_switch();\n\n      case this.tok.T_FOR:\n        return this.read_for();\n\n      case this.tok.T_FOREACH:\n        return this.read_foreach();\n\n      case this.tok.T_WHILE:\n        return this.read_while();\n\n      case this.tok.T_DO:\n        return this.read_do();\n\n      case this.tok.T_COMMENT:\n        return this.read_comment();\n\n      case this.tok.T_DOC_COMMENT:\n        return this.read_doc_comment();\n\n      case this.tok.T_RETURN: {\n        const result = this.node(\"return\");\n        this.next();\n        const expr = this.read_optional_expr(\";\");\n        this.expectEndOfStatement();\n        return result(expr);\n      }\n\n      // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L429\n      case this.tok.T_BREAK:\n      case this.tok.T_CONTINUE: {\n        const result = this.node(\n          this.token === this.tok.T_CONTINUE ? \"continue\" : \"break\"\n        );\n        this.next();\n        const level = this.read_optional_expr(\";\");\n        this.expectEndOfStatement();\n        return result(level);\n      }\n\n      case this.tok.T_GLOBAL: {\n        const result = this.node(\"global\");\n        const items = this.next().read_list(this.read_simple_variable, \",\");\n        this.expectEndOfStatement();\n        return result(items);\n      }\n\n      case this.tok.T_STATIC: {\n        const current = [this.token, this.lexer.getState()];\n        const result = this.node();\n        if (this.next().token === this.tok.T_DOUBLE_COLON) {\n          // static keyword for a class\n          this.lexer.tokens.push(current);\n          const expr = this.next().read_expr();\n          this.expectEndOfStatement(expr);\n          return result(\"expressionstatement\", expr);\n        }\n        if (this.token === this.tok.T_FUNCTION) {\n          return this.read_function(true, [0, 1, 0]);\n        }\n        const items = this.read_variable_declarations();\n        this.expectEndOfStatement();\n        return result(\"static\", items);\n      }\n\n      case this.tok.T_ECHO: {\n        const result = this.node(\"echo\");\n        const text = this.text();\n        const shortForm = text === \"<?=\" || text === \"<%=\";\n        const expressions = this.next().read_function_list(this.read_expr, \",\");\n        this.expectEndOfStatement();\n        return result(expressions, shortForm);\n      }\n\n      case this.tok.T_INLINE_HTML: {\n        const value = this.text();\n        let prevChar =\n          this.lexer.yylloc.first_offset > 0\n            ? this.lexer._input[this.lexer.yylloc.first_offset - 1]\n            : null;\n        const fixFirstLine = prevChar === \"\\r\" || prevChar === \"\\n\";\n        // revert back the first stripped line\n        if (fixFirstLine) {\n          if (\n            prevChar === \"\\n\" &&\n            this.lexer.yylloc.first_offset > 1 &&\n            this.lexer._input[this.lexer.yylloc.first_offset - 2] === \"\\r\"\n          ) {\n            prevChar = \"\\r\\n\";\n          }\n        }\n        const result = this.node(\"inline\");\n        this.next();\n        return result(value, fixFirstLine ? prevChar + value : value);\n      }\n\n      case this.tok.T_UNSET: {\n        const result = this.node(\"unset\");\n        this.next().expect(\"(\") && this.next();\n        const variables = this.read_function_list(this.read_variable, \",\");\n        this.expect(\")\") && this.next();\n        this.expect(\";\") && this.next();\n        return result(variables);\n      }\n\n      case this.tok.T_DECLARE: {\n        const result = this.node(\"declare\");\n        const body = [];\n        let mode;\n        this.next().expect(\"(\") && this.next();\n        const directives = this.read_declare_list();\n        this.expect(\")\") && this.next();\n        if (this.token === \":\") {\n          this.next();\n          while (\n            this.token != this.EOF &&\n            this.token !== this.tok.T_ENDDECLARE\n          ) {\n            // @todo : check declare_statement from php / not valid\n            body.push(this.read_top_statement());\n          }\n          if (\n            body.length === 0 &&\n            this.extractDoc &&\n            this._docs.length > this._docIndex\n          ) {\n            body.push(this.node(\"noop\")());\n          }\n          this.expect(this.tok.T_ENDDECLARE) && this.next();\n          this.expectEndOfStatement();\n          mode = this.ast.declare.MODE_SHORT;\n        } else if (this.token === \"{\") {\n          this.next();\n          while (this.token != this.EOF && this.token !== \"}\") {\n            // @todo : check declare_statement from php / not valid\n            body.push(this.read_top_statement());\n          }\n          if (\n            body.length === 0 &&\n            this.extractDoc &&\n            this._docs.length > this._docIndex\n          ) {\n            body.push(this.node(\"noop\")());\n          }\n          this.expect(\"}\") && this.next();\n          mode = this.ast.declare.MODE_BLOCK;\n        } else {\n          this.expect(\";\") && this.next();\n          mode = this.ast.declare.MODE_NONE;\n        }\n        return result(directives, body, mode);\n      }\n\n      case this.tok.T_TRY:\n        return this.read_try();\n\n      case this.tok.T_THROW: {\n        const result = this.node(\"throw\");\n        const expr = this.next().read_expr();\n        this.expectEndOfStatement();\n        return result(expr);\n      }\n\n      // ignore this (extra ponctuation)\n      case \";\": {\n        this.next();\n        return null;\n      }\n\n      case this.tok.T_STRING: {\n        const result = this.node();\n        const current = [this.token, this.lexer.getState()];\n        const labelNameText = this.text();\n        let labelName = this.node(\"identifier\");\n        // AST : https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L457\n        if (this.next().token === \":\") {\n          labelName = labelName(labelNameText);\n          this.next();\n          return result(\"label\", labelName);\n        } else {\n          labelName.destroy();\n        }\n\n        // default fallback expr / T_STRING '::' (etc...)\n        result.destroy();\n        this.lexer.tokens.push(current);\n        const statement = this.node(\"expressionstatement\");\n        const expr = this.next().read_expr();\n        this.expectEndOfStatement(expr);\n        return statement(expr);\n      }\n\n      case this.tok.T_GOTO: {\n        const result = this.node(\"goto\");\n        let labelName = null;\n        if (this.next().expect(this.tok.T_STRING)) {\n          labelName = this.node(\"identifier\");\n          const name = this.text();\n          this.next();\n          labelName = labelName(name);\n          this.expectEndOfStatement();\n        }\n        return result(labelName);\n      }\n\n      default: {\n        // default fallback expr\n        const statement = this.node(\"expressionstatement\");\n        const expr = this.read_expr();\n        this.expectEndOfStatement(expr);\n        return statement(expr);\n      }\n    }\n  },\n  /**\n   * ```ebnf\n   *  code_block ::= '{' (inner_statements | top_statements) '}'\n   * ```\n   */\n  read_code_block: function (top) {\n    const result = this.node(\"block\");\n    this.expect(\"{\") && this.next();\n    const body = top\n      ? this.read_top_statements()\n      : this.read_inner_statements();\n    if (\n      body.length === 0 &&\n      this.extractDoc &&\n      this._docs.length > this._docIndex\n    ) {\n      body.push(this.node(\"noop\")());\n    }\n    this.expect(\"}\") && this.next();\n    return result(null, body);\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   * Reads a switch statement\n   * ```ebnf\n   *  switch ::= T_SWITCH '(' expr ')' switch_case_list\n   * ```\n   * @return {Switch}\n   * @see http://php.net/manual/en/control-structures.switch.php\n   */\n  read_switch: function () {\n    const result = this.node(\"switch\");\n    this.expect(this.tok.T_SWITCH) && this.next();\n    this.expect(\"(\") && this.next();\n    const test = this.read_expr();\n    this.expect(\")\") && this.next();\n    const shortForm = this.token === \":\";\n    const body = this.read_switch_case_list();\n    return result(test, body, shortForm);\n  },\n  /**\n   * ```ebnf\n   *  switch_case_list ::= '{' ';'? case_list* '}' | ':' ';'? case_list* T_ENDSWITCH ';'\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L566\n   */\n  read_switch_case_list: function () {\n    // DETECT SWITCH MODE\n    let expect = null;\n    const result = this.node(\"block\");\n    const items = [];\n    if (this.token === \"{\") {\n      expect = \"}\";\n    } else if (this.token === \":\") {\n      expect = this.tok.T_ENDSWITCH;\n    } else {\n      this.expect([\"{\", \":\"]);\n    }\n    this.next();\n    // OPTIONNAL ';'\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L570\n    if (this.token === \";\") {\n      this.next();\n    }\n    // EXTRACTING CASES\n    while (this.token !== this.EOF && this.token !== expect) {\n      items.push(this.read_case_list(expect));\n    }\n    if (\n      items.length === 0 &&\n      this.extractDoc &&\n      this._docs.length > this._docIndex\n    ) {\n      items.push(this.node(\"noop\")());\n    }\n    // CHECK END TOKEN\n    this.expect(expect) && this.next();\n    if (expect === this.tok.T_ENDSWITCH) {\n      this.expectEndOfStatement();\n    }\n    return result(null, items);\n  },\n  /**\n   * ```ebnf\n   *   case_list ::= ((T_CASE expr) | T_DEFAULT) (':' | ';') inner_statement*\n   * ```\n   */\n  read_case_list: function (stopToken) {\n    const result = this.node(\"case\");\n    let test = null;\n    if (this.token === this.tok.T_CASE) {\n      test = this.next().read_expr();\n    } else if (this.token === this.tok.T_DEFAULT) {\n      // the default entry - no condition\n      this.next();\n    } else {\n      this.expect([this.tok.T_CASE, this.tok.T_DEFAULT]);\n    }\n    // case_separator\n    this.expect([\":\", \";\"]) && this.next();\n    const body = this.node(\"block\");\n    const items = [];\n    while (\n      this.token !== this.EOF &&\n      this.token !== stopToken &&\n      this.token !== this.tok.T_CASE &&\n      this.token !== this.tok.T_DEFAULT\n    ) {\n      items.push(this.read_inner_statement());\n    }\n    return result(test, body(null, items));\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   * ```ebnf\n   *  try ::= T_TRY '{' inner_statement* '}'\n   *          (\n   *              T_CATCH '(' namespace_name variable ')' '{'  inner_statement* '}'\n   *          )*\n   *          (T_FINALLY '{' inner_statement* '}')?\n   * ```\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L448\n   * @return {Try}\n   */\n  read_try: function () {\n    this.expect(this.tok.T_TRY);\n    const result = this.node(\"try\");\n    let always = null;\n    const catches = [];\n    const body = this.next().read_statement();\n    // https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L455\n    while (this.token === this.tok.T_CATCH) {\n      const item = this.node(\"catch\");\n      this.next().expect(\"(\") && this.next();\n      const what = this.read_list(this.read_namespace_name, \"|\", false);\n      const variable = this.read_variable(true, false);\n      this.expect(\")\");\n      catches.push(item(this.next().read_statement(), what, variable));\n    }\n    if (this.token === this.tok.T_FINALLY) {\n      always = this.next().read_statement();\n    }\n    return result(body, catches, always);\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   * Reads a short form of tokens\n   * @param {Number} token - The ending token\n   * @return {Block}\n   */\n  read_short_form: function (token) {\n    const body = this.node(\"block\");\n    const items = [];\n    if (this.expect(\":\")) this.next();\n    while (this.token != this.EOF && this.token !== token) {\n      items.push(this.read_inner_statement());\n    }\n    if (\n      items.length === 0 &&\n      this.extractDoc &&\n      this._docs.length > this._docIndex\n    ) {\n      items.push(this.node(\"noop\")());\n    }\n    if (this.expect(token)) this.next();\n    this.expectEndOfStatement();\n    return body(null, items);\n  },\n\n  /**\n   * https://wiki.php.net/rfc/trailing-comma-function-calls\n   * @param {*} item\n   * @param {*} separator\n   */\n  read_function_list: function (item, separator) {\n    const result = [];\n    do {\n      if (this.token == separator && this.version >= 703 && result.length > 0) {\n        result.push(this.node(\"noop\")());\n        break;\n      }\n      result.push(item.apply(this, []));\n      if (this.token != separator) {\n        break;\n      }\n      if (this.next().token == \")\" && this.version >= 703) {\n        break;\n      }\n    } while (this.token != this.EOF);\n    return result;\n  },\n\n  /**\n   * Helper : reads a list of tokens / sample : T_STRING ',' T_STRING ...\n   * ```ebnf\n   * list ::= separator? ( item separator )* item\n   * ```\n   */\n  read_list: function (item, separator, preserveFirstSeparator) {\n    const result = [];\n\n    if (this.token == separator) {\n      if (preserveFirstSeparator) {\n        result.push(typeof item === \"function\" ? this.node(\"noop\")() : null);\n      }\n      this.next();\n    }\n\n    if (typeof item === \"function\") {\n      do {\n        const itemResult = item.apply(this, []);\n        if (itemResult) {\n          result.push(itemResult);\n        }\n        if (this.token != separator) {\n          break;\n        }\n      } while (this.next().token != this.EOF);\n    } else {\n      if (this.expect(item)) {\n        result.push(this.text());\n      } else {\n        return [];\n      }\n      while (this.next().token != this.EOF) {\n        if (this.token != separator) break;\n        // trim current separator & check item\n        if (this.next().token != item) break;\n        result.push(this.text());\n      }\n    }\n    return result;\n  },\n\n  /**\n   * Reads a list of names separated by a comma\n   *\n   * ```ebnf\n   * name_list ::= namespace (',' namespace)*\n   * ```\n   *\n   * Sample code :\n   * ```php\n   * <?php class foo extends bar, baz { }\n   * ```\n   *\n   * @see https://github.com/php/php-src/blob/master/Zend/zend_language_parser.y#L726\n   * @return {Reference[]}\n   */\n  read_name_list: function () {\n    return this.read_list(this.read_namespace_name, \",\", false);\n  },\n\n  /**\n   * Reads the byref token and assign it to the specified node\n   * @param {*} cb\n   */\n  read_byref: function (cb) {\n    let byref = this.node(\"byref\");\n    this.next();\n    byref = byref(null);\n    const result = cb();\n    if (result) {\n      this.ast.swapLocations(result, byref, result, this);\n      result.byref = true;\n    }\n    return result;\n  },\n\n  /**\n   * Reads a list of variables declarations\n   *\n   * ```ebnf\n   * variable_declaration ::= T_VARIABLE ('=' expr)?*\n   * variable_declarations ::= variable_declaration (',' variable_declaration)*\n   * ```\n   *\n   * Sample code :\n   * ```php\n   * <?php static $a = 'hello', $b = 'world';\n   * ```\n   * @return {StaticVariable[]} Returns an array composed by a list of variables, or\n   * assign values\n   */\n  read_variable_declarations: function () {\n    return this.read_list(function () {\n      const node = this.node(\"staticvariable\");\n      let variable = this.node(\"variable\");\n      // plain variable name\n      if (this.expect(this.tok.T_VARIABLE)) {\n        const name = this.text().substring(1);\n        this.next();\n        variable = variable(name, false);\n      } else {\n        variable = variable(\"#ERR\", false);\n      }\n      if (this.token === \"=\") {\n        return node(variable, this.next().read_expr());\n      } else {\n        return variable;\n      }\n    }, \",\");\n  },\n\n  /*\n   * Reads class extends\n   */\n  read_extends_from: function () {\n    if (this.token === this.tok.T_EXTENDS) {\n      return this.next().read_namespace_name();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads interface extends list\n   */\n  read_interface_extends_list: function () {\n    if (this.token === this.tok.T_EXTENDS) {\n      return this.next().read_name_list();\n    }\n\n    return null;\n  },\n\n  /*\n   * Reads implements list\n   */\n  read_implements_list: function () {\n    if (this.token === this.tok.T_IMPLEMENTS) {\n      return this.next().read_name_list();\n    }\n\n    return null;\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nmodule.exports = {\n  /**\n   * Reads a variable\n   *\n   * ```ebnf\n   *   variable ::= &? ...complex @todo\n   * ```\n   *\n   * Some samples of parsed code :\n   * ```php\n   *  &$var                      // simple var\n   *  $var                      // simple var\n   *  classname::CONST_NAME     // dynamic class name with const retrieval\n   *  foo()                     // function call\n   *  $var->func()->property    // chained calls\n   * ```\n   */\n  read_variable: function (read_only, encapsed) {\n    let result;\n\n    // check the byref flag\n    if (this.token === \"&\") {\n      return this.read_byref(\n        this.read_variable.bind(this, read_only, encapsed)\n      );\n    }\n\n    // reads the entry point\n    if (this.is([this.tok.T_VARIABLE, \"$\"])) {\n      result = this.read_reference_variable(encapsed);\n    } else if (\n      this.is([\n        this.tok.T_NS_SEPARATOR,\n        this.tok.T_STRING,\n        this.tok.T_NAMESPACE,\n      ])\n    ) {\n      result = this.node();\n      const name = this.read_namespace_name();\n      if (\n        this.token != this.tok.T_DOUBLE_COLON &&\n        this.token != \"(\" &&\n        [\"parentreference\", \"selfreference\"].indexOf(name.kind) === -1\n      ) {\n        // @see parser.js line 130 : resolves a conflict with scalar\n        const literal = name.name.toLowerCase();\n        if (literal === \"true\") {\n          result = name.destroy(result(\"boolean\", true, name.name));\n        } else if (literal === \"false\") {\n          result = name.destroy(result(\"boolean\", false, name.name));\n        } else if (literal === \"null\") {\n          result = name.destroy(result(\"nullkeyword\", name.name));\n        } else {\n          result.destroy(name);\n          result = name;\n        }\n      } else {\n        // @fixme possible #193 bug\n        result.destroy(name);\n        result = name;\n      }\n    } else if (this.token === this.tok.T_STATIC) {\n      result = this.node(\"staticreference\");\n      const raw = this.text();\n      this.next();\n      result = result(raw);\n    } else {\n      this.expect(\"VARIABLE\");\n    }\n\n    // static mode\n    if (this.token === this.tok.T_DOUBLE_COLON) {\n      result = this.read_static_getter(result, encapsed);\n    }\n\n    return this.recursive_variable_chain_scan(result, read_only, encapsed);\n  },\n\n  // resolves a static call\n  read_static_getter: function (what, encapsed) {\n    const result = this.node(\"staticlookup\");\n    let offset, name;\n    if (this.next().is([this.tok.T_VARIABLE, \"$\"])) {\n      offset = this.read_reference_variable(encapsed);\n    } else if (\n      this.token === this.tok.T_STRING ||\n      this.token === this.tok.T_CLASS ||\n      (this.version >= 700 && this.is(\"IDENTIFIER\"))\n    ) {\n      offset = this.node(\"identifier\");\n      name = this.text();\n      this.next();\n      offset = offset(name);\n    } else if (this.token === \"{\") {\n      offset = this.node(\"literal\");\n      name = this.next().read_expr();\n      this.expect(\"}\") && this.next();\n      offset = offset(\"literal\", name, null);\n      this.expect(\"(\");\n    } else {\n      this.error([this.tok.T_VARIABLE, this.tok.T_STRING]);\n      // graceful mode : set getter as error node and continue\n      offset = this.node(\"identifier\");\n      name = this.text();\n      this.next();\n      offset = offset(name);\n    }\n    return result(what, offset);\n  },\n\n  read_what: function (is_static_lookup = false) {\n    let what = null;\n    let name = null;\n    switch (this.next().token) {\n      case this.tok.T_STRING:\n        what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        what = what(name);\n\n        if (is_static_lookup && this.token === this.tok.T_OBJECT_OPERATOR) {\n          this.error();\n        }\n        break;\n      case this.tok.T_VARIABLE:\n        what = this.node(\"variable\");\n        name = this.text().substring(1);\n        this.next();\n        what = what(name, false);\n        break;\n      case \"$\":\n        what = this.node();\n        this.next().expect([\"$\", \"{\", this.tok.T_VARIABLE]);\n        if (this.token === \"{\") {\n          // $obj->${$varname}\n          name = this.next().read_expr();\n          this.expect(\"}\") && this.next();\n          what = what(\"variable\", name, true);\n        } else {\n          // $obj->$$varname\n          name = this.read_expr();\n          what = what(\"variable\", name, false);\n        }\n        break;\n      case \"{\":\n        what = this.node(\"encapsedpart\");\n        name = this.next().read_expr();\n        this.expect(\"}\") && this.next();\n        what = what(name, \"complex\", false);\n        break;\n      default:\n        this.error([this.tok.T_STRING, this.tok.T_VARIABLE, \"$\", \"{\"]);\n        // graceful mode : set what as error mode & continue\n        what = this.node(\"identifier\");\n        name = this.text();\n        this.next();\n        what = what(name);\n        break;\n    }\n\n    return what;\n  },\n\n  recursive_variable_chain_scan: function (result, read_only, encapsed) {\n    let node, offset;\n    recursive_scan_loop: while (this.token != this.EOF) {\n      switch (this.token) {\n        case \"(\":\n          if (read_only) {\n            // @fixme : add more informations & test\n            return result;\n          } else {\n            result = this.node(\"call\")(result, this.read_argument_list());\n          }\n          break;\n        case \"[\":\n        case \"{\": {\n          const backet = this.token;\n          const isSquareBracket = backet === \"[\";\n          node = this.node(\"offsetlookup\");\n          this.next();\n          offset = false;\n          if (encapsed) {\n            offset = this.read_encaps_var_offset();\n            this.expect(isSquareBracket ? \"]\" : \"}\") && this.next();\n          } else {\n            const isCallableVariable = isSquareBracket\n              ? this.token !== \"]\"\n              : this.token !== \"}\";\n            // callable_variable : https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L1122\n            if (isCallableVariable) {\n              offset = this.read_expr();\n              this.expect(isSquareBracket ? \"]\" : \"}\") && this.next();\n            } else {\n              this.next();\n            }\n          }\n          result = node(result, offset);\n          break;\n        }\n        case this.tok.T_DOUBLE_COLON:\n          // @see https://github.com/glayzzle/php-parser/issues/107#issuecomment-354104574\n          if (\n            result.kind === \"staticlookup\" &&\n            result.offset.kind === \"identifier\"\n          ) {\n            this.error();\n          }\n\n          node = this.node(\"staticlookup\");\n          result = node(result, this.read_what(true));\n\n          // fix 185\n          // static lookup dereferencables are limited to staticlookup over functions\n          /*if (dereferencable && this.token !== \"(\") {\n            this.error(\"(\");\n          }*/\n          break;\n        case this.tok.T_OBJECT_OPERATOR: {\n          node = this.node(\"propertylookup\");\n          result = node(result, this.read_what());\n          break;\n        }\n        default:\n          break recursive_scan_loop;\n      }\n    }\n    return result;\n  },\n  /**\n   * https://github.com/php/php-src/blob/493524454d66adde84e00d249d607ecd540de99f/Zend/zend_language_parser.y#L1231\n   */\n  read_encaps_var_offset: function () {\n    let offset = this.node();\n    if (this.token === this.tok.T_STRING) {\n      const text = this.text();\n      this.next();\n      offset = offset(\"identifier\", text);\n    } else if (this.token === this.tok.T_NUM_STRING) {\n      const num = this.text();\n      this.next();\n      offset = offset(\"number\", num, null);\n    } else if (this.token === \"-\") {\n      this.next();\n      const num = -1 * this.text();\n      this.expect(this.tok.T_NUM_STRING) && this.next();\n      offset = offset(\"number\", num, null);\n    } else if (this.token === this.tok.T_VARIABLE) {\n      const name = this.text().substring(1);\n      this.next();\n      offset = offset(\"variable\", name, false);\n    } else {\n      this.expect([\n        this.tok.T_STRING,\n        this.tok.T_NUM_STRING,\n        \"-\",\n        this.tok.T_VARIABLE,\n      ]);\n      // fallback : consider as identifier\n      const text = this.text();\n      this.next();\n      offset = offset(\"identifier\", text);\n    }\n    return offset;\n  },\n  /**\n   * ```ebnf\n   *  reference_variable ::=  simple_variable ('[' OFFSET ']')* | '{' EXPR '}'\n   * ```\n   * <code>\n   *  $foo[123];      // foo is an array ==> gets its entry\n   *  $foo{1};        // foo is a string ==> get the 2nd char offset\n   *  ${'foo'}[123];  // get the dynamic var $foo\n   *  $foo[123]{1};   // gets the 2nd char from the 123 array entry\n   * </code>\n   */\n  read_reference_variable: function (encapsed) {\n    let result = this.read_simple_variable();\n    let offset;\n    while (this.token != this.EOF) {\n      const node = this.node();\n      if (this.token == \"{\" && !encapsed) {\n        // @fixme check coverage, not sure thats working\n        offset = this.next().read_expr();\n        this.expect(\"}\") && this.next();\n        result = node(\"offsetlookup\", result, offset);\n      } else {\n        node.destroy();\n        break;\n      }\n    }\n    return result;\n  },\n  /**\n   * ```ebnf\n   *  simple_variable ::= T_VARIABLE | '$' '{' expr '}' | '$' simple_variable\n   * ```\n   */\n  read_simple_variable: function () {\n    let result = this.node(\"variable\");\n    let name;\n    if (\n      this.expect([this.tok.T_VARIABLE, \"$\"]) &&\n      this.token === this.tok.T_VARIABLE\n    ) {\n      // plain variable name\n      name = this.text().substring(1);\n      this.next();\n      result = result(name, false);\n    } else {\n      if (this.token === \"$\") this.next();\n      // dynamic variable name\n      switch (this.token) {\n        case \"{\": {\n          const expr = this.next().read_expr();\n          this.expect(\"}\") && this.next();\n          result = result(expr, true);\n          break;\n        }\n        case \"$\": // $$$var\n          result = result(this.read_simple_variable(), false);\n          break;\n        case this.tok.T_VARIABLE: {\n          // $$var\n          name = this.text().substring(1);\n          const node = this.node(\"variable\");\n          this.next();\n          result = result(node(name, false), false);\n          break;\n        }\n        default:\n          this.error([\"{\", \"$\", this.tok.T_VARIABLE]);\n          // graceful mode\n          name = this.text();\n          this.next();\n          result = result(name, false);\n      }\n    }\n    return result;\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\n/**\n * PHP AST Tokens\n * @type {Object}\n */\nmodule.exports = {\n  values: {\n    101: \"T_HALT_COMPILER\",\n    102: \"T_USE\",\n    103: \"T_ENCAPSED_AND_WHITESPACE\",\n    104: \"T_OBJECT_OPERATOR\",\n    105: \"T_STRING\",\n    106: \"T_DOLLAR_OPEN_CURLY_BRACES\",\n    107: \"T_STRING_VARNAME\",\n    108: \"T_CURLY_OPEN\",\n    109: \"T_NUM_STRING\",\n    110: \"T_ISSET\",\n    111: \"T_EMPTY\",\n    112: \"T_INCLUDE\",\n    113: \"T_INCLUDE_ONCE\",\n    114: \"T_EVAL\",\n    115: \"T_REQUIRE\",\n    116: \"T_REQUIRE_ONCE\",\n    117: \"T_NAMESPACE\",\n    118: \"T_NS_SEPARATOR\",\n    119: \"T_AS\",\n    120: \"T_IF\",\n    121: \"T_ENDIF\",\n    122: \"T_WHILE\",\n    123: \"T_DO\",\n    124: \"T_FOR\",\n    125: \"T_SWITCH\",\n    126: \"T_BREAK\",\n    127: \"T_CONTINUE\",\n    128: \"T_RETURN\",\n    129: \"T_GLOBAL\",\n    130: \"T_STATIC\",\n    131: \"T_ECHO\",\n    132: \"T_INLINE_HTML\",\n    133: \"T_UNSET\",\n    134: \"T_FOREACH\",\n    135: \"T_DECLARE\",\n    136: \"T_TRY\",\n    137: \"T_THROW\",\n    138: \"T_GOTO\",\n    139: \"T_FINALLY\",\n    140: \"T_CATCH\",\n    141: \"T_ENDDECLARE\",\n    142: \"T_LIST\",\n    143: \"T_CLONE\",\n    144: \"T_PLUS_EQUAL\",\n    145: \"T_MINUS_EQUAL\",\n    146: \"T_MUL_EQUAL\",\n    147: \"T_DIV_EQUAL\",\n    148: \"T_CONCAT_EQUAL\",\n    149: \"T_MOD_EQUAL\",\n    150: \"T_AND_EQUAL\",\n    151: \"T_OR_EQUAL\",\n    152: \"T_XOR_EQUAL\",\n    153: \"T_SL_EQUAL\",\n    154: \"T_SR_EQUAL\",\n    155: \"T_INC\",\n    156: \"T_DEC\",\n    157: \"T_BOOLEAN_OR\",\n    158: \"T_BOOLEAN_AND\",\n    159: \"T_LOGICAL_OR\",\n    160: \"T_LOGICAL_AND\",\n    161: \"T_LOGICAL_XOR\",\n    162: \"T_SL\",\n    163: \"T_SR\",\n    164: \"T_IS_IDENTICAL\",\n    165: \"T_IS_NOT_IDENTICAL\",\n    166: \"T_IS_EQUAL\",\n    167: \"T_IS_NOT_EQUAL\",\n    168: \"T_IS_SMALLER_OR_EQUAL\",\n    169: \"T_IS_GREATER_OR_EQUAL\",\n    170: \"T_INSTANCEOF\",\n    171: \"T_INT_CAST\",\n    172: \"T_DOUBLE_CAST\",\n    173: \"T_STRING_CAST\",\n    174: \"T_ARRAY_CAST\",\n    175: \"T_OBJECT_CAST\",\n    176: \"T_BOOL_CAST\",\n    177: \"T_UNSET_CAST\",\n    178: \"T_EXIT\",\n    179: \"T_PRINT\",\n    180: \"T_YIELD\",\n    181: \"T_YIELD_FROM\",\n    182: \"T_FUNCTION\",\n    183: \"T_DOUBLE_ARROW\",\n    184: \"T_DOUBLE_COLON\",\n    185: \"T_ARRAY\",\n    186: \"T_CALLABLE\",\n    187: \"T_CLASS\",\n    188: \"T_ABSTRACT\",\n    189: \"T_TRAIT\",\n    190: \"T_FINAL\",\n    191: \"T_EXTENDS\",\n    192: \"T_INTERFACE\",\n    193: \"T_IMPLEMENTS\",\n    194: \"T_VAR\",\n    195: \"T_PUBLIC\",\n    196: \"T_PROTECTED\",\n    197: \"T_PRIVATE\",\n    198: \"T_CONST\",\n    199: \"T_NEW\",\n    200: \"T_INSTEADOF\",\n    201: \"T_ELSEIF\",\n    202: \"T_ELSE\",\n    203: \"T_ENDSWITCH\",\n    204: \"T_CASE\",\n    205: \"T_DEFAULT\",\n    206: \"T_ENDFOR\",\n    207: \"T_ENDFOREACH\",\n    208: \"T_ENDWHILE\",\n    209: \"T_CONSTANT_ENCAPSED_STRING\",\n    210: \"T_LNUMBER\",\n    211: \"T_DNUMBER\",\n    212: \"T_LINE\",\n    213: \"T_FILE\",\n    214: \"T_DIR\",\n    215: \"T_TRAIT_C\",\n    216: \"T_METHOD_C\",\n    217: \"T_FUNC_C\",\n    218: \"T_NS_C\",\n    219: \"T_START_HEREDOC\",\n    220: \"T_END_HEREDOC\",\n    221: \"T_CLASS_C\",\n    222: \"T_VARIABLE\",\n    223: \"T_OPEN_TAG\",\n    224: \"T_OPEN_TAG_WITH_ECHO\",\n    225: \"T_CLOSE_TAG\",\n    226: \"T_WHITESPACE\",\n    227: \"T_COMMENT\",\n    228: \"T_DOC_COMMENT\",\n    229: \"T_ELLIPSIS\",\n    230: \"T_COALESCE\",\n    231: \"T_POW\",\n    232: \"T_POW_EQUAL\",\n    233: \"T_SPACESHIP\",\n    234: \"T_COALESCE_EQUAL\",\n    235: \"T_FN\",\n  },\n  names: {\n    T_HALT_COMPILER: 101,\n    T_USE: 102,\n    T_ENCAPSED_AND_WHITESPACE: 103,\n    T_OBJECT_OPERATOR: 104,\n    T_STRING: 105,\n    T_DOLLAR_OPEN_CURLY_BRACES: 106,\n    T_STRING_VARNAME: 107,\n    T_CURLY_OPEN: 108,\n    T_NUM_STRING: 109,\n    T_ISSET: 110,\n    T_EMPTY: 111,\n    T_INCLUDE: 112,\n    T_INCLUDE_ONCE: 113,\n    T_EVAL: 114,\n    T_REQUIRE: 115,\n    T_REQUIRE_ONCE: 116,\n    T_NAMESPACE: 117,\n    T_NS_SEPARATOR: 118,\n    T_AS: 119,\n    T_IF: 120,\n    T_ENDIF: 121,\n    T_WHILE: 122,\n    T_DO: 123,\n    T_FOR: 124,\n    T_SWITCH: 125,\n    T_BREAK: 126,\n    T_CONTINUE: 127,\n    T_RETURN: 128,\n    T_GLOBAL: 129,\n    T_STATIC: 130,\n    T_ECHO: 131,\n    T_INLINE_HTML: 132,\n    T_UNSET: 133,\n    T_FOREACH: 134,\n    T_DECLARE: 135,\n    T_TRY: 136,\n    T_THROW: 137,\n    T_GOTO: 138,\n    T_FINALLY: 139,\n    T_CATCH: 140,\n    T_ENDDECLARE: 141,\n    T_LIST: 142,\n    T_CLONE: 143,\n    T_PLUS_EQUAL: 144,\n    T_MINUS_EQUAL: 145,\n    T_MUL_EQUAL: 146,\n    T_DIV_EQUAL: 147,\n    T_CONCAT_EQUAL: 148,\n    T_MOD_EQUAL: 149,\n    T_AND_EQUAL: 150,\n    T_OR_EQUAL: 151,\n    T_XOR_EQUAL: 152,\n    T_SL_EQUAL: 153,\n    T_SR_EQUAL: 154,\n    T_INC: 155,\n    T_DEC: 156,\n    T_BOOLEAN_OR: 157,\n    T_BOOLEAN_AND: 158,\n    T_LOGICAL_OR: 159,\n    T_LOGICAL_AND: 160,\n    T_LOGICAL_XOR: 161,\n    T_SL: 162,\n    T_SR: 163,\n    T_IS_IDENTICAL: 164,\n    T_IS_NOT_IDENTICAL: 165,\n    T_IS_EQUAL: 166,\n    T_IS_NOT_EQUAL: 167,\n    T_IS_SMALLER_OR_EQUAL: 168,\n    T_IS_GREATER_OR_EQUAL: 169,\n    T_INSTANCEOF: 170,\n    T_INT_CAST: 171,\n    T_DOUBLE_CAST: 172,\n    T_STRING_CAST: 173,\n    T_ARRAY_CAST: 174,\n    T_OBJECT_CAST: 175,\n    T_BOOL_CAST: 176,\n    T_UNSET_CAST: 177,\n    T_EXIT: 178,\n    T_PRINT: 179,\n    T_YIELD: 180,\n    T_YIELD_FROM: 181,\n    T_FUNCTION: 182,\n    T_DOUBLE_ARROW: 183,\n    T_DOUBLE_COLON: 184,\n    T_ARRAY: 185,\n    T_CALLABLE: 186,\n    T_CLASS: 187,\n    T_ABSTRACT: 188,\n    T_TRAIT: 189,\n    T_FINAL: 190,\n    T_EXTENDS: 191,\n    T_INTERFACE: 192,\n    T_IMPLEMENTS: 193,\n    T_VAR: 194,\n    T_PUBLIC: 195,\n    T_PROTECTED: 196,\n    T_PRIVATE: 197,\n    T_CONST: 198,\n    T_NEW: 199,\n    T_INSTEADOF: 200,\n    T_ELSEIF: 201,\n    T_ELSE: 202,\n    T_ENDSWITCH: 203,\n    T_CASE: 204,\n    T_DEFAULT: 205,\n    T_ENDFOR: 206,\n    T_ENDFOREACH: 207,\n    T_ENDWHILE: 208,\n    T_CONSTANT_ENCAPSED_STRING: 209,\n    T_LNUMBER: 210,\n    T_DNUMBER: 211,\n    T_LINE: 212,\n    T_FILE: 213,\n    T_DIR: 214,\n    T_TRAIT_C: 215,\n    T_METHOD_C: 216,\n    T_FUNC_C: 217,\n    T_NS_C: 218,\n    T_START_HEREDOC: 219,\n    T_END_HEREDOC: 220,\n    T_CLASS_C: 221,\n    T_VARIABLE: 222,\n    T_OPEN_TAG: 223,\n    T_OPEN_TAG_WITH_ECHO: 224,\n    T_CLOSE_TAG: 225,\n    T_WHITESPACE: 226,\n    T_COMMENT: 227,\n    T_DOC_COMMENT: 228,\n    T_ELLIPSIS: 229,\n    T_COALESCE: 230,\n    T_POW: 231,\n    T_POW_EQUAL: 232,\n    T_SPACESHIP: 233,\n    T_COALESCE_EQUAL: 234,\n    T_FN: 235,\n  },\n};\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Location = require(\"./ast/location\");\nconst Position = require(\"./ast/position\");\n\n/**\n * ## Class hierarchy\n *\n * - [Location](#location)\n * - [Position](#position)\n * - [Node](#node)\n *   - [Noop](#noop)\n *   - [NullKeyword](#nullkeyword)\n *   - [StaticVariable](#staticvariable)\n *   - [EncapsedPart](#encapsedpart)\n *   - [Constant](#constant)\n *   - [Identifier](#identifier)\n *   - [Reference](#reference)\n *     - [TypeReference](#typereference)\n *     - [ParentReference](#parentreference)\n *     - [StaticReference](#staticreference)\n *     - [SelfReference](#selfreference)\n *     - [Name](#name)\n *   - [TraitUse](#traituse)\n *   - [TraitAlias](#traitalias)\n *   - [TraitPrecedence](#traitprecedence)\n *   - [Comment](#comment)\n *     - [CommentLine](#commentline)\n *     - [CommentBlock](#commentblock)\n *   - [Error](#error)\n *   - [Expression](#expression)\n *     - [Entry](#entry)\n *     - [ArrowFunc](#arrowfunc)\n *     - [Closure](#closure)\n *     - [ByRef](#byref)\n *     - [Silent](#silent)\n *     - [RetIf](#retif)\n *     - [New](#new)\n *     - [Include](#include)\n *     - [Call](#call)\n *     - [Eval](#eval)\n *     - [Exit](#exit)\n *     - [Clone](#clone)\n *     - [Assign](#assign)\n *     - [AssignRef](#assignref)\n *     - [Array](#array)\n *     - [List](#list)\n *     - [Variable](#variable)\n *     - [Variadic](#variadic)\n *     - [Yield](#yield)\n *     - [YieldFrom](#yieldfrom)\n *     - [Print](#print)\n *     - [Isset](#isset)\n *     - [Empty](#empty)\n *     - [Lookup](#lookup)\n *       - [PropertyLookup](#propertylookup)\n *       - [StaticLookup](#staticlookup)\n *       - [OffsetLookup](#offsetlookup)\n *     - [Operation](#operation)\n *       - [Pre](#pre)\n *       - [Post](#post)\n *       - [Bin](#bin)\n *       - [Unary](#unary)\n *       - [Cast](#cast)\n *     - [Literal](#literal)\n *       - [Boolean](#boolean)\n *       - [String](#string)\n *       - [Number](#number)\n *       - [Inline](#inline)\n *       - [Magic](#magic)\n *       - [Nowdoc](#nowdoc)\n *       - [Encapsed](#encapsed)\n *   - [Statement](#statement)\n *     - [ConstantStatement](#constantstatement)\n *       - [ClassConstant](#classconstant)\n *     - [Return](#return)\n *     - [Label](#label)\n *     - [Continue](#continue)\n *     - [Case](#case)\n *     - [Break](#break)\n *     - [Echo](#echo)\n *     - [Unset](#unset)\n *     - [Halt](#halt)\n *     - [Declare](#declare)\n *     - [Global](#global)\n *     - [Static](#static)\n *     - [If](#if)\n *     - [Do](#do)\n *     - [While](#while)\n *     - [For](#for)\n *     - [Foreach](#foreach)\n *     - [Switch](#switch)\n *     - [Goto](#goto)\n *     - [Try](#try)\n *     - [Catch](#catch)\n *     - [Throw](#throw)\n *     - [UseGroup](#usegroup)\n *     - [UseItem](#useitem)\n *     - [Block](#block)\n *       - [Program](#program)\n *       - [Namespace](#namespace)\n *     - [PropertyStatement](#propertystatement)\n *     - [Property](#property)\n *     - [Declaration](#declaration)\n *       - [Class](#class)\n *       - [Interface](#interface)\n *       - [Trait](#trait)\n *       - [Function](#function)\n *         - [Method](#method)\n *       - [Parameter](#parameter)\n * ---\n */\n\n/**\n * The AST builder class\n * @constructor AST\n * @tutorial AST\n * @property {Boolean} withPositions - Should locate any node (by default false)\n * @property {Boolean} withSource - Should extract the node original code (by default false)\n */\nconst AST = function (withPositions, withSource) {\n  this.withPositions = withPositions;\n  this.withSource = withSource;\n};\n\n/**\n * Create a position node from specified parser\n * including it's lexer current state\n * @param {Parser}\n * @return {Position}\n * @private\n */\nAST.prototype.position = function (parser) {\n  return new Position(\n    parser.lexer.yylloc.first_line,\n    parser.lexer.yylloc.first_column,\n    parser.lexer.yylloc.first_offset\n  );\n};\n\n// operators in ascending order of precedence\nAST.precedence = {};\n[\n  [\"or\"],\n  [\"xor\"],\n  [\"and\"],\n  [\"=\"],\n  [\"?\"],\n  [\"??\"],\n  [\"||\"],\n  [\"&&\"],\n  [\"|\"],\n  [\"^\"],\n  [\"&\"],\n  [\"==\", \"!=\", \"===\", \"!==\", /* '<>', */ \"<=>\"],\n  [\"<\", \"<=\", \">\", \">=\"],\n  [\"<<\", \">>\"],\n  [\"+\", \"-\", \".\"],\n  [\"*\", \"/\", \"%\"],\n  [\"!\"],\n  [\"instanceof\"],\n  [\"cast\", \"silent\"],\n  [\"**\"],\n  // TODO: [ (array)\n  // TODO: clone, new\n].forEach(function (list, index) {\n  list.forEach(function (operator) {\n    AST.precedence[operator] = index + 1;\n  });\n});\n\nAST.prototype.isRightAssociative = function (operator) {\n  return operator === \"**\" || operator === \"??\";\n};\n\n/**\n * Change parent node informations after swapping childs\n */\nAST.prototype.swapLocations = function (target, first, last, parser) {\n  if (this.withPositions) {\n    target.loc.start = first.loc.start;\n    target.loc.end = last.loc.end;\n    if (this.withSource) {\n      target.loc.source = parser.lexer._input.substring(\n        target.loc.start.offset,\n        target.loc.end.offset\n      );\n    }\n  }\n};\n\n/**\n * Includes locations from first & last into the target\n */\nAST.prototype.resolveLocations = function (target, first, last, parser) {\n  if (this.withPositions) {\n    if (target.loc.start.offset > first.loc.start.offset) {\n      target.loc.start = first.loc.start;\n    }\n    if (target.loc.end.offset < last.loc.end.offset) {\n      target.loc.end = last.loc.end;\n    }\n    if (this.withSource) {\n      target.loc.source = parser.lexer._input.substring(\n        target.loc.start.offset,\n        target.loc.end.offset\n      );\n    }\n  }\n};\n\n/**\n * Check and fix precence, by default using right\n */\nAST.prototype.resolvePrecedence = function (result, parser) {\n  let buffer, lLevel, rLevel;\n  // handling precendence\n  if (result.kind === \"call\") {\n    // including what argument into location\n    this.resolveLocations(result, result.what, result, parser);\n  } else if (\n    result.kind === \"propertylookup\" ||\n    result.kind === \"staticlookup\" ||\n    (result.kind === \"offsetlookup\" && result.offset)\n  ) {\n    // including what argument into location\n    this.resolveLocations(result, result.what, result.offset, parser);\n  } else if (result.kind === \"bin\") {\n    if (result.right && !result.right.parenthesizedExpression) {\n      if (result.right.kind === \"bin\") {\n        lLevel = AST.precedence[result.type];\n        rLevel = AST.precedence[result.right.type];\n        if (\n          lLevel &&\n          rLevel &&\n          rLevel <= lLevel &&\n          !this.isRightAssociative(result.type)\n        ) {\n          // https://github.com/glayzzle/php-parser/issues/79\n          // shift precedence\n          buffer = result.right;\n          result.right = result.right.left;\n          this.swapLocations(result, result.left, result.right, parser);\n          buffer.left = this.resolvePrecedence(result, parser);\n          this.swapLocations(buffer, buffer.left, buffer.right, parser);\n          result = buffer;\n        }\n      } else if (result.right.kind === \"retif\") {\n        lLevel = AST.precedence[result.type];\n        rLevel = AST.precedence[\"?\"];\n        if (lLevel && rLevel && rLevel <= lLevel) {\n          buffer = result.right;\n          result.right = result.right.test;\n          this.swapLocations(result, result.left, result.right, parser);\n          buffer.test = this.resolvePrecedence(result, parser);\n          this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n          result = buffer;\n        }\n      }\n    }\n  } else if (\n    (result.kind === \"silent\" || result.kind === \"cast\") &&\n    result.expr &&\n    !result.expr.parenthesizedExpression\n  ) {\n    // https://github.com/glayzzle/php-parser/issues/172\n    if (result.expr.kind === \"bin\") {\n      buffer = result.expr;\n      result.expr = result.expr.left;\n      this.swapLocations(result, result, result.expr, parser);\n      buffer.left = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.left, buffer.right, parser);\n      result = buffer;\n    } else if (result.expr.kind === \"retif\") {\n      buffer = result.expr;\n      result.expr = result.expr.test;\n      this.swapLocations(result, result, result.expr, parser);\n      buffer.test = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n      result = buffer;\n    }\n  } else if (result.kind === \"unary\") {\n    // https://github.com/glayzzle/php-parser/issues/75\n    if (result.what && !result.what.parenthesizedExpression) {\n      // unary precedence is allways lower\n      if (result.what.kind === \"bin\") {\n        buffer = result.what;\n        result.what = result.what.left;\n        this.swapLocations(result, result, result.what, parser);\n        buffer.left = this.resolvePrecedence(result, parser);\n        this.swapLocations(buffer, buffer.left, buffer.right, parser);\n        result = buffer;\n      } else if (result.what.kind === \"retif\") {\n        buffer = result.what;\n        result.what = result.what.test;\n        this.swapLocations(result, result, result.what, parser);\n        buffer.test = this.resolvePrecedence(result, parser);\n        this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n        result = buffer;\n      }\n    }\n  } else if (result.kind === \"retif\") {\n    // https://github.com/glayzzle/php-parser/issues/77\n    if (\n      result.falseExpr &&\n      result.falseExpr.kind === \"retif\" &&\n      !result.falseExpr.parenthesizedExpression\n    ) {\n      buffer = result.falseExpr;\n      result.falseExpr = buffer.test;\n      this.swapLocations(result, result.test, result.falseExpr, parser);\n      buffer.test = this.resolvePrecedence(result, parser);\n      this.swapLocations(buffer, buffer.test, buffer.falseExpr, parser);\n      result = buffer;\n    }\n  } else if (result.kind === \"assign\") {\n    // https://github.com/glayzzle/php-parser/issues/81\n    if (\n      result.right &&\n      result.right.kind === \"bin\" &&\n      !result.right.parenthesizedExpression\n    ) {\n      lLevel = AST.precedence[\"=\"];\n      rLevel = AST.precedence[result.right.type];\n      // only shifts with and, xor, or\n      if (lLevel && rLevel && rLevel < lLevel) {\n        buffer = result.right;\n        result.right = result.right.left;\n        buffer.left = result;\n        this.swapLocations(buffer, buffer.left, result.right, parser);\n        result = buffer;\n      }\n    }\n  } else if (result.kind === \"expressionstatement\") {\n    this.swapLocations(result, result.expression, result, parser);\n  }\n  return result;\n};\n\n/**\n * Prepares an AST node\n * @param {String|null} kind - Defines the node type\n * (if null, the kind must be passed at the function call)\n * @param {Parser} parser - The parser instance (use for extracting locations)\n * @return {Function}\n */\nAST.prototype.prepare = function (kind, docs, parser) {\n  let start = null;\n  if (this.withPositions || this.withSource) {\n    start = this.position(parser);\n  }\n  const self = this;\n  // returns the node\n  const result = function () {\n    let location = null;\n    const args = Array.prototype.slice.call(arguments);\n    args.push(docs);\n    if (self.withPositions || self.withSource) {\n      let src = null;\n      if (self.withSource) {\n        src = parser.lexer._input.substring(start.offset, parser.prev[2]);\n      }\n      // if with source, need location on swapLocations function\n      location = new Location(\n        src,\n        start,\n        new Position(parser.prev[0], parser.prev[1], parser.prev[2])\n      );\n      // last argument is allways the location\n      args.push(location);\n    }\n    // handle lazy kind definitions\n    if (!kind) {\n      kind = args.shift();\n    }\n    // build the object\n    const node = self[kind];\n    if (typeof node !== \"function\") {\n      throw new Error('Undefined node \"' + kind + '\"');\n    }\n    const astNode = Object.create(node.prototype);\n    node.apply(astNode, args);\n    result.instance = astNode;\n    if (result.trailingComments) {\n      // buffer of trailingComments\n      astNode.trailingComments = result.trailingComments;\n    }\n    if (typeof result.postBuild === \"function\") {\n      result.postBuild(astNode);\n    }\n    if (parser.debug) {\n      delete AST.stack[result.stackUid];\n    }\n    return self.resolvePrecedence(astNode, parser);\n  };\n  if (parser.debug) {\n    if (!AST.stack) {\n      AST.stack = {};\n      AST.stackUid = 1;\n    }\n    AST.stack[++AST.stackUid] = {\n      position: start,\n      stack: new Error().stack.split(\"\\n\").slice(3, 5),\n    };\n    result.stackUid = AST.stackUid;\n  }\n\n  /**\n   * Sets a list of trailing comments\n   * @param {*} docs\n   */\n  result.setTrailingComments = function (docs) {\n    if (result.instance) {\n      // already created\n      result.instance.setTrailingComments(docs);\n    } else {\n      result.trailingComments = docs;\n    }\n  };\n\n  /**\n   * Release a node without using it on the AST\n   */\n  result.destroy = function (target) {\n    if (docs) {\n      // release current docs stack\n      if (target) {\n        if (!target.leadingComments) {\n          target.leadingComments = docs;\n        } else {\n          target.leadingComments = docs.concat(target.leadingComments);\n        }\n      } else {\n        parser._docIndex = parser._docs.length - docs.length;\n      }\n    }\n    if (parser.debug) {\n      delete AST.stack[result.stackUid];\n    }\n  };\n  return result;\n};\n\nAST.prototype.checkNodes = function () {\n  const errors = [];\n  for (const k in AST.stack) {\n    if (AST.stack.hasOwnProperty(k)) {\n      errors.push(AST.stack[k]);\n    }\n  }\n  AST.stack = {};\n  return errors;\n};\n\n// Define all AST nodes\n[\n  require(\"./ast/array\"),\n  require(\"./ast/arrowfunc\"),\n  require(\"./ast/assign\"),\n  require(\"./ast/assignref\"),\n  require(\"./ast/bin\"),\n  require(\"./ast/block\"),\n  require(\"./ast/boolean\"),\n  require(\"./ast/break\"),\n  require(\"./ast/byref\"),\n  require(\"./ast/call\"),\n  require(\"./ast/case\"),\n  require(\"./ast/cast\"),\n  require(\"./ast/catch\"),\n  require(\"./ast/class\"),\n  require(\"./ast/classconstant\"),\n  require(\"./ast/clone\"),\n  require(\"./ast/closure\"),\n  require(\"./ast/comment\"),\n  require(\"./ast/commentblock\"),\n  require(\"./ast/commentline\"),\n  require(\"./ast/constant\"),\n  require(\"./ast/constantstatement\"),\n  require(\"./ast/continue\"),\n  require(\"./ast/declaration\"),\n  require(\"./ast/declare\"),\n  require(\"./ast/declaredirective\"),\n  require(\"./ast/do\"),\n  require(\"./ast/echo\"),\n  require(\"./ast/empty\"),\n  require(\"./ast/encapsed\"),\n  require(\"./ast/encapsedpart\"),\n  require(\"./ast/entry\"),\n  require(\"./ast/error\"),\n  require(\"./ast/eval\"),\n  require(\"./ast/exit\"),\n  require(\"./ast/expression\"),\n  require(\"./ast/expressionstatement\"),\n  require(\"./ast/for\"),\n  require(\"./ast/foreach\"),\n  require(\"./ast/function\"),\n  require(\"./ast/global\"),\n  require(\"./ast/goto\"),\n  require(\"./ast/halt\"),\n  require(\"./ast/identifier\"),\n  require(\"./ast/if\"),\n  require(\"./ast/include\"),\n  require(\"./ast/inline\"),\n  require(\"./ast/interface\"),\n  require(\"./ast/isset\"),\n  require(\"./ast/label\"),\n  require(\"./ast/list\"),\n  require(\"./ast/literal\"),\n  require(\"./ast/lookup\"),\n  require(\"./ast/magic\"),\n  require(\"./ast/method\"),\n  require(\"./ast/name\"),\n  require(\"./ast/namespace\"),\n  require(\"./ast/new\"),\n  require(\"./ast/node\"),\n  require(\"./ast/noop\"),\n  require(\"./ast/nowdoc\"),\n  require(\"./ast/nullkeyword\"),\n  require(\"./ast/number\"),\n  require(\"./ast/offsetlookup\"),\n  require(\"./ast/operation\"),\n  require(\"./ast/parameter\"),\n  require(\"./ast/parentreference\"),\n  require(\"./ast/post\"),\n  require(\"./ast/pre\"),\n  require(\"./ast/print\"),\n  require(\"./ast/program\"),\n  require(\"./ast/property\"),\n  require(\"./ast/propertylookup\"),\n  require(\"./ast/propertystatement\"),\n  require(\"./ast/reference\"),\n  require(\"./ast/retif\"),\n  require(\"./ast/return\"),\n  require(\"./ast/selfreference\"),\n  require(\"./ast/silent\"),\n  require(\"./ast/statement\"),\n  require(\"./ast/static\"),\n  require(\"./ast/staticvariable\"),\n  require(\"./ast/staticlookup\"),\n  require(\"./ast/staticreference\"),\n  require(\"./ast/string\"),\n  require(\"./ast/switch\"),\n  require(\"./ast/throw\"),\n  require(\"./ast/trait\"),\n  require(\"./ast/traitalias\"),\n  require(\"./ast/traitprecedence\"),\n  require(\"./ast/traituse\"),\n  require(\"./ast/try\"),\n  require(\"./ast/typereference\"),\n  require(\"./ast/unary\"),\n  require(\"./ast/unset\"),\n  require(\"./ast/usegroup\"),\n  require(\"./ast/useitem\"),\n  require(\"./ast/variable\"),\n  require(\"./ast/variadic\"),\n  require(\"./ast/while\"),\n  require(\"./ast/yield\"),\n  require(\"./ast/yieldfrom\"),\n].forEach(function (ctor) {\n  AST.prototype[ctor.kind] = ctor;\n});\n\nmodule.exports = AST;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\n/**\n * Defines the location of the node (with it's source contents as string)\n * @constructor Location\n * @property {String|null} source\n * @property {Position} start\n * @property {Position} end\n */\nconst Location = function (source, start, end) {\n  this.source = source;\n  this.start = start;\n  this.end = end;\n};\n\nmodule.exports = Location;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\n/**\n * Each Position object consists of a line number (1-indexed) and a column number (0-indexed):\n * @constructor Position\n * @property {Number} line\n * @property {Number} column\n * @property {Number} offset\n */\nconst Position = function (line, column, offset) {\n  this.line = line;\n  this.column = column;\n  this.offset = offset;\n};\n\nmodule.exports = Position;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expr = require(\"./expression\");\nconst KIND = \"array\";\n\n/**\n * Defines an array structure\n * @constructor Array\n * @example\n * // PHP code :\n * [1, 'foo' => 'bar', 3]\n *\n * // AST structure :\n * {\n *  \"kind\": \"array\",\n *  \"shortForm\": true\n *  \"items\": [\n *    {\"kind\": \"number\", \"value\": \"1\"},\n *    {\n *      \"kind\": \"entry\",\n *      \"key\": {\"kind\": \"string\", \"value\": \"foo\", \"isDoubleQuote\": false},\n *      \"value\": {\"kind\": \"string\", \"value\": \"bar\", \"isDoubleQuote\": false}\n *    },\n *    {\"kind\": \"number\", \"value\": \"3\"}\n *  ]\n * }\n * @extends {Expression}\n * @property {Entry|Expr|Variable} items List of array items\n * @property {boolean} shortForm Indicate if the short array syntax is used, ex `[]` instead `array()`\n */\nmodule.exports = Expr.extends(KIND, function Array(\n  shortForm,\n  items,\n  docs,\n  location\n) {\n  Expr.apply(this, [KIND, docs, location]);\n  this.items = items;\n  this.shortForm = shortForm;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"arrowfunc\";\n\n/**\n * Defines an arrow function (it's like a closure)\n * @constructor ArrowFunc\n * @extends {Expression}\n * @property {Parameter[]} arguments\n * @property {Identifier} type\n * @property {Expression} body\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {boolean} isStatic\n */\nmodule.exports = Expression.extends(KIND, function Closure(\n  args,\n  byref,\n  body,\n  type,\n  nullable,\n  isStatic,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.arguments = args;\n  this.byref = byref;\n  this.body = body;\n  this.type = type;\n  this.nullable = nullable;\n  this.isStatic = isStatic || false;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"assign\";\n\n/**\n * Assigns a value to the specified target\n * @constructor Assign\n * @extends {Expression}\n * @property {Expression} left\n * @property {Expression} right\n * @property {String} operator\n */\nmodule.exports = Expression.extends(KIND, function Assign(\n  left,\n  right,\n  operator,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.left = left;\n  this.right = right;\n  this.operator = operator;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"assignref\";\n\n/**\n * Assigns a value to the specified target\n * @constructor Assign\n * @extends {Expression}\n * @property {Expression} left\n * @property {Expression} right\n * @property {String} operator\n */\nmodule.exports = Expression.extends(KIND, function AssignRef(\n  left,\n  right,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.left = left;\n  this.right = right;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Operation = require(\"./operation\");\nconst KIND = \"bin\";\n/**\n * Binary operations\n * @constructor Bin\n * @extends {Operation}\n * @property {String} type\n * @property {Expression} left\n * @property {Expression} right\n */\nmodule.exports = Operation.extends(KIND, function Bin(\n  type,\n  left,\n  right,\n  docs,\n  location\n) {\n  Operation.apply(this, [KIND, docs, location]);\n  this.type = type;\n  this.left = left;\n  this.right = right;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"boolean\";\n\n/**\n * Defines a boolean value (true/false)\n * @constructor Boolean\n * @extends {Literal}\n */\nmodule.exports = Literal.extends(KIND, function Boolean(\n  value,\n  raw,\n  docs,\n  location\n) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"break\";\n\n/**\n * A break statement\n * @constructor Break\n * @extends {Statement}\n * @property {Number|Null} level\n */\nmodule.exports = Statement.extends(KIND, function Break(level, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.level = level;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"byref\";\n\n/**\n * Passing by Reference - so the function can modify the variable\n * @constructor ByRef\n * @extends {Expression}\n * @property {expr} what\n */\nmodule.exports = Expression.extends(KIND, function ByRef(what, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.what = what;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"call\";\n\n/**\n * Executes a call statement\n * @constructor Call\n * @extends {Expression}\n * @property {Identifier|Variable|??} what\n * @property {Arguments[]} arguments\n */\nmodule.exports = Expression.extends(KIND, function Call(\n  what,\n  args,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.what = what;\n  this.arguments = args;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"case\";\n\n/**\n * A switch case statement\n * @constructor Case\n * @extends {Statement}\n * @property {Expression|null} test - if null, means that the default case\n * @property {Block|null} body\n */\nmodule.exports = Statement.extends(KIND, function Case(\n  test,\n  body,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.test = test;\n  this.body = body;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Operation = require(\"./operation\");\nconst KIND = \"cast\";\n\n/**\n * Binary operations\n * @constructor Cast\n * @extends {Operation}\n * @property {String} type\n * @property {String} raw\n * @property {Expression} expr\n */\nmodule.exports = Operation.extends(KIND, function Cast(\n  type,\n  raw,\n  expr,\n  docs,\n  location\n) {\n  Operation.apply(this, [KIND, docs, location]);\n  this.type = type;\n  this.raw = raw;\n  this.expr = expr;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"catch\";\n\n/**\n * Defines a catch statement\n * @constructor Catch\n * @extends {Statement}\n * @property {Identifier[]} what\n * @property {Variable} variable\n * @property {Statement} body\n * @see http://php.net/manual/en/language.exceptions.php\n */\nmodule.exports = Statement.extends(KIND, function Catch(\n  body,\n  what,\n  variable,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.body = body;\n  this.what = what;\n  this.variable = variable;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Declaration = require(\"./declaration\");\nconst KIND = \"class\";\n\n/**\n * A class definition\n * @constructor Class\n * @extends {Declaration}\n * @property {Identifier|null} extends\n * @property {Identifier[]} implements\n * @property {Declaration[]} body\n * @property {boolean} isAnonymous\n * @property {boolean} isAbstract\n * @property {boolean} isFinal\n */\nmodule.exports = Declaration.extends(KIND, function Class(\n  name,\n  ext,\n  impl,\n  body,\n  flags,\n  docs,\n  location\n) {\n  Declaration.apply(this, [KIND, name, docs, location]);\n  this.isAnonymous = name ? false : true;\n  this.extends = ext;\n  this.implements = impl;\n  this.body = body;\n  this.parseFlags(flags);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst ConstantStatement = require(\"./constantstatement\");\nconst KIND = \"classconstant\";\n\nconst IS_UNDEFINED = \"\";\nconst IS_PUBLIC = \"public\";\nconst IS_PROTECTED = \"protected\";\nconst IS_PRIVATE = \"private\";\n\n/**\n * Defines a class/interface/trait constant\n * @constructor ClassConstant\n * @extends {ConstantStatement}\n * @property {string} visibility\n */\nconst ClassConstant = ConstantStatement.extends(KIND, function ClassConstant(\n  kind,\n  constants,\n  flags,\n  docs,\n  location\n) {\n  ConstantStatement.apply(this, [kind || KIND, constants, docs, location]);\n  this.parseFlags(flags);\n});\n\n/**\n * Generic flags parser\n * @param {Integer[]} flags\n * @return {void}\n */\nClassConstant.prototype.parseFlags = function (flags) {\n  if (flags[0] === -1) {\n    this.visibility = IS_UNDEFINED;\n  } else if (flags[0] === null) {\n    this.visibility = null;\n  } else if (flags[0] === 0) {\n    this.visibility = IS_PUBLIC;\n  } else if (flags[0] === 1) {\n    this.visibility = IS_PROTECTED;\n  } else if (flags[0] === 2) {\n    this.visibility = IS_PRIVATE;\n  }\n};\n\nmodule.exports = ClassConstant;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"clone\";\n\n/**\n * Defines a clone call\n * @constructor Clone\n * @extends {Expression}\n * @property {Expression} what\n */\nmodule.exports = Expression.extends(KIND, function Clone(what, docs, location) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.what = what;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"closure\";\n\n/**\n * Defines a closure\n * @constructor Closure\n * @extends {Expression}\n * @property {Parameter[]} arguments\n * @property {Variable[]} uses\n * @property {Identifier} type\n * @property {boolean} byref\n * @property {boolean} nullable\n * @property {Block|null} body\n * @property {boolean} isStatic\n */\nmodule.exports = Expression.extends(KIND, function Closure(\n  args,\n  byref,\n  uses,\n  type,\n  nullable,\n  isStatic,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.uses = uses;\n  this.arguments = args;\n  this.byref = byref;\n  this.type = type;\n  this.nullable = nullable;\n  this.isStatic = isStatic || false;\n  this.body = null;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Comment = require(\"./comment\");\nconst KIND = \"commentblock\";\n\n/**\n * A comment block (multiline)\n * @constructor CommentBlock\n * @extends {Comment}\n */\nmodule.exports = Comment.extends(KIND, function CommentBlock(\n  value,\n  docs,\n  location\n) {\n  Comment.apply(this, [KIND, value, docs, location]);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Comment = require(\"./comment\");\nconst KIND = \"commentline\";\n\n/**\n * A single line comment\n * @constructor CommentLine\n * @extends {Comment}\n */\nmodule.exports = Comment.extends(KIND, function CommentLine(\n  value,\n  docs,\n  location\n) {\n  Comment.apply(this, [KIND, value, docs, location]);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"constant\";\n\n/**\n * Defines a constant\n * @constructor Constant\n * @extends {Node}\n * @property {string} name\n * @property {Node|string|number|boolean|null} value\n */\nmodule.exports = Node.extends(KIND, function Constant(\n  name,\n  value,\n  docs,\n  location\n) {\n  Node.apply(this, [KIND, docs, location]);\n  this.name = name;\n  this.value = value;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"continue\";\n\n/**\n * A continue statement\n * @constructor Continue\n * @extends {Statement}\n * @property {Number|Null} level\n */\nmodule.exports = Statement.extends(KIND, function Continue(\n  level,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.level = level;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Block = require(\"./block\");\nconst KIND = \"declare\";\n\n/**\n * The declare construct is used to set execution directives for a block of code\n * @constructor Declare\n * @extends {Block}\n * @property {Array[]} directives\n * @property {String} mode\n * @see http://php.net/manual/en/control-structures.declare.php\n */\nconst Declare = Block.extends(KIND, function Declare(\n  directives,\n  body,\n  mode,\n  docs,\n  location\n) {\n  Block.apply(this, [KIND, body, docs, location]);\n  this.directives = directives;\n  this.mode = mode;\n});\n\n/**\n * The node is declared as a short tag syntax :\n * ```php\n * <?php\n * declare(ticks=1):\n * // some statements\n * enddeclare;\n * ```\n * @constant {String} MODE_SHORT\n */\nDeclare.MODE_SHORT = \"short\";\n\n/**\n * The node is declared bracket enclosed code :\n * ```php\n * <?php\n * declare(ticks=1) {\n * // some statements\n * }\n * ```\n * @constant {String} MODE_BLOCK\n */\nDeclare.MODE_BLOCK = \"block\";\n\n/**\n * The node is declared as a simple statement. In order to make things simpler\n * children of the node are automatically collected until the next\n * declare statement.\n * ```php\n * <?php\n * declare(ticks=1);\n * // some statements\n * declare(ticks=2);\n * // some statements\n * ```\n * @constant {String} MODE_NONE\n */\nDeclare.MODE_NONE = \"none\";\n\nmodule.exports = Declare;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"declaredirective\";\n\n/**\n * Defines a constant\n * @constructor DeclareDirective\n * @extends {Node}\n * @property {Identifier} name\n * @property {Node|string|number|boolean|null} value\n */\nmodule.exports = Node.extends(KIND, function DeclareDirective(\n  key,\n  value,\n  docs,\n  location\n) {\n  Node.apply(this, [KIND, docs, location]);\n  this.key = key;\n  this.value = value;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"do\";\n\n/**\n * Defines a do/while statement\n * @constructor Do\n * @extends {Statement}\n * @property {Expression} test\n * @property {Statement} body\n */\nmodule.exports = Statement.extends(KIND, function Do(\n  test,\n  body,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.test = test;\n  this.body = body;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"echo\";\n\n/**\n * Defines system based call\n * @constructor Echo\n * @property {boolean} shortForm\n * @extends {Statement}\n */\nmodule.exports = Statement.extends(KIND, function Echo(\n  expressions,\n  shortForm,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.shortForm = shortForm;\n  this.expressions = expressions;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"empty\";\n\n/**\n * Defines an empty check call\n * @constructor Empty\n * @extends {Expression}\n */\nmodule.exports = Expression.extends(KIND, function Empty(\n  expression,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.expression = expression;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"encapsed\";\n\n/**\n * Defines an encapsed string (contains expressions)\n * @constructor Encapsed\n * @extends {Literal}\n * @property {String} type - Defines the type of encapsed string (shell, heredoc, string)\n * @property {String|Null} label - The heredoc label, defined only when the type is heredoc\n */\nconst Encapsed = Literal.extends(KIND, function Encapsed(\n  value,\n  raw,\n  type,\n  docs,\n  location\n) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n  this.type = type;\n});\n\n/**\n * The node is a double quote string :\n * ```php\n * <?php\n * echo \"hello $world\";\n * ```\n * @constant {String} TYPE_STRING - `string`\n */\nEncapsed.TYPE_STRING = \"string\";\n\n/**\n * The node is a shell execute string :\n * ```php\n * <?php\n * echo `ls -larth $path`;\n * ```\n * @constant {String} TYPE_SHELL - `shell`\n */\nEncapsed.TYPE_SHELL = \"shell\";\n\n/**\n * The node is a shell execute string :\n * ```php\n * <?php\n * echo <<<STR\n *  Hello $world\n * STR\n * ;\n * ```\n * @constant {String} TYPE_HEREDOC - `heredoc`\n */\nEncapsed.TYPE_HEREDOC = \"heredoc\";\n\n/**\n * The node contains a list of constref / variables / expr :\n * ```php\n * <?php\n * echo $foo->bar_$baz;\n * ```\n * @constant {String} TYPE_OFFSET - `offset`\n */\nEncapsed.TYPE_OFFSET = \"offset\";\n\nmodule.exports = Encapsed;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"encapsedpart\";\n\n/**\n * Part of `Encapsed` node\n * @constructor EncapsedPart\n * @extends {Expression}\n * @property {Expression} expression\n * @property {String} syntax\n * @property {Boolean} curly\n */\nmodule.exports = Expression.extends(KIND, function EncapsedPart(\n  expression,\n  syntax,\n  curly,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.expression = expression;\n  this.syntax = syntax;\n  this.curly = curly;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"entry\";\n\n/**\n * An array entry - see [Array](#array)\n * @constructor Entry\n * @extends {Expression}\n * @property {Node|null} key The entry key/offset\n * @property {Node} value The entry value\n * @property {Boolean} byRef By reference\n * @property {Boolean} unpack Argument unpacking\n */\nmodule.exports = Expression.extends(KIND, function Entry(\n  key,\n  value,\n  byRef,\n  unpack,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.key = key;\n  this.value = value;\n  this.byRef = byRef;\n  this.unpack = unpack;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"error\";\n\n/**\n * Defines an error node (used only on silentMode)\n * @constructor Error\n * @extends {Node}\n * @property {string} message\n * @property {number} line\n * @property {number|string} token\n * @property {string|array} expected\n */\nmodule.exports = Node.extends(KIND, function Error(\n  message,\n  token,\n  line,\n  expected,\n  docs,\n  location\n) {\n  Node.apply(this, [KIND, docs, location]);\n  this.message = message;\n  this.token = token;\n  this.line = line;\n  this.expected = expected;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"eval\";\n\n/**\n * Defines an eval statement\n * @constructor Eval\n * @extends {Expression}\n * @property {Node} source\n */\nmodule.exports = Expression.extends(KIND, function Eval(\n  source,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.source = source;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"exit\";\n\n/**\n * Defines an exit / die call\n * @constructor Exit\n * @extends {Expression}\n * @property {Node|null} expression\n * @property {Boolean} useDie\n */\nmodule.exports = Expression.extends(KIND, function Exit(\n  expression,\n  useDie,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.expression = expression;\n  this.useDie = useDie;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"expressionstatement\";\n\n/**\n * Defines an expression based statement\n * @constructor ExpressionStatement\n * @extends {Statement}\n * @property {Expression} expression\n */\nmodule.exports = Statement.extends(KIND, function ExpressionStatement(\n  expr,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.expression = expr;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"for\";\n\n/**\n * Defines a for iterator\n * @constructor For\n * @extends {Statement}\n * @property {Expression[]} init\n * @property {Expression[]} test\n * @property {Expression[]} increment\n * @property {Statement} body\n * @property {boolean} shortForm\n * @see http://php.net/manual/en/control-structures.for.php\n */\nmodule.exports = Statement.extends(KIND, function For(\n  init,\n  test,\n  increment,\n  body,\n  shortForm,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.init = init;\n  this.test = test;\n  this.increment = increment;\n  this.shortForm = shortForm;\n  this.body = body;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"foreach\";\n\n/**\n * Defines a foreach iterator\n * @constructor Foreach\n * @extends {Statement}\n * @property {Expression} source\n * @property {Expression|null} key\n * @property {Expression} value\n * @property {Statement} body\n * @property {boolean} shortForm\n * @see http://php.net/manual/en/control-structures.foreach.php\n */\nmodule.exports = Statement.extends(KIND, function Foreach(\n  source,\n  key,\n  value,\n  body,\n  shortForm,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.source = source;\n  this.key = key;\n  this.value = value;\n  this.shortForm = shortForm;\n  this.body = body;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"global\";\n\n/**\n * Imports a variable from the global scope\n * @constructor Global\n * @extends {Statement}\n * @property {Variable[]} items\n */\nmodule.exports = Statement.extends(KIND, function Global(\n  items,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.items = items;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"goto\";\n\n/**\n * Defines goto statement\n * @constructor Goto\n * @extends {Statement}\n * @property {String} label\n * @see {Label}\n */\nmodule.exports = Statement.extends(KIND, function Goto(label, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.label = label;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"halt\";\n\n/**\n * Halts the compiler execution\n * @constructor Halt\n * @extends {Statement}\n * @property {String} after - String after the halt statement\n * @see http://php.net/manual/en/function.halt-compiler.php\n */\nmodule.exports = Statement.extends(KIND, function Halt(after, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.after = after;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"identifier\";\n\n/**\n * Defines an identifier node\n * @constructor Identifier\n * @extends {Node}\n * @property {string} name\n */\nconst Identifier = Node.extends(KIND, function Identifier(\n  name,\n  docs,\n  location\n) {\n  Node.apply(this, [KIND, docs, location]);\n  this.name = name;\n});\n\nmodule.exports = Identifier;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"if\";\n\n/**\n * Defines a if statement\n * @constructor If\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block} body\n * @property {Block|If|null} alternate\n * @property {boolean} shortForm\n */\nmodule.exports = Statement.extends(KIND, function If(\n  test,\n  body,\n  alternate,\n  shortForm,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.test = test;\n  this.body = body;\n  this.alternate = alternate;\n  this.shortForm = shortForm;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"include\";\n\n/**\n * Defines system include call\n * @constructor Include\n * @extends {Expression}\n * @property {Node} target\n * @property {boolean} once\n * @property {boolean} require\n */\nmodule.exports = Expression.extends(KIND, function Include(\n  once,\n  require,\n  target,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.once = once;\n  this.require = require;\n  this.target = target;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"inline\";\n\n/**\n * Defines inline html output (treated as echo output)\n * @constructor Inline\n * @extends {Literal}\n */\nmodule.exports = Literal.extends(KIND, function Inline(\n  value,\n  raw,\n  docs,\n  location\n) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Declaration = require(\"./declaration\");\nconst KIND = \"interface\";\n\n/**\n * An interface definition\n * @constructor Interface\n * @extends {Declaration}\n * @property {Identifier[]} extends\n * @property {Declaration[]} body\n */\nmodule.exports = Declaration.extends(KIND, function Interface(\n  name,\n  ext,\n  body,\n  docs,\n  location\n) {\n  Declaration.apply(this, [KIND, name, docs, location]);\n  this.extends = ext;\n  this.body = body;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"isset\";\n\n/**\n * Defines an isset call\n * @constructor Isset\n * @extends {Expression}\n */\nmodule.exports = Expression.extends(KIND, function Isset(\n  variables,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.variables = variables;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"label\";\n\n/**\n * A label statement (referenced by goto)\n * @constructor Label\n * @extends {Statement}\n * @property {String} name\n */\nmodule.exports = Statement.extends(KIND, function Label(name, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.name = name;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"list\";\n\n/**\n * Defines list assignment\n * @constructor List\n * @extends {Expression}\n * @property {boolean} shortForm\n */\nmodule.exports = Expression.extends(KIND, function List(\n  items,\n  shortForm,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.items = items;\n  this.shortForm = shortForm;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"magic\";\n\n/**\n * Defines magic constant\n * @constructor Magic\n * @extends {Literal}\n */\nmodule.exports = Literal.extends(KIND, function Magic(\n  value,\n  raw,\n  docs,\n  location\n) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst _Function = require(\"./function\");\nconst KIND = \"method\";\n\n/**\n * Defines a class/interface/trait method\n * @constructor Method\n * @extends {_Function}\n * @property {boolean} isAbstract\n * @property {boolean} isFinal\n * @property {boolean} isStatic\n * @property {string} visibility\n */\nmodule.exports = _Function.extends(KIND, function Method() {\n  _Function.apply(this, arguments);\n  this.kind = KIND;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Reference = require(\"./reference\");\nconst KIND = \"name\";\n\n/**\n * Defines a class reference node\n * @constructor Name\n * @extends {Reference}\n * @property {string} name\n * @property {string} resolution\n */\nconst Name = Reference.extends(KIND, function Name(\n  name,\n  isRelative,\n  docs,\n  location\n) {\n  Reference.apply(this, [KIND, docs, location]);\n  if (isRelative) {\n    this.resolution = Name.RELATIVE_NAME;\n  } else if (name.length === 1) {\n    this.resolution = Name.UNQUALIFIED_NAME;\n  } else if (!name[0]) {\n    this.resolution = Name.FULL_QUALIFIED_NAME;\n  } else {\n    this.resolution = Name.QUALIFIED_NAME;\n  }\n  this.name = name.join(\"\\\\\");\n});\n\n/**\n * This is an identifier without a namespace separator, such as Foo\n * @constant {String} UNQUALIFIED_NAME\n */\nName.UNQUALIFIED_NAME = \"uqn\";\n/**\n * This is an identifier with a namespace separator, such as Foo\\Bar\n * @constant {String} QUALIFIED_NAME\n */\nName.QUALIFIED_NAME = \"qn\";\n/**\n * This is an identifier with a namespace separator that begins with\n * a namespace separator, such as \\Foo\\Bar. The namespace \\Foo is also\n * a fully qualified name.\n * @constant {String} FULL_QUALIFIED_NAME\n */\nName.FULL_QUALIFIED_NAME = \"fqn\";\n/**\n * This is an identifier starting with namespace, such as namespace\\Foo\\Bar.\n * @constant {String} RELATIVE_NAME\n */\nName.RELATIVE_NAME = \"rn\";\n\nmodule.exports = Name;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Block = require(\"./block\");\nconst KIND = \"namespace\";\n\n/**\n * The main program node\n * @constructor Namespace\n * @extends {Block}\n * @property {String} name\n * @property {Boolean} withBrackets\n */\nmodule.exports = Block.extends(KIND, function Namespace(\n  name,\n  children,\n  withBrackets,\n  docs,\n  location\n) {\n  Block.apply(this, [KIND, children, docs, location]);\n  this.name = name;\n  this.withBrackets = withBrackets || false;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"new\";\n\n/**\n * Creates a new instance of the specified class\n * @constructor New\n * @extends {Expression}\n * @property {Identifier|Variable|Class} what\n * @property {Arguments[]} arguments\n */\nmodule.exports = Expression.extends(KIND, function New(\n  what,\n  args,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.what = what;\n  this.arguments = args;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"noop\";\n\n/**\n * Ignore this node, it implies a no operation block, for example :\n * [$foo, $bar, /* here a noop node * /]\n * @constructor Noop\n * @extends {Node}\n */\nmodule.exports = Node.extends(KIND, function Noop(docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"nowdoc\";\n\n/**\n * Defines a nowdoc string\n * @constructor NowDoc\n * @extends {Literal}\n * @property {String} label\n * @property {String} raw\n */\nmodule.exports = Literal.extends(KIND, function Nowdoc(\n  value,\n  raw,\n  label,\n  docs,\n  location\n) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n  this.label = label;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"nullkeyword\";\n\n/**\n * Represents the null keyword\n * @constructor NullKeyword\n * @extends {Node}\n */\nmodule.exports = Node.extends(KIND, function NullKeyword(raw, docs, location) {\n  Node.apply(this, [KIND, docs, location]);\n  this.raw = raw;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"number\";\n\n/**\n * Defines a numeric value\n * @constructor Number\n * @extends {Literal}\n */\nmodule.exports = Literal.extends(KIND, function Number(\n  value,\n  raw,\n  docs,\n  location\n) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Lookup = require(\"./lookup\");\nconst KIND = \"offsetlookup\";\n\n/**\n * Lookup on an offset in an array\n * @constructor OffsetLookup\n * @extends {Lookup}\n */\nmodule.exports = Lookup.extends(KIND, function OffsetLookup(\n  what,\n  offset,\n  docs,\n  location\n) {\n  Lookup.apply(this, [KIND, what, offset, docs, location]);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Declaration = require(\"./declaration\");\nconst KIND = \"parameter\";\n\n/**\n * Defines a function parameter\n * @constructor Parameter\n * @extends {Declaration}\n * @property {Identifier|null} type\n * @property {Node|null} value\n * @property {boolean} byref\n * @property {boolean} variadic\n * @property {boolean} nullable\n */\nmodule.exports = Declaration.extends(KIND, function Parameter(\n  name,\n  type,\n  value,\n  isRef,\n  isVariadic,\n  nullable,\n  docs,\n  location\n) {\n  Declaration.apply(this, [KIND, name, docs, location]);\n  this.value = value;\n  this.type = type;\n  this.byref = isRef;\n  this.variadic = isVariadic;\n  this.nullable = nullable;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Reference = require(\"./reference\");\nconst KIND = \"parentreference\";\n\n/**\n * Defines a class reference node\n * @constructor ParentReference\n * @extends {Reference}\n */\nconst ParentReference = Reference.extends(KIND, function ParentReference(\n  raw,\n  docs,\n  location\n) {\n  Reference.apply(this, [KIND, docs, location]);\n  this.raw = raw;\n});\nmodule.exports = ParentReference;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Operation = require(\"./operation\");\nconst KIND = \"post\";\n\n/**\n * Defines a post operation `$i++` or `$i--`\n * @constructor Post\n * @extends {Operation}\n * @property {String} type\n * @property {Variable} what\n */\nmodule.exports = Operation.extends(KIND, function Post(\n  type,\n  what,\n  docs,\n  location\n) {\n  Operation.apply(this, [KIND, docs, location]);\n  this.type = type;\n  this.what = what;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Operation = require(\"./operation\");\nconst KIND = \"pre\";\n\n/**\n * Defines a pre operation `++$i` or `--$i`\n * @constructor Pre\n * @extends {Operation}\n * @property {String} type\n * @property {Variable} what\n */\nmodule.exports = Operation.extends(KIND, function Pre(\n  type,\n  what,\n  docs,\n  location\n) {\n  Operation.apply(this, [KIND, docs, location]);\n  this.type = type;\n  this.what = what;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"print\";\n\n/**\n * Outputs\n * @constructor Print\n * @extends {Expression}\n */\nmodule.exports = Expression.extends(KIND, function Print(\n  expression,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.expression = expression;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Block = require(\"./block\");\nconst KIND = \"program\";\n\n/**\n * The main program node\n * @constructor Program\n * @extends {Block}\n * @property {Error[]} errors\n * @property {Doc[]?} comments\n * @property {String[]?} tokens\n */\nmodule.exports = Block.extends(KIND, function Program(\n  children,\n  errors,\n  comments,\n  tokens,\n  docs,\n  location\n) {\n  Block.apply(this, [KIND, children, docs, location]);\n  this.errors = errors;\n  if (comments) {\n    this.comments = comments;\n  }\n  if (tokens) {\n    this.tokens = tokens;\n  }\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"property\";\n\n/**\n * Defines a class property\n * @constructor Property\n * @extends {Statement}\n * @property {string} name\n * @property {Node|null} value\n * @property {boolean} nullable\n * @property {Identifier|Array<Identifier>|null} type\n */\nmodule.exports = Statement.extends(KIND, function Property(\n  name,\n  value,\n  nullable,\n  type,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.name = name;\n  this.value = value;\n  this.nullable = nullable;\n  this.type = type;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Lookup = require(\"./lookup\");\nconst KIND = \"propertylookup\";\n\n/**\n * Lookup to an object property\n * @constructor PropertyLookup\n * @extends {Lookup}\n */\nmodule.exports = Lookup.extends(KIND, function PropertyLookup(\n  what,\n  offset,\n  docs,\n  location\n) {\n  Lookup.apply(this, [KIND, what, offset, docs, location]);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"propertystatement\";\n\nconst IS_UNDEFINED = \"\";\nconst IS_PUBLIC = \"public\";\nconst IS_PROTECTED = \"protected\";\nconst IS_PRIVATE = \"private\";\n\n/**\n * Declares a properties into the current scope\n * @constructor PropertyStatement\n * @extends {Statement}\n * @property {Property[]} properties\n */\nconst PropertyStatement = Statement.extends(KIND, function PropertyStatement(\n  kind,\n  properties,\n  flags,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.properties = properties;\n  this.parseFlags(flags);\n});\n\n/**\n * Generic flags parser\n * @param {Integer[]} flags\n * @return {void}\n */\nPropertyStatement.prototype.parseFlags = function (flags) {\n  if (flags[0] === -1) {\n    this.visibility = IS_UNDEFINED;\n  } else if (flags[0] === null) {\n    this.visibility = null;\n  } else if (flags[0] === 0) {\n    this.visibility = IS_PUBLIC;\n  } else if (flags[0] === 1) {\n    this.visibility = IS_PROTECTED;\n  } else if (flags[0] === 2) {\n    this.visibility = IS_PRIVATE;\n  }\n\n  this.isStatic = flags[1] === 1;\n};\n\nmodule.exports = PropertyStatement;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"retif\";\n\n/**\n * Defines a short if statement that returns a value\n * @constructor RetIf\n * @extends {Expression}\n * @property {Expression} test\n * @property {Expression} trueExpr\n * @property {Expression} falseExpr\n */\nmodule.exports = Expression.extends(KIND, function RetIf(\n  test,\n  trueExpr,\n  falseExpr,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.test = test;\n  this.trueExpr = trueExpr;\n  this.falseExpr = falseExpr;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"return\";\n\n/**\n * A continue statement\n * @constructor Return\n * @extends {Statement}\n * @property {Expression|null} expr\n */\nmodule.exports = Statement.extends(KIND, function Return(expr, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.expr = expr;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Reference = require(\"./reference\");\nconst KIND = \"selfreference\";\n\n/**\n * Defines a class reference node\n * @constructor SelfReference\n * @extends {Reference}\n */\nconst SelfReference = Reference.extends(KIND, function SelfReference(\n  raw,\n  docs,\n  location\n) {\n  Reference.apply(this, [KIND, docs, location]);\n  this.raw = raw;\n});\nmodule.exports = SelfReference;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"silent\";\n\n/**\n * Avoids to show/log warnings & notices from the inner expression\n * @constructor Silent\n * @extends {Expression}\n * @property {Expression} expr\n */\nmodule.exports = Expression.extends(KIND, function Silent(\n  expr,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.expr = expr;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"static\";\n\n/**\n * Declares a static variable into the current scope\n * @constructor Static\n * @extends {Statement}\n * @property {StaticVariable[]} variables\n */\nmodule.exports = Statement.extends(KIND, function Static(\n  variables,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.variables = variables;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"staticvariable\";\n\n/**\n * Defines a constant\n * @constructor StaticVariable\n * @extends {Node}\n * @property {Variable} variable\n * @property {Node|string|number|boolean|null} defaultValue\n */\nmodule.exports = Node.extends(KIND, function StaticVariable(\n  variable,\n  defaultValue,\n  docs,\n  location\n) {\n  Node.apply(this, [KIND, docs, location]);\n  this.variable = variable;\n  this.defaultValue = defaultValue;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Lookup = require(\"./lookup\");\nconst KIND = \"staticlookup\";\n\n/**\n * Lookup to a static property\n * @constructor StaticLookup\n * @extends {Lookup}\n */\nmodule.exports = Lookup.extends(KIND, function StaticLookup(\n  what,\n  offset,\n  docs,\n  location\n) {\n  Lookup.apply(this, [KIND, what, offset, docs, location]);\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Reference = require(\"./reference\");\nconst KIND = \"staticreference\";\n\n/**\n * Defines a class reference node\n * @constructor StaticReference\n * @extends {Reference}\n */\nconst StaticReference = Reference.extends(KIND, function StaticReference(\n  raw,\n  docs,\n  location\n) {\n  Reference.apply(this, [KIND, docs, location]);\n  this.raw = raw;\n});\nmodule.exports = StaticReference;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Literal = require(\"./literal\");\nconst KIND = \"string\";\n\n/**\n * Defines a string (simple ou double quoted) - chars are already escaped\n * @constructor String\n * @extends {Literal}\n * @property {boolean} unicode\n * @property {boolean} isDoubleQuote\n * @see {Encapsed}\n */\nmodule.exports = Literal.extends(KIND, function String(\n  isDoubleQuote,\n  value,\n  unicode,\n  raw,\n  docs,\n  location\n) {\n  Literal.apply(this, [KIND, value, raw, docs, location]);\n  this.unicode = unicode;\n  this.isDoubleQuote = isDoubleQuote;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"switch\";\n\n/**\n * Defines a switch statement\n * @constructor Switch\n * @extends {Statement}\n * @property {Expression} test\n * @property {Block} body\n * @property {boolean} shortForm\n */\nmodule.exports = Statement.extends(KIND, function Switch(\n  test,\n  body,\n  shortForm,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.test = test;\n  this.body = body;\n  this.shortForm = shortForm;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"throw\";\n\n/**\n * Defines a throw statement\n * @constructor Throw\n * @extends {Statement}\n * @property {Expression} what\n */\nmodule.exports = Statement.extends(KIND, function Throw(what, docs, location) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.what = what;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Declaration = require(\"./declaration\");\nconst KIND = \"trait\";\n\n/**\n * A trait definition\n * @constructor Trait\n * @extends {Declaration}\n * @property {Declaration[]} body\n */\nmodule.exports = Declaration.extends(KIND, function Trait(\n  name,\n  body,\n  docs,\n  location\n) {\n  Declaration.apply(this, [KIND, name, docs, location]);\n  this.body = body;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"traitalias\";\n\nconst IS_UNDEFINED = \"\";\nconst IS_PUBLIC = \"public\";\nconst IS_PROTECTED = \"protected\";\nconst IS_PRIVATE = \"private\";\n\n/**\n * Defines a trait alias\n * @constructor TraitAlias\n * @extends {Node}\n * @property {Identifier|null} trait\n * @property {Identifier} method\n * @property {Identifier|null} as\n * @property {string|null} visibility\n */\nmodule.exports = Node.extends(KIND, function TraitAlias(\n  trait,\n  method,\n  as,\n  flags,\n  docs,\n  location\n) {\n  Node.apply(this, [KIND, docs, location]);\n  this.trait = trait;\n  this.method = method;\n  this.as = as;\n  this.visibility = IS_UNDEFINED;\n  if (flags) {\n    if (flags[0] === 0) {\n      this.visibility = IS_PUBLIC;\n    } else if (flags[0] === 1) {\n      this.visibility = IS_PROTECTED;\n    } else if (flags[0] === 2) {\n      this.visibility = IS_PRIVATE;\n    }\n  }\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"traitprecedence\";\n\n/**\n * Defines a trait alias\n * @constructor TraitPrecedence\n * @extends {Node}\n * @property {Identifier|null} trait\n * @property {Identifier} method\n * @property {Identifier[]} instead\n */\nmodule.exports = Node.extends(KIND, function TraitPrecedence(\n  trait,\n  method,\n  instead,\n  docs,\n  location\n) {\n  Node.apply(this, [KIND, docs, location]);\n  this.trait = trait;\n  this.method = method;\n  this.instead = instead;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Node = require(\"./node\");\nconst KIND = \"traituse\";\n\n/**\n * Defines a trait usage\n * @constructor TraitUse\n * @extends {Node}\n * @property {Identifier[]} traits\n * @property {Node[]|null} adaptations\n */\nmodule.exports = Node.extends(KIND, function TraitUse(\n  traits,\n  adaptations,\n  docs,\n  location\n) {\n  Node.apply(this, [KIND, docs, location]);\n  this.traits = traits;\n  this.adaptations = adaptations;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"try\";\n\n/**\n * Defines a try statement\n * @constructor Try\n * @extends {Statement}\n * @property {Block} body\n * @property {Catch[]} catches\n * @property {Block} allways\n */\nmodule.exports = Statement.extends(KIND, function Try(\n  body,\n  catches,\n  always,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.body = body;\n  this.catches = catches;\n  this.always = always;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Reference = require(\"./reference\");\nconst KIND = \"typereference\";\n\n/**\n * Defines a class reference node\n * @constructor TypeReference\n * @extends {Reference}\n * @property {string} name\n */\nconst TypeReference = Reference.extends(KIND, function TypeReference(\n  name,\n  raw,\n  docs,\n  location\n) {\n  Reference.apply(this, [KIND, docs, location]);\n  this.name = name;\n  this.raw = raw;\n});\n\nTypeReference.types = [\n  \"int\",\n  \"float\",\n  \"string\",\n  \"bool\",\n  \"object\",\n  \"array\",\n  \"callable\",\n  \"iterable\",\n  \"void\",\n];\n\nmodule.exports = TypeReference;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Operation = require(\"./operation\");\nconst KIND = \"unary\";\n\n/**\n * Unary operations\n * @constructor Unary\n * @extends {Operation}\n * @property {String} type\n * @property {Expression} what\n */\nmodule.exports = Operation.extends(KIND, function Unary(\n  type,\n  what,\n  docs,\n  location\n) {\n  Operation.apply(this, [KIND, docs, location]);\n  this.type = type;\n  this.what = what;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"unset\";\n\n/**\n * Deletes references to a list of variables\n * @constructor Unset\n * @extends {Statement}\n */\nmodule.exports = Statement.extends(KIND, function Unset(\n  variables,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.variables = variables;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"usegroup\";\n\n/**\n * Defines a use statement (with a list of use items)\n * @constructor UseGroup\n * @extends {Statement}\n * @property {String|null} name\n * @property {String|null} type - Possible value : function, const\n * @property {UseItem[]} item\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\nmodule.exports = Statement.extends(KIND, function UseGroup(\n  name,\n  type,\n  items,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.name = name;\n  this.type = type;\n  this.items = items;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"useitem\";\n\n/**\n * Defines a use statement (from namespace)\n * @constructor UseItem\n * @extends {Statement}\n * @property {String} name\n * @property {String|null} type - Possible value : function, const\n * @property {Identifier|null} alias\n * @see {Namespace}\n * @see http://php.net/manual/en/language.namespaces.importing.php\n */\nconst UseItem = Statement.extends(KIND, function UseItem(\n  name,\n  alias,\n  type,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.name = name;\n  this.alias = alias;\n  this.type = type;\n});\n\n/**\n * Importing a constant\n * @constant {String} TYPE_CONST\n */\nUseItem.TYPE_CONST = \"const\";\n/**\n * Importing a function\n * @constant {String} TYPE_FUNC\n */\nUseItem.TYPE_FUNCTION = \"function\";\n\nmodule.exports = UseItem;\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"variable\";\n\n/**\n * Any expression node. Since the left-hand side of an assignment may\n * be any expression in general, an expression can also be a pattern.\n * @constructor Variable\n * @extends {Expression}\n * @example\n * // PHP code :\n * $foo\n * // AST output\n * {\n *  \"kind\": \"variable\",\n *  \"name\": \"foo\",\n *  \"curly\": false\n * }\n * @property {String|Node} name The variable name (can be a complex expression when the name is resolved dynamically)\n * @property {boolean} curly Indicate if the name is defined between curlies, ex `${foo}`\n */\nmodule.exports = Expression.extends(KIND, function Variable(\n  name,\n  curly,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.name = name;\n  this.curly = curly || false;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"variadic\";\n\n/**\n * Introduce a list of items into the arguments of the call\n * @constructor variadic\n * @extends {Expression}\n * @property {Array|Expression} what\n * @see https://wiki.php.net/rfc/argument_unpacking\n */\nmodule.exports = Expression.extends(KIND, function variadic(\n  what,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.what = what;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Statement = require(\"./statement\");\nconst KIND = \"while\";\n\n/**\n * Defines a while statement\n * @constructor While\n * @extends {Statement}\n * @property {Expression} test\n * @property {Statement} body\n * @property {boolean} shortForm\n */\nmodule.exports = Statement.extends(KIND, function While(\n  test,\n  body,\n  shortForm,\n  docs,\n  location\n) {\n  Statement.apply(this, [KIND, docs, location]);\n  this.test = test;\n  this.body = body;\n  this.shortForm = shortForm;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"yield\";\n\n/**\n * Defines a yield generator statement\n * @constructor Yield\n * @extends {Expression}\n * @property {Expression|Null} value\n * @property {Expression|Null} key\n * @see http://php.net/manual/en/language.generators.syntax.php\n */\nmodule.exports = Expression.extends(KIND, function Yield(\n  value,\n  key,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.value = value;\n  this.key = key;\n});\n","/**\n * Copyright (C) 2018 Glayzzle (BSD3 License)\n * @authors https://github.com/glayzzle/php-parser/graphs/contributors\n * @url http://glayzzle.com\n */\n\"use strict\";\n\nconst Expression = require(\"./expression\");\nconst KIND = \"yieldfrom\";\n\n/**\n * Defines a yield from generator statement\n * @constructor YieldFrom\n * @extends {Expression}\n * @property {Expression} value\n * @see http://php.net/manual/en/language.generators.syntax.php\n */\nmodule.exports = Expression.extends(KIND, function YieldFrom(\n  value,\n  docs,\n  location\n) {\n  Expression.apply(this, [KIND, docs, location]);\n  this.value = value;\n});\n","import { workspace } from \"vscode\";\nimport { isArray, isUndefined } from \"util\";\n\nexport function activeWorkspace(): any {\n  if (!(workspace.workspaceFolders instanceof Array)) {\n    return;\n  }\n\n  if (workspace.workspaceFolders.length === 0) {\n    return;\n  }\n\n  return workspace.workspaceFolders[0];\n}\n\nexport function path(path: string): string {\n  let workspace = activeWorkspace();\n\n  if (\"uri\" in workspace) {\n    return workspace.uri.fsPath + \"/\" + path;\n  }\n\n  return \"\";\n}\n\nexport function phpParserTokens(document: string) {\n  const engine = require(\"php-parser\");\n\n  const parser = new engine({\n    parser: {\n      extractDoc: true,\n      php7: true,\n    },\n    ast: {\n      withPositions: true,\n    },\n  });\n\n  return parser\n    .tokenGetAll(document)\n    .filter((token: Array<any>) => {\n      return (\n        token[0] !== \"T_WHITESPACE\" &&\n        token[0] !== \"T_COMMENT\" &&\n        token[0] !== \"T_INLINE_HTML\"\n      );\n    })\n    .map((token: Array<any>, index: number) => {\n      if (isArray(token)) {\n        return [...token, index];\n      }\n\n      return token;\n    });\n}\n\nexport function getDefaultModelNamespace() {\n  let modelNamespace: string | undefined = workspace\n    .getConfiguration(\"LaravelIntellisense\")\n    .get(\"model\");\n\n  if (isUndefined(modelNamespace)) {\n    return null;\n  }\n\n  if (!modelNamespace.endsWith(\"\\\\\")) {\n    modelNamespace += \"\\\\\";\n  }\n\n  return modelNamespace;\n}\n","import * as fs from \"fs\";\nimport { path } from \"./utils\";\n\nexport const DOCUMENT_SELECTOR = [\n  { scheme: \"file\", language: \"php\" },\n  { scheme: \"untitled\", language: \"php\" },\n  { scheme: \"file\", language: \"blade\" },\n  { scheme: \"file\", language: \"laravel-blade\" },\n];\n\nexport const TRIGGER_CHARACTERS = ['\"', \"'\", \">\"];\n\nexport function hasArtisan(): boolean {\n  return fs.existsSync(path(\"artisan\"));\n}\n\nexport function hasAutoload(): boolean {\n  return fs.existsSync(path(\"vendor/autoload.php\"));\n}\n\nexport function hasBootstrapApp(): boolean {\n  return fs.existsSync(path(\"bootstrap/app.php\"));\n}\n","import { path } from \"./../utils\";\nimport * as cp from \"child_process\";\nimport * as os from \"os\";\nimport { hasAutoload, hasBootstrapApp } from \"./../laravel\";\nimport { workspace } from \"vscode\";\n\nexport default class PHP {\n  static phpParser: any = null;\n\n  static running: boolean = false;\n\n  static async run(code: string): Promise<string> {\n    if (hasAutoload() && hasBootstrapApp()) {\n      var script = this.getScript(code);\n\n      var out: string | null | RegExpExecArray = await this.execute(script);\n\n      out = /___OUTPUT___(.*)___END_OUTPUT___/g.exec(out);\n\n      if (out) {\n        return out[1];\n      }\n    }\n\n    return \"\";\n  }\n\n  static async execute(code: string): Promise<string> {\n    if (this.running) {\n      return \"\";\n    }\n\n    this.running = true;\n\n    code = code.replace(/\\\"/g, '\\\\\"');\n\n    if (\n      [\"linux\", \"openbsd\", \"sunos\", \"darwin\"].some((unixPlatforms) =>\n        os.platform().includes(unixPlatforms)\n      )\n    ) {\n      code = code.replace(/\\$/g, \"\\\\$\");\n      code = code.replace(/\\\\\\\\'/g, \"\\\\\\\\\\\\\\\\'\");\n      code = code.replace(/\\\\\\\\\"/g, '\\\\\\\\\\\\\\\\\"');\n    }\n\n    var command = this.getCommand() + '\"' + code + '\"';\n\n    return new Promise<string>((resolve, error) => {\n      cp.exec(command, (err, stdout, stderr) => {\n        this.running = false;\n\n        if (stdout.length > 0) {\n          resolve(stdout);\n        } else {\n          console.error(err);\n          error(stderr);\n        }\n      });\n    });\n  }\n\n  static getScript(code: string): string {\n    return (\n      \"define('LARAVEL_START', microtime(true));\" +\n      \"require_once '\" +\n      this.filePath(\"vendor/autoload.php\") +\n      \"';\" +\n      \"$app = require_once '\" +\n      this.filePath(\"bootstrap/app.php\") +\n      \"';\" +\n      \"$kernel = $app->make(Illuminate\\\\Contracts\\\\Console\\\\Kernel::class);\" +\n      \"$status = $kernel->handle(\" +\n      \"$input = new Symfony\\\\Component\\\\Console\\\\Input\\\\ArgvInput,\" +\n      \"new Symfony\\\\Component\\\\Console\\\\Output\\\\ConsoleOutput\" +\n      \");\" +\n      \"echo '___OUTPUT___';\" + code + \"echo '___END_OUTPUT___';\"\n    );\n  }\n\n  static getCommand() {\n    if (this.isDocker()) {\n      return this.getDockerscript() + \" php -r\";\n    }\n\n    return \"php -r\";\n  }\n\n  static filePath(file: string) {\n    if (this.isDocker()) {\n      return `./${file}`;\n    }\n\n    return path(file);\n  }\n\n  static isDocker(): boolean {\n    return !!this.getDockerscript();\n  }\n\n  static getDockerscript(): string | undefined {\n    return workspace.getConfiguration(\"LaravelIntellisense\").get(\"docker\");\n  }\n}\n","import { isUndefined, isNull, isString } from \"util\";\nimport { getDefaultModelNamespace } from \"../utils\";\n\nexport default class ModelParser {\n  tokens: Array<any>;\n\n  aliasToken: Array<any> = [];\n\n  constructor(tokens: Array<any>, aliasToken: Array<any>) {\n    this.tokens = tokens;\n\n    this.aliasToken = aliasToken;\n  }\n\n  getFullClassName() {\n    const className = this.getClassNameFromToken();\n\n    if (isNull(className)) {\n      return null;\n    }\n\n    const namespace = this.getUseClasses().find((namespace: string) => {\n      return namespace.endsWith(className);\n    });\n\n    if (className.includes(\"\\\\\")) {\n      return className;\n    }\n\n    if (isUndefined(namespace)) {\n      const modelDefaultNamespace = getDefaultModelNamespace();\n\n      return modelDefaultNamespace + className;\n    }\n\n    return namespace;\n  }\n\n  getUseClasses() {\n    let uses: Array<any> = [];\n\n    for (let i = 0; i < this.tokens.length; i++) {\n      if (this.tokens[i][0] === \"T_USE\") {\n        let use: Array<any> = [];\n\n        for (let j = i + 1; j < this.tokens.length; j++) {\n          if (this.tokens[j] === \";\") {\n            break;\n          }\n\n          use.push(this.tokens[j]);\n        }\n\n        uses.push(this.joinClassNameFromTokens(use));\n      }\n    }\n\n    return uses;\n  }\n\n  getUsedVariableTokenOrClassName(\n    aliasToken: Array<any> = []\n  ): Array<any> | null | string {\n    let classNameTokens: Array<any> = [];\n\n    let hasVariable = true;\n\n    let usedVariableToken: any = [];\n\n    if (aliasToken.length === 0) {\n      aliasToken = this.aliasToken;\n    }\n\n    if (isUndefined(aliasToken) || aliasToken.length < 3) {\n      return null;\n    }\n\n    const tokens = this.tokens.slice(0, aliasToken[3]).reverse();\n\n    for (let j = 0; j < tokens.length; j++) {\n      if (\n        tokens[j][0] === \"T_VARIABLE\" &&\n        (tokens[j + 1] === \"{\" ||\n          tokens[j + 1] === \";\" ||\n          tokens[j + 1] === \")\" ||\n          tokens[j + 1] === \"=\")\n      ) {\n        usedVariableToken = tokens[j];\n\n        hasVariable = true;\n        break;\n      }\n\n      if (tokens[j][0] === \"T_DOUBLE_COLON\") {\n        const checkForDoubleColon = this.checkIfTheDoubleColonIsCorrect(\n          j,\n          tokens\n        );\n\n        if (checkForDoubleColon.isCorrectDoubleColon) {\n          classNameTokens = checkForDoubleColon.classNameTokens;\n\n          hasVariable = false;\n          break;\n        }\n      }\n    }\n\n    if (!hasVariable) {\n      return this.joinClassNameFromTokens(classNameTokens.reverse());\n    }\n\n    return usedVariableToken;\n  }\n\n  checkIfTheDoubleColonIsCorrect(\n    indexForDoubleColon: number,\n    tokens: Array<any>\n  ) {\n    let classNameTokens: Array<any> = [];\n\n    let isCorrectDoubleColon: boolean = false;\n\n    const tokensFromDoubleColon = tokens.slice(indexForDoubleColon + 1);\n\n    for (let i = 0; i < tokensFromDoubleColon.length; i++) {\n      if (\n        tokensFromDoubleColon[i][0] === \"T_STRING\" ||\n        tokensFromDoubleColon[i][0] === \"T_NS_SEPARATOR\"\n      ) {\n        classNameTokens.push(tokensFromDoubleColon[i]);\n      }\n\n      if (\n        tokensFromDoubleColon[i][0] !== \"T_STRING\" &&\n        tokensFromDoubleColon[i][0] !== \"T_NS_SEPARATOR\" &&\n        ((tokensFromDoubleColon[i][0] === \"(\" &&\n          tokensFromDoubleColon[i + 1][0] === \"T_FUNCTION\") ||\n          tokensFromDoubleColon[i][0] === \"=\" ||\n          tokensFromDoubleColon[i][0] === \"{\" ||\n          tokensFromDoubleColon[i][0] === \")\" ||\n          tokensFromDoubleColon[i][0] === \";\" ||\n          tokensFromDoubleColon[i][0] === \"T_OPEN_TAG\")\n      ) {\n        isCorrectDoubleColon = true;\n      }\n\n      if (\n        tokensFromDoubleColon[i][0] !== \"T_STRING\" &&\n        tokensFromDoubleColon[i][0] !== \"T_OBJECT_OPERATOR\" &&\n        tokensFromDoubleColon[i][0] !== \"T_NS_SEPARATOR\"\n      ) {\n        break;\n      }\n    }\n\n    return {\n      isCorrectDoubleColon,\n      classNameTokens,\n    };\n  }\n\n  getUsedVariableFirstIndexOrClassName(\n    parentTokens: Array<any> = [],\n    aliasToken: Array<any> = []\n  ): any {\n    if (parentTokens.length === 0) {\n      parentTokens = this.tokens;\n    }\n\n    if (aliasToken.length === 0) {\n      aliasToken = this.aliasToken;\n    }\n\n    const usedVariableTokenOrClassName = this.getUsedVariableTokenOrClassName(\n      aliasToken\n    );\n\n    if (isNull(usedVariableTokenOrClassName)) {\n      return null;\n    }\n\n    if (isString(usedVariableTokenOrClassName)) {\n      return usedVariableTokenOrClassName;\n    }\n\n    let isInsideFunctionParams: boolean = false;\n\n    const tokens: Array<any> = parentTokens.slice(0, aliasToken[3]).reverse();\n\n    let variableToken: Array<any> | string = [];\n\n    for (const token of tokens) {\n      if (\n        token[0] === \"T_VARIABLE\" &&\n        token[1] === usedVariableTokenOrClassName[1]\n      ) {\n        const firstVariableToken = this.getFirstVariableToken(token);\n\n        if (isString(firstVariableToken)) {\n          variableToken = firstVariableToken;\n\n          break;\n        }\n\n        if (firstVariableToken.variableToken.length > 0) {\n          variableToken = firstVariableToken.variableToken;\n          isInsideFunctionParams = firstVariableToken.isInsideFunctionParams;\n\n          break;\n        }\n      }\n    }\n\n    if (isString(variableToken)) {\n      return variableToken;\n    }\n\n    if (variableToken.length === 0) {\n      return null;\n    }\n\n    return {\n      variableToken,\n      isInsideFunctionParams,\n    };\n  }\n\n  getFirstVariableToken(variableToken: any): any {\n    const tokens = this.tokens.slice(0, variableToken[3]).reverse();\n\n    let hasDependency: boolean = false;\n\n    let hasFunction: boolean = false;\n\n    for (const token of tokens) {\n      if (token[0] === \"T_STRING\") {\n        hasDependency = true;\n        break;\n      }\n\n      if (token[0] === \"T_FUNCTION\") {\n        hasFunction = true;\n        break;\n      }\n\n      if (token === \";\" || token === \"{\" || token === \")\") {\n        break;\n      }\n    }\n\n    if (hasDependency) {\n      return {\n        variableToken,\n        isInsideFunctionParams: true,\n      };\n    }\n\n    if (!hasFunction) {\n      return {\n        variableToken: [],\n        isInsideFunctionParams: false,\n      };\n    }\n\n    return this.getUsedVariableFirstIndexOrClassName(\n      tokens.reverse(),\n      variableToken\n    );\n  }\n\n  getClassNameFromToken(\n    parentTokens: Array<any> = [],\n    aliasToken: Array<any> = []\n  ): string | null {\n    const variableFirstIndexOrClassName = this.getUsedVariableFirstIndexOrClassName(\n      parentTokens,\n      aliasToken\n    );\n\n    if (isString(variableFirstIndexOrClassName)) {\n      return variableFirstIndexOrClassName;\n    }\n\n    if (isNull(variableFirstIndexOrClassName)) {\n      return null;\n    }\n\n    const variableToken = variableFirstIndexOrClassName.variableToken;\n\n    if (variableFirstIndexOrClassName.isInsideFunctionParams) {\n      return this.getClassNameFromDependencyInjection(variableToken);\n    }\n\n    return this.getClassNameFromEquality(variableToken);\n  }\n\n  getClassNameFromEquality(variableToken: any): string | null {\n    let classNameTokens: Array<any> = [];\n\n    let equalityIndex: number | null = null;\n\n    const tokens = this.tokens.slice(variableToken[3] + 1);\n\n    for (let i = 0; i < tokens.length; i++) {\n      if (tokens[i] === \"=\") {\n        equalityIndex = i;\n\n        break;\n      }\n\n      if (tokens[i][0] !== \"T_WHITESPACE\") {\n        equalityIndex = null;\n\n        break;\n      }\n    }\n\n    if (isNull(equalityIndex)) {\n      return null;\n    }\n\n    const tokensWithEquality = tokens.slice(equalityIndex + 1);\n\n    for (let i = 0; i < tokensWithEquality.length; i++) {\n      if (\n        tokensWithEquality[i][0] === \"T_STRING\" ||\n        tokensWithEquality[i][0] === \"T_NS_SEPARATOR\"\n      ) {\n        classNameTokens.push(tokensWithEquality[i]);\n      }\n\n      if (\n        tokensWithEquality[i][0] !== \"T_STRING\" &&\n        tokensWithEquality[i][0] !== \"T_NS_SEPARATOR\"\n      ) {\n        break;\n      }\n    }\n\n    return this.joinClassNameFromTokens(classNameTokens);\n  }\n\n  getClassNameFromDependencyInjection(variableToken: any): string | null {\n    let classNameTokens: Array<any> = [];\n\n    const tokens = this.tokens.slice(0, variableToken[3]).reverse();\n\n    for (const token of tokens) {\n      if (token[0] === \"T_STRING\" || token[0] === \"T_NS_SEPARATOR\") {\n        classNameTokens.push(token);\n      }\n\n      if (token[0] !== \"T_STRING\" && token[0] !== \"T_NS_SEPARATOR\") {\n        break;\n      }\n    }\n\n    classNameTokens = classNameTokens.reverse();\n\n    if (classNameTokens.length === 0) {\n      return this.getClassNameFromToken(tokens, variableToken);\n    }\n\n    return this.joinClassNameFromTokens(classNameTokens);\n  }\n\n  joinClassNameFromTokens(tokens: Array<any>): string {\n    return tokens\n      .map((token) => {\n        return token[1];\n      })\n      .join(\"\")\n      .trim();\n  }\n}\n","import { getDefaultModelNamespace } from \"../utils\";\nexport default class ResourceParser {\n  tokens: Array<any>;\n\n  aliasToken: Array<any> = [];\n\n  constructor(tokens: Array<any>, aliasToken: Array<any>) {\n    this.tokens = tokens;\n\n    this.aliasToken = aliasToken;\n  }\n\n  getFullClassName() {\n    if (this.aliasToken.length === 0) {\n      return null;\n    }\n\n    const modelNamespace = getDefaultModelNamespace();\n\n    return modelNamespace + this.aliasToken[1].replace(\"Resource\", \"\");\n  }\n}\n","import { Position } from \"vscode\";\nimport { isArray } from \"util\";\n\nexport default class Handler {\n  tokens: Array<any>;\n\n  position: Position;\n\n  aliases: Array<string>;\n\n  constructor(tokens: Array<any>, position: Position, aliases: Array<string>) {\n    this.tokens = tokens;\n\n    this.position = position;\n\n    this.aliases = aliases;\n  }\n\n  getEloquentAliasToken() {\n    return this.getAliasToken();\n  }\n\n  getResourceAliasToken() {\n    let aliasToken: Array<any> = [];\n\n    for (let i = 0; i < this.tokens.length; i++) {\n      if (\n        i > 0 &&\n        this.tokens[i - 1][0] === \"T_CLASS\" &&\n        this.tokens[i][0] === \"T_STRING\" &&\n        this.tokens[i][1].endsWith(\"Resource\")\n      ) {\n        aliasToken = this.tokens[i];\n      }\n\n      if (\n        this.tokens[i] === \"{\" &&\n        this.tokens[i][0] !== \"T_CONSTANT_ENCAPSED_STRING\"\n      ) {\n        break;\n      }\n    }\n\n    const lineTokens = this.tokens\n      .filter((token: Array<any>) => {\n        return token[2] === this.position.line + 1;\n      })\n      .reverse();\n\n    for (let j = 0; j < lineTokens.length; j++) {\n      if (!lineTokens[j][1].includes(\">\")) {\n        break;\n      }\n\n      if (\n        lineTokens[j][0] === \"T_OBJECT_OPERATOR\" &&\n        lineTokens[j + 1][1] === \"$this\" &&\n        lineTokens.length > j + 1\n      ) {\n        break;\n      }\n\n      if (\n        lineTokens[j][0] !== \"T_OBJECT_OPERATOR\" ||\n        (lineTokens[j + 1][1] !== \"T_VARIABLE\" && lineTokens.length > j + 1)\n      ) {\n        return [];\n      }\n    }\n\n    return aliasToken;\n  }\n\n  getFactoryAliasToken() {\n    let aliasToken: Array<any> = [];\n\n    const lineTokens = this.tokens\n      .filter((token: Array<any>) => {\n        return token[2] === this.position.line + 1;\n      })\n      .reverse();\n\n    for (let j = 0; j < lineTokens.length; j++) {\n      if (\n        lineTokens[j][0] === \"T_OBJECT_OPERATOR\" ||\n        lineTokens[j][0] === \"T_DOUBLE_ARROW\"\n      ) {\n        return [];\n      }\n\n      if (j >= 1 && lineTokens[j][0] !== \"T_RETURN\") {\n        return [];\n      }\n    }\n\n    if (lineTokens.length === 0) {\n      return aliasToken;\n    }\n\n    const beforeTokens = this.tokens\n      .slice(0, lineTokens[0][3])\n      .filter((token) => isArray(token))\n      .reverse();\n\n    for (let i = 0; i < beforeTokens.length; i++) {\n      if (\n        beforeTokens.length > i + 3 &&\n        beforeTokens[i + 1][0] === \"T_STRING\" &&\n        beforeTokens[i + 1][1] === \"define\" &&\n        beforeTokens[i + 2][0] === \"T_OBJECT_OPERATOR\" &&\n        beforeTokens[i + 2][1] === \"->\" &&\n        beforeTokens[i + 3][0] === \"T_VARIABLE\" &&\n        beforeTokens[i + 3][1] === \"$factory\"\n      ) {\n        aliasToken = beforeTokens[i];\n        break;\n      }\n    }\n\n    return aliasToken;\n  }\n\n  hasAlias(): boolean {\n    return this.checkForAlias();\n  }\n\n  checkForAlias(): boolean {\n    const tokens = this.tokensOnTheSameLine();\n\n    // Remove TRIGGER_CHARACTERS\n    tokens.shift();\n\n    if (tokens.length === 0) {\n      return false;\n    }\n\n    if (this.aliases.includes(tokens[0][1])) {\n      return true;\n    }\n\n    if (this.aliases.includes(this.tokensToString(tokens))) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getAliasToken(): Array<any> {\n    let aliasToken: Array<any> = [];\n\n    const tokens = this.tokensOnTheSameLine();\n\n    // Remove TRIGGER_CHARACTERS\n    tokens.shift();\n\n    const alias = tokens.shift();\n\n    if (isArray(alias) && this.aliases.includes(alias[1])) {\n      aliasToken = alias;\n    }\n\n    return aliasToken;\n  }\n\n  tokensOnTheSameLine(): Array<any> {\n    return this.tokens\n      .filter((token: Array<any>) => {\n        return token[2] === this.position.line + 1;\n      })\n      .reverse();\n  }\n\n  tokensToString(tokens: Array<string>) {\n    return tokens\n      .map((token) => {\n        return token[1];\n      })\n      .reverse()\n      .join(\"\")\n      .trim();\n  }\n}\n","import { isUndefined, isNull } from \"util\";\n\nexport default class FactoryParser {\n  tokens: Array<any>;\n\n  aliasToken: Array<any> = [];\n\n  constructor(tokens: Array<any>, aliasToken: Array<any>) {\n    this.tokens = tokens;\n\n    this.aliasToken = aliasToken;\n  }\n\n  getFullClassName() {\n    const className = this.getClassNameFromToken();\n\n    if (isNull(className)) {\n      return null;\n    }\n\n    const namespace = this.getUseClasses().find((namespace) => {\n      return namespace.endsWith(className);\n    });\n\n    if (isUndefined(namespace)) {\n      return className;\n    }\n\n    return namespace;\n  }\n\n  getClassNameFromToken() {\n    const tokens = this.tokens.slice(this.aliasToken[3]);\n\n    let classNameTokens: Array<string> = [];\n\n    for (const token of tokens) {\n      if (token[0] === \"T_STRING\" || token[0] === \"T_NS_SEPARATOR\") {\n        classNameTokens.push(token);\n      }\n\n      if (token[0] !== \"T_STRING\" && token[0] !== \"T_NS_SEPARATOR\") {\n        break;\n      }\n    }\n\n    return this.joinClassNameFromTokens(classNameTokens);\n  }\n\n  getUseClasses() {\n    let uses: Array<any> = [];\n\n    for (let i = 0; i < this.tokens.length; i++) {\n      if (this.tokens[i][0] === \"T_USE\") {\n        let use: Array<any> = [];\n        for (let j = i + 1; j < this.tokens.length; j++) {\n          if (this.tokens[j] === \";\") {\n            break;\n          }\n\n          use.push(this.tokens[j]);\n        }\n\n        uses.push(this.joinClassNameFromTokens(use));\n      }\n    }\n\n    return uses;\n  }\n\n  joinClassNameFromTokens(tokens: Array<any>): string {\n    return tokens\n      .map((token) => {\n        return token[1];\n      })\n      .join(\"\")\n      .trim();\n  }\n}\n","import { TextDocument, Position } from \"vscode\";\nimport ModelParser from \"./ModelParser\";\nimport ResourceParser from \"./ResourceParser\";\nimport { phpParserTokens } from \"../utils\";\nimport Handler from \"./Handler\";\nimport FactoryParser from \"./FactoryParser\";\n\nexport default class Parser {\n  cachedParseFunction: any = null;\n\n  viewAliases: Array<string> = [\n    \"view\",\n    \"markdown\",\n    \"links\",\n    \"@extends\",\n    \"@component\",\n    \"@include\",\n    \"@each\",\n  ];\n\n  queryAliases: Array<string> = [\n    \"where\",\n    \"get\",\n    \"firstWhere\",\n    \"value\",\n    \"orWhere\",\n    \"latest\",\n    \"oldest\",\n    \"firstWhere\",\n    \"firstOrFail\",\n    \"pluck\",\n    \"increment\",\n    \"decrement\",\n    \"qualifyColumn\",\n  ];\n\n  configAliases: Array<string> = [\"config\", \"Config::get\"];\n\n  routeAliases: Array<string> = [\"route\"];\n\n  translateAliases: Array<string>  = [\"__\", \"trans\", \"trans_choice\"];\n\n  document: TextDocument;\n\n  position: Position;\n\n  tokens: Array<any> = [];\n\n  constructor(document: TextDocument, position: Position) {\n    this.document = document;\n\n    this.position = position;\n\n    this.tokens = this.parseTokens();\n  }\n\n  parseTokens() {\n    return phpParserTokens(this.document.getText());\n  }\n\n  getClassName() {\n    const handler = new Handler(this.tokens, this.position, this.queryAliases);\n\n    const eloquentAliasToken = handler.getEloquentAliasToken();\n\n    if (eloquentAliasToken.length > 0) {\n      return this.hasModel(eloquentAliasToken);\n    }\n\n    let resourceAliasToken = handler.getResourceAliasToken();\n\n    if (resourceAliasToken.length) {\n      return this.hasResource(resourceAliasToken);\n    }\n\n    const factoryAliasToken = handler.getFactoryAliasToken();\n\n    if (factoryAliasToken.length > 0) {\n      return this.hasFactory(factoryAliasToken);\n    }\n\n    return null;\n  }\n\n  hasModel(aliasToken: Array<any>) {\n    const modelParser = new ModelParser(this.tokens, aliasToken);\n\n    const className = modelParser.getFullClassName();\n\n    return className;\n  }\n\n  hasResource(aliasToken: Array<any>) {\n    const modelParser = new ResourceParser(this.tokens, aliasToken);\n\n    const className = modelParser.getFullClassName();\n\n    return className;\n  }\n\n  hasFactory(aliasToken: Array<any>) {\n    const modelParser = new FactoryParser(this.tokens, aliasToken);\n\n    const className = modelParser.getFullClassName();\n\n    return className;\n  }\n\n  hasConfig() {\n    const handler = new Handler(this.tokens, this.position, this.configAliases);\n\n    return handler.hasAlias();\n  }\n\n  hasRoute() {\n    const handler = new Handler(this.tokens, this.position, this.routeAliases);\n\n    return handler.hasAlias();\n  }\n\n  hasView() {\n    const handler = new Handler(this.tokens, this.position, this.viewAliases);\n\n    return handler.hasAlias();\n  }\n\n  hasTranslation() {\n    const handler = new Handler(this.tokens, this.position, this.translateAliases);\n\n    return handler.hasAlias();\n  }\n}\n","import {\n  TextDocument,\n  CompletionItemProvider,\n  Position,\n  CompletionItem,\n  CompletionItemKind,\n  RelativePattern,\n  workspace,\n} from \"vscode\";\nimport { activeWorkspace } from \"./utils\";\nimport { getViews } from \"./php/view\";\nimport Parser from \"./parser/index\";\nimport { isNull } from \"util\";\n\nexport default class ViewItemProvider implements CompletionItemProvider {\n  private views: any = null;\n\n  private watcher: any = null;\n\n  constructor() {\n    this.syncViews();\n\n    this.watchViews();\n  }\n\n  async provideCompletionItems(\n    document: TextDocument,\n    position: Position\n  ): Promise<Array<CompletionItem>> {\n    let items: Array<CompletionItem> = [];\n\n    let hasView = new Parser(document, position).hasView();\n\n    if (!hasView) {\n      return items;\n    }\n\n    if (isNull(this.views)) {\n      await this.syncViews();\n    }\n\n    for (let view of this.views) {\n      const item = new CompletionItem(view, CompletionItemKind.Constant);\n\n      item.range = document.getWordRangeAtPosition(\n        position,\n        /[\\w\\d\\-_\\.\\:\\\\\\/]+/g\n      );\n\n      items.push(item);\n    }\n\n    return items;\n  }\n\n  syncViews() {\n    getViews().then((views) => {\n      this.views = JSON.parse(views);\n    });\n  }\n\n  watchViews() {\n    this.watcher = workspace.createFileSystemWatcher(\n      new RelativePattern(activeWorkspace(), \"{,**/}{view,views}/{*,**/*}\")\n    );\n\n    this.watcher.onDidCreate(() => this.onChange());\n    this.watcher.onDidDelete(() => this.onChange());\n    this.watcher.onDidChange(() => this.onChange());\n  }\n\n  onChange() {\n    setInterval(() => {\n      this.syncViews();\n    }, 5000);\n  }\n}\n","import PHP from \"./index\";\n\nexport function getViews(): Promise<string> {\n  const script = `function getViewsFromDirectory($directories, $filesystem, $parentDirectory = null){$views = [];foreach ($directories as $directory) {$viewDirectory = basename($directory);if ($parentDirectory) {$viewDirectory = $parentDirectory . '.' . $viewDirectory;}if ($filesystem->directories($directory)) {$childDirectoryViews = getViewsFromDirectory($filesystem->directories($directory), $filesystem, $viewDirectory);if ($childDirectoryViews) {$views[] = $childDirectoryViews;}}foreach ($filesystem->files($directory) as $file) {if (!is_object($file) || !method_exists($file, 'getBaseName')) {continue;}if (strpos($file->getBaseName(), '.blade.php')) {$fileName = str_replace('.blade.php', '', $file->getBaseName());$views[] = $viewDirectory . '.' . $fileName;}}}return $views;}function getViews($path, $filesystem, $parentDirectory = null, $deluminator = '.'){$views = [];foreach ($filesystem->files($path) as $file) {if (!is_object($file) || !method_exists($file, 'getBaseName')) {continue;}if (strpos($file->getBaseName(), '.blade.php')) {$fileName = str_replace('.blade.php', '', $file->getBaseName());$view = '';if ($parentDirectory) {$view = $parentDirectory . $deluminator;}$view .= $fileName;$views = array_merge($views, [$view]);}}return array_merge($views, Illuminate\\\\Support\\\\Arr::flatten(getViewsFromDirectory($filesystem->directories($path), $filesystem)));}$filesystem = new Illuminate\\\\Filesystem\\\\Filesystem;$views = [];foreach (app('view')->getFinder()->getPaths() as $path) {$views = array_merge($views, getViews($path, $filesystem));}foreach (app('view')->getFinder()->getHints() as $namespace => $paths) {foreach ($paths as $path) {$views = array_merge($views, getViews($path, $filesystem, $namespace, '::'));}}echo json_encode($views);`;\n  \n  return PHP.run(script);\n}\n","import * as vscode from \"vscode\";\nimport { getModelAttributes } from \"./php/model\";\nimport Parser from \"./parser/index\";\nimport { isNull } from \"util\";\n\ninterface Attributes {\n  [key: string]: Array<string>;\n}\n\nexport default class ModelItemProvider {\n  private attributes: Attributes = {};\n\n  private model: string | null = \"\";\n\n  async provideCompletionItems(\n    document: vscode.TextDocument,\n    position: vscode.Position\n  ) {\n    let items: Array<vscode.CompletionItem> = [];\n\n    this.model = new Parser(document, position).getClassName();\n\n    if (isNull(this.model)) {\n      return items;\n    }\n\n    if (!this.attributes.hasOwnProperty(this.model)) {\n      await this.syncModel();\n    }\n\n    for (let attribute of this.attributes[this.model]) {\n      const item = new vscode.CompletionItem(\n        attribute,\n        vscode.CompletionItemKind.Constant\n      );\n\n      item.range = document.getWordRangeAtPosition(\n        position,\n        /[\\w\\d\\-_\\.\\:\\\\\\/]+/g\n      );\n\n      items.push(item);\n    }\n\n    return items;\n  }\n\n  async syncModel() {\n    if (isNull(this.model)) {\n      return;\n    }\n\n    const attributes = await getModelAttributes(this.model);\n\n    this.attributes[this.model] = JSON.parse(attributes);\n  }\n}\n","import PHP from \"./index\";\n\nexport function getModelAttributes(model: string) {\n  const script = `$user = ${model}::first();echo json_encode(array_keys($user->getAttributes()));`;\n\n  return PHP.run(script);\n}\n","import * as vscode from \"vscode\";\nimport * as fs from \"fs\";\nimport { path } from \"../utils\";\nimport { IDE_HELPER_CONTENT } from \"./content/ide_helper\";\n\nexport default class LaravelIdeHelper {\n  static content: any = [];\n\n  static workspaceEdit: vscode.WorkspaceEdit = new vscode.WorkspaceEdit();\n\n  static fileName: string = \"_ide_helper.php\";\n\n  static generate() {\n    if (this.exists()) {\n      return;\n    }\n\n    const Uri = this.getFileUri();\n\n    this.workspaceEdit.createFile(Uri, { ignoreIfExists: true });\n\n    vscode.workspace.applyEdit(this.workspaceEdit).then(() => {\n      this.InsertContent(Uri);\n    });\n\n    this.insertToGitignore();\n  }\n\n  static exists() {\n    return fs.existsSync(this.getIdeHelperPath());\n  }\n\n  static InsertContent(Uri: vscode.Uri) {\n    const startOfFile = new vscode.Position(0, 0);\n\n    this.workspaceEdit.insert(Uri, startOfFile, IDE_HELPER_CONTENT);\n\n    vscode.workspace.applyEdit(this.workspaceEdit).then(() => {\n      vscode.window.showInformationMessage(\"Ide helper file was created!\");\n    });\n\n    vscode.workspace.openTextDocument(Uri).then((document) => {\n      document.save();\n    });\n  }\n\n  static insertToGitignore() {\n    const Uri = this.getGitignoreUri();\n\n    let lastLineIndex = 0;\n\n    vscode.workspace.openTextDocument(Uri).then((document) => {\n      if (document.getText().includes(this.fileName)) {\n        return;\n      }\n\n      lastLineIndex = document.lineCount - 1;\n\n      this.workspaceEdit.insert(\n        Uri,\n        new vscode.Position(lastLineIndex, 0),\n        this.fileName\n      );\n\n      vscode.workspace.applyEdit(this.workspaceEdit).then(() => {\n        document.save();\n      });\n    });\n  }\n\n  static getFileUri() {\n    return vscode.Uri.file(this.getIdeHelperPath());\n  }\n\n  static getGitignoreUri() {\n    return vscode.Uri.file(path(\".gitignore\"));\n  }\n\n  static getIdeHelperPath() {\n    return path(this.fileName);\n  }\n}\n","export const IDE_HELPER_CONTENT = `<?php\n// @formatter:off\n\n/**\n * A helper file for Laravel, to provide autocomplete information to your IDE\n * Generated for Laravel 7.9.2 on 2020-05-06 23:44:40.\n *\n * This file should not be included in your code, only analyzed by your IDE!\n *\n * @author Barry vd. Heuvel <barryvdh@gmail.com>\n * @see https://github.com/barryvdh/laravel-ide-helper\n */\n\nnamespace Illuminate\\\\Support\\\\Facades {\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Contracts\\\\Foundation\\\\Application\n     */    class App {\n\n        /**\n         * Get the version number of the application.\n         *\n         * @return string\n         * @static\n         */        public static function version()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->version();\n        }\n\n        /**\n         * Run the given array of bootstrap classes.\n         *\n         * @param string[] $bootstrappers\n         * @return void\n         * @static\n         */        public static function bootstrapWith($bootstrappers)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->bootstrapWith($bootstrappers);\n        }\n\n        /**\n         * Register a callback to run after loading the environment.\n         *\n         * @param \\\\Closure $callback\n         * @return void\n         * @static\n         */        public static function afterLoadingEnvironment($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->afterLoadingEnvironment($callback);\n        }\n\n        /**\n         * Register a callback to run before a bootstrapper.\n         *\n         * @param string $bootstrapper\n         * @param \\\\Closure $callback\n         * @return void\n         * @static\n         */        public static function beforeBootstrapping($bootstrapper, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->beforeBootstrapping($bootstrapper, $callback);\n        }\n\n        /**\n         * Register a callback to run after a bootstrapper.\n         *\n         * @param string $bootstrapper\n         * @param \\\\Closure $callback\n         * @return void\n         * @static\n         */        public static function afterBootstrapping($bootstrapper, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->afterBootstrapping($bootstrapper, $callback);\n        }\n\n        /**\n         * Determine if the application has been bootstrapped before.\n         *\n         * @return bool\n         * @static\n         */        public static function hasBeenBootstrapped()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->hasBeenBootstrapped();\n        }\n\n        /**\n         * Set the base path for the application.\n         *\n         * @param string $basePath\n         * @return \\\\Illuminate\\\\Foundation\\\\Application\n         * @static\n         */        public static function setBasePath($basePath)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->setBasePath($basePath);\n        }\n\n        /**\n         * Get the path to the application \"app\" directory.\n         *\n         * @param string $path\n         * @return string\n         * @static\n         */        public static function path($path = '')\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->path($path);\n        }\n\n        /**\n         * Set the application directory.\n         *\n         * @param string $path\n         * @return \\\\Illuminate\\\\Foundation\\\\Application\n         * @static\n         */        public static function useAppPath($path)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->useAppPath($path);\n        }\n\n        /**\n         * Get the base path of the Laravel installation.\n         *\n         * @param string $path Optionally, a path to append to the base path\n         * @return string\n         * @static\n         */        public static function basePath($path = '')\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->basePath($path);\n        }\n\n        /**\n         * Get the path to the bootstrap directory.\n         *\n         * @param string $path Optionally, a path to append to the bootstrap path\n         * @return string\n         * @static\n         */        public static function bootstrapPath($path = '')\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->bootstrapPath($path);\n        }\n\n        /**\n         * Get the path to the application configuration files.\n         *\n         * @param string $path Optionally, a path to append to the config path\n         * @return string\n         * @static\n         */        public static function configPath($path = '')\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->configPath($path);\n        }\n\n        /**\n         * Get the path to the database directory.\n         *\n         * @param string $path Optionally, a path to append to the database path\n         * @return string\n         * @static\n         */        public static function databasePath($path = '')\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->databasePath($path);\n        }\n\n        /**\n         * Set the database directory.\n         *\n         * @param string $path\n         * @return \\\\Illuminate\\\\Foundation\\\\Application\n         * @static\n         */        public static function useDatabasePath($path)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->useDatabasePath($path);\n        }\n\n        /**\n         * Get the path to the language files.\n         *\n         * @return string\n         * @static\n         */        public static function langPath()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->langPath();\n        }\n\n        /**\n         * Get the path to the public / web directory.\n         *\n         * @return string\n         * @static\n         */        public static function publicPath()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->publicPath();\n        }\n\n        /**\n         * Get the path to the storage directory.\n         *\n         * @return string\n         * @static\n         */        public static function storagePath()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->storagePath();\n        }\n\n        /**\n         * Set the storage directory.\n         *\n         * @param string $path\n         * @return \\\\Illuminate\\\\Foundation\\\\Application\n         * @static\n         */        public static function useStoragePath($path)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->useStoragePath($path);\n        }\n\n        /**\n         * Get the path to the resources directory.\n         *\n         * @param string $path\n         * @return string\n         * @static\n         */        public static function resourcePath($path = '')\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->resourcePath($path);\n        }\n\n        /**\n         * Get the path to the environment file directory.\n         *\n         * @return string\n         * @static\n         */        public static function environmentPath()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->environmentPath();\n        }\n\n        /**\n         * Set the directory for the environment file.\n         *\n         * @param string $path\n         * @return \\\\Illuminate\\\\Foundation\\\\Application\n         * @static\n         */        public static function useEnvironmentPath($path)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->useEnvironmentPath($path);\n        }\n\n        /**\n         * Set the environment file to be loaded during bootstrapping.\n         *\n         * @param string $file\n         * @return \\\\Illuminate\\\\Foundation\\\\Application\n         * @static\n         */        public static function loadEnvironmentFrom($file)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->loadEnvironmentFrom($file);\n        }\n\n        /**\n         * Get the environment file the application is using.\n         *\n         * @return string\n         * @static\n         */        public static function environmentFile()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->environmentFile();\n        }\n\n        /**\n         * Get the fully qualified path to the environment file.\n         *\n         * @return string\n         * @static\n         */        public static function environmentFilePath()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->environmentFilePath();\n        }\n\n        /**\n         * Get or check the current application environment.\n         *\n         * @param string|array $environments\n         * @return string|bool\n         * @static\n         */        public static function environment(...$environments)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->environment(...$environments);\n        }\n\n        /**\n         * Determine if application is in local environment.\n         *\n         * @return bool\n         * @static\n         */        public static function isLocal()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->isLocal();\n        }\n\n        /**\n         * Determine if application is in production environment.\n         *\n         * @return bool\n         * @static\n         */        public static function isProduction()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->isProduction();\n        }\n\n        /**\n         * Detect the application's current environment.\n         *\n         * @param \\\\Closure $callback\n         * @return string\n         * @static\n         */        public static function detectEnvironment($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->detectEnvironment($callback);\n        }\n\n        /**\n         * Determine if the application is running in the console.\n         *\n         * @return bool\n         * @static\n         */        public static function runningInConsole()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->runningInConsole();\n        }\n\n        /**\n         * Determine if the application is running unit tests.\n         *\n         * @return bool\n         * @static\n         */        public static function runningUnitTests()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->runningUnitTests();\n        }\n\n        /**\n         * Register all of the configured providers.\n         *\n         * @return void\n         * @static\n         */        public static function registerConfiguredProviders()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->registerConfiguredProviders();\n        }\n\n        /**\n         * Register a service provider with the application.\n         *\n         * @param \\\\Illuminate\\\\Support\\\\ServiceProvider|string $provider\n         * @param bool $force\n         * @return \\\\Illuminate\\\\Support\\\\ServiceProvider\n         * @static\n         */        public static function register($provider, $force = false)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->register($provider, $force);\n        }\n\n        /**\n         * Get the registered service provider instance if it exists.\n         *\n         * @param \\\\Illuminate\\\\Support\\\\ServiceProvider|string $provider\n         * @return \\\\Illuminate\\\\Support\\\\ServiceProvider|null\n         * @static\n         */        public static function getProvider($provider)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->getProvider($provider);\n        }\n\n        /**\n         * Get the registered service provider instances if any exist.\n         *\n         * @param \\\\Illuminate\\\\Support\\\\ServiceProvider|string $provider\n         * @return array\n         * @static\n         */        public static function getProviders($provider)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->getProviders($provider);\n        }\n\n        /**\n         * Resolve a service provider instance from the class name.\n         *\n         * @param string $provider\n         * @return \\\\Illuminate\\\\Support\\\\ServiceProvider\n         * @static\n         */        public static function resolveProvider($provider)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->resolveProvider($provider);\n        }\n\n        /**\n         * Load and boot all of the remaining deferred providers.\n         *\n         * @return void\n         * @static\n         */        public static function loadDeferredProviders()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->loadDeferredProviders();\n        }\n\n        /**\n         * Load the provider for a deferred service.\n         *\n         * @param string $service\n         * @return void\n         * @static\n         */        public static function loadDeferredProvider($service)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->loadDeferredProvider($service);\n        }\n\n        /**\n         * Register a deferred provider and service.\n         *\n         * @param string $provider\n         * @param string|null $service\n         * @return void\n         * @static\n         */        public static function registerDeferredProvider($provider, $service = null)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->registerDeferredProvider($provider, $service);\n        }\n\n        /**\n         * Resolve the given type from the container.\n         *\n         * @param string $abstract\n         * @param array $parameters\n         * @return mixed\n         * @static\n         */        public static function make($abstract, $parameters = [])\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->make($abstract, $parameters);\n        }\n\n        /**\n         * Determine if the given abstract type has been bound.\n         *\n         * @param string $abstract\n         * @return bool\n         * @static\n         */        public static function bound($abstract)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->bound($abstract);\n        }\n\n        /**\n         * Determine if the application has booted.\n         *\n         * @return bool\n         * @static\n         */        public static function isBooted()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->isBooted();\n        }\n\n        /**\n         * Boot the application's service providers.\n         *\n         * @return void\n         * @static\n         */        public static function boot()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->boot();\n        }\n\n        /**\n         * Register a new boot listener.\n         *\n         * @param callable $callback\n         * @return void\n         * @static\n         */        public static function booting($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->booting($callback);\n        }\n\n        /**\n         * Register a new \"booted\" listener.\n         *\n         * @param callable $callback\n         * @return void\n         * @static\n         */        public static function booted($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->booted($callback);\n        }\n\n        /**\n         * {@inheritdoc}\n         *\n         * @static\n         */        public static function handle($request, $type = 1, $catch = true)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->handle($request, $type, $catch);\n        }\n\n        /**\n         * Determine if middleware has been disabled for the application.\n         *\n         * @return bool\n         * @static\n         */        public static function shouldSkipMiddleware()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->shouldSkipMiddleware();\n        }\n\n        /**\n         * Get the path to the cached services.php file.\n         *\n         * @return string\n         * @static\n         */        public static function getCachedServicesPath()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->getCachedServicesPath();\n        }\n\n        /**\n         * Get the path to the cached packages.php file.\n         *\n         * @return string\n         * @static\n         */        public static function getCachedPackagesPath()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->getCachedPackagesPath();\n        }\n\n        /**\n         * Determine if the application configuration is cached.\n         *\n         * @return bool\n         * @static\n         */        public static function configurationIsCached()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->configurationIsCached();\n        }\n\n        /**\n         * Get the path to the configuration cache file.\n         *\n         * @return string\n         * @static\n         */        public static function getCachedConfigPath()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->getCachedConfigPath();\n        }\n\n        /**\n         * Determine if the application routes are cached.\n         *\n         * @return bool\n         * @static\n         */        public static function routesAreCached()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->routesAreCached();\n        }\n\n        /**\n         * Get the path to the routes cache file.\n         *\n         * @return string\n         * @static\n         */        public static function getCachedRoutesPath()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->getCachedRoutesPath();\n        }\n\n        /**\n         * Determine if the application events are cached.\n         *\n         * @return bool\n         * @static\n         */        public static function eventsAreCached()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->eventsAreCached();\n        }\n\n        /**\n         * Get the path to the events cache file.\n         *\n         * @return string\n         * @static\n         */        public static function getCachedEventsPath()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->getCachedEventsPath();\n        }\n\n        /**\n         * Add new prefix to list of absolute path prefixes.\n         *\n         * @param string $prefix\n         * @return \\\\Illuminate\\\\Foundation\\\\Application\n         * @static\n         */        public static function addAbsoluteCachePathPrefix($prefix)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->addAbsoluteCachePathPrefix($prefix);\n        }\n\n        /**\n         * Determine if the application is currently down for maintenance.\n         *\n         * @return bool\n         * @static\n         */        public static function isDownForMaintenance()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->isDownForMaintenance();\n        }\n\n        /**\n         * Throw an HttpException with the given data.\n         *\n         * @param int $code\n         * @param string $message\n         * @param array $headers\n         * @return void\n         * @throws \\\\Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\HttpException\n         * @throws \\\\Symfony\\\\Component\\\\HttpKernel\\\\Exception\\\\NotFoundHttpException\n         * @static\n         */        public static function abort($code, $message = '', $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->abort($code, $message, $headers);\n        }\n\n        /**\n         * Register a terminating callback with the application.\n         *\n         * @param callable|string $callback\n         * @return \\\\Illuminate\\\\Foundation\\\\Application\n         * @static\n         */        public static function terminating($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->terminating($callback);\n        }\n\n        /**\n         * Terminate the application.\n         *\n         * @return void\n         * @static\n         */        public static function terminate()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->terminate();\n        }\n\n        /**\n         * Get the service providers that have been loaded.\n         *\n         * @return array\n         * @static\n         */        public static function getLoadedProviders()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->getLoadedProviders();\n        }\n\n        /**\n         * Get the application's deferred services.\n         *\n         * @return array\n         * @static\n         */        public static function getDeferredServices()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->getDeferredServices();\n        }\n\n        /**\n         * Set the application's deferred services.\n         *\n         * @param array $services\n         * @return void\n         * @static\n         */        public static function setDeferredServices($services)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->setDeferredServices($services);\n        }\n\n        /**\n         * Add an array of services to the application's deferred services.\n         *\n         * @param array $services\n         * @return void\n         * @static\n         */        public static function addDeferredServices($services)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->addDeferredServices($services);\n        }\n\n        /**\n         * Determine if the given service is a deferred service.\n         *\n         * @param string $service\n         * @return bool\n         * @static\n         */        public static function isDeferredService($service)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->isDeferredService($service);\n        }\n\n        /**\n         * Configure the real-time facade namespace.\n         *\n         * @param string $namespace\n         * @return void\n         * @static\n         */        public static function provideFacades($namespace)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->provideFacades($namespace);\n        }\n\n        /**\n         * Get the current application locale.\n         *\n         * @return string\n         * @static\n         */        public static function getLocale()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->getLocale();\n        }\n\n        /**\n         * Set the current application locale.\n         *\n         * @param string $locale\n         * @return void\n         * @static\n         */        public static function setLocale($locale)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->setLocale($locale);\n        }\n\n        /**\n         * Determine if application locale is the given locale.\n         *\n         * @param string $locale\n         * @return bool\n         * @static\n         */        public static function isLocale($locale)\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->isLocale($locale);\n        }\n\n        /**\n         * Register the core class aliases in the container.\n         *\n         * @return void\n         * @static\n         */        public static function registerCoreContainerAliases()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->registerCoreContainerAliases();\n        }\n\n        /**\n         * Flush the container of all bindings and resolved instances.\n         *\n         * @return void\n         * @static\n         */        public static function flush()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->flush();\n        }\n\n        /**\n         * Get the application namespace.\n         *\n         * @return string\n         * @throws \\\\RuntimeException\n         * @static\n         */        public static function getNamespace()\n        {\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->getNamespace();\n        }\n\n        /**\n         * Define a contextual binding.\n         *\n         * @param array|string $concrete\n         * @return \\\\Illuminate\\\\Contracts\\\\Container\\\\ContextualBindingBuilder\n         * @static\n         */        public static function when($concrete)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->when($concrete);\n        }\n\n        /**\n         * Returns true if the container can return an entry for the given identifier.\n         *\n         * Returns false otherwise.\n         *\n         * 'has($id)' returning true does not mean that 'get($id)' will not throw an exception.\n         * It does however mean that 'get($id)' will not throw a 'NotFoundExceptionInterface'.\n         *\n         * @param string $id Identifier of the entry to look for.\n         * @return bool\n         * @static\n         */        public static function has($id)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->has($id);\n        }\n\n        /**\n         * Determine if the given abstract type has been resolved.\n         *\n         * @param string $abstract\n         * @return bool\n         * @static\n         */        public static function resolved($abstract)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->resolved($abstract);\n        }\n\n        /**\n         * Determine if a given type is shared.\n         *\n         * @param string $abstract\n         * @return bool\n         * @static\n         */        public static function isShared($abstract)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->isShared($abstract);\n        }\n\n        /**\n         * Determine if a given string is an alias.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function isAlias($name)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->isAlias($name);\n        }\n\n        /**\n         * Register a binding with the container.\n         *\n         * @param string $abstract\n         * @param \\\\Closure|string|null $concrete\n         * @param bool $shared\n         * @return void\n         * @static\n         */        public static function bind($abstract, $concrete = null, $shared = false)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->bind($abstract, $concrete, $shared);\n        }\n\n        /**\n         * Determine if the container has a method binding.\n         *\n         * @param string $method\n         * @return bool\n         * @static\n         */        public static function hasMethodBinding($method)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->hasMethodBinding($method);\n        }\n\n        /**\n         * Bind a callback to resolve with Container::call.\n         *\n         * @param array|string $method\n         * @param \\\\Closure $callback\n         * @return void\n         * @static\n         */        public static function bindMethod($method, $callback)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->bindMethod($method, $callback);\n        }\n\n        /**\n         * Get the method binding for the given method.\n         *\n         * @param string $method\n         * @param mixed $instance\n         * @return mixed\n         * @static\n         */        public static function callMethodBinding($method, $instance)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->callMethodBinding($method, $instance);\n        }\n\n        /**\n         * Add a contextual binding to the container.\n         *\n         * @param string $concrete\n         * @param string $abstract\n         * @param \\\\Closure|string $implementation\n         * @return void\n         * @static\n         */        public static function addContextualBinding($concrete, $abstract, $implementation)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->addContextualBinding($concrete, $abstract, $implementation);\n        }\n\n        /**\n         * Register a binding if it hasn't already been registered.\n         *\n         * @param string $abstract\n         * @param \\\\Closure|string|null $concrete\n         * @param bool $shared\n         * @return void\n         * @static\n         */        public static function bindIf($abstract, $concrete = null, $shared = false)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->bindIf($abstract, $concrete, $shared);\n        }\n\n        /**\n         * Register a shared binding in the container.\n         *\n         * @param string $abstract\n         * @param \\\\Closure|string|null $concrete\n         * @return void\n         * @static\n         */        public static function singleton($abstract, $concrete = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->singleton($abstract, $concrete);\n        }\n\n        /**\n         * Register a shared binding if it hasn't already been registered.\n         *\n         * @param string $abstract\n         * @param \\\\Closure|string|null $concrete\n         * @return void\n         * @static\n         */        public static function singletonIf($abstract, $concrete = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->singletonIf($abstract, $concrete);\n        }\n\n        /**\n         * \"Extend\" an abstract type in the container.\n         *\n         * @param string $abstract\n         * @param \\\\Closure $closure\n         * @return void\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function extend($abstract, $closure)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->extend($abstract, $closure);\n        }\n\n        /**\n         * Register an existing instance as shared in the container.\n         *\n         * @param string $abstract\n         * @param mixed $instance\n         * @return mixed\n         * @static\n         */        public static function instance($abstract, $instance)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->instance($abstract, $instance);\n        }\n\n        /**\n         * Assign a set of tags to a given binding.\n         *\n         * @param array|string $abstracts\n         * @param array|mixed $tags\n         * @return void\n         * @static\n         */        public static function tag($abstracts, $tags)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->tag($abstracts, $tags);\n        }\n\n        /**\n         * Resolve all of the bindings for a given tag.\n         *\n         * @param string $tag\n         * @return \\\\Illuminate\\\\Container\\\\iterable\n         * @static\n         */        public static function tagged($tag)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->tagged($tag);\n        }\n\n        /**\n         * Alias a type to a different name.\n         *\n         * @param string $abstract\n         * @param string $alias\n         * @return void\n         * @throws \\\\LogicException\n         * @static\n         */        public static function alias($abstract, $alias)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->alias($abstract, $alias);\n        }\n\n        /**\n         * Bind a new callback to an abstract's rebind event.\n         *\n         * @param string $abstract\n         * @param \\\\Closure $callback\n         * @return mixed\n         * @static\n         */        public static function rebinding($abstract, $callback)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->rebinding($abstract, $callback);\n        }\n\n        /**\n         * Refresh an instance on the given target and method.\n         *\n         * @param string $abstract\n         * @param mixed $target\n         * @param string $method\n         * @return mixed\n         * @static\n         */        public static function refresh($abstract, $target, $method)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->refresh($abstract, $target, $method);\n        }\n\n        /**\n         * Wrap the given closure such that its dependencies will be injected when executed.\n         *\n         * @param \\\\Closure $callback\n         * @param array $parameters\n         * @return \\\\Closure\n         * @static\n         */        public static function wrap($callback, $parameters = [])\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->wrap($callback, $parameters);\n        }\n\n        /**\n         * Call the given Closure / class@method and inject its dependencies.\n         *\n         * @param callable|string $callback\n         * @param \\\\Illuminate\\\\Container\\\\array<string,  mixed>  $parameters\n         * @param string|null $defaultMethod\n         * @return mixed\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function call($callback, $parameters = [], $defaultMethod = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->call($callback, $parameters, $defaultMethod);\n        }\n\n        /**\n         * Get a closure to resolve the given type from the container.\n         *\n         * @param string $abstract\n         * @return \\\\Closure\n         * @static\n         */        public static function factory($abstract)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->factory($abstract);\n        }\n\n        /**\n         * An alias function name for make().\n         *\n         * @param string $abstract\n         * @param array $parameters\n         * @return mixed\n         * @throws \\\\Illuminate\\\\Contracts\\\\Container\\\\BindingResolutionException\n         * @static\n         */        public static function makeWith($abstract, $parameters = [])\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->makeWith($abstract, $parameters);\n        }\n\n        /**\n         * Finds an entry of the container by its identifier and returns it.\n         *\n         * @param string $id Identifier of the entry to look for.\n         * @throws NotFoundExceptionInterface  No entry was found for **this** identifier.\n         * @throws ContainerExceptionInterface Error while retrieving the entry.\n         * @return mixed Entry.\n         * @static\n         */        public static function get($id)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->get($id);\n        }\n\n        /**\n         * Instantiate a concrete instance of the given type.\n         *\n         * @param \\\\Closure|string $concrete\n         * @return mixed\n         * @throws \\\\Illuminate\\\\Contracts\\\\Container\\\\BindingResolutionException\n         * @static\n         */        public static function build($concrete)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->build($concrete);\n        }\n\n        /**\n         * Register a new resolving callback.\n         *\n         * @param \\\\Closure|string $abstract\n         * @param \\\\Closure|null $callback\n         * @return void\n         * @static\n         */        public static function resolving($abstract, $callback = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->resolving($abstract, $callback);\n        }\n\n        /**\n         * Register a new after resolving callback for all types.\n         *\n         * @param \\\\Closure|string $abstract\n         * @param \\\\Closure|null $callback\n         * @return void\n         * @static\n         */        public static function afterResolving($abstract, $callback = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->afterResolving($abstract, $callback);\n        }\n\n        /**\n         * Get the container's bindings.\n         *\n         * @return array\n         * @static\n         */        public static function getBindings()\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->getBindings();\n        }\n\n        /**\n         * Get the alias for an abstract if available.\n         *\n         * @param string $abstract\n         * @return string\n         * @static\n         */        public static function getAlias($abstract)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->getAlias($abstract);\n        }\n\n        /**\n         * Remove all of the extender callbacks for a given type.\n         *\n         * @param string $abstract\n         * @return void\n         * @static\n         */        public static function forgetExtenders($abstract)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->forgetExtenders($abstract);\n        }\n\n        /**\n         * Remove a resolved instance from the instance cache.\n         *\n         * @param string $abstract\n         * @return void\n         * @static\n         */        public static function forgetInstance($abstract)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->forgetInstance($abstract);\n        }\n\n        /**\n         * Clear all of the instances from the container.\n         *\n         * @return void\n         * @static\n         */        public static function forgetInstances()\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->forgetInstances();\n        }\n\n        /**\n         * Get the globally available instance of the container.\n         *\n         * @return static\n         * @static\n         */        public static function getInstance()\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        return \\\\Illuminate\\\\Foundation\\\\Application::getInstance();\n        }\n\n        /**\n         * Set the shared instance of the container.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\Container\\\\Container|null $container\n         * @return \\\\Illuminate\\\\Contracts\\\\Container\\\\Container|static\n         * @static\n         */        public static function setInstance($container = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        return \\\\Illuminate\\\\Foundation\\\\Application::setInstance($container);\n        }\n\n        /**\n         * Determine if a given offset exists.\n         *\n         * @param string $key\n         * @return bool\n         * @static\n         */        public static function offsetExists($key)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->offsetExists($key);\n        }\n\n        /**\n         * Get the value at a given offset.\n         *\n         * @param string $key\n         * @return mixed\n         * @static\n         */        public static function offsetGet($key)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        return $instance->offsetGet($key);\n        }\n\n        /**\n         * Set the value at a given offset.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void\n         * @static\n         */        public static function offsetSet($key, $value)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->offsetSet($key, $value);\n        }\n\n        /**\n         * Unset the value at a given offset.\n         *\n         * @param string $key\n         * @return void\n         * @static\n         */        public static function offsetUnset($key)\n        {\n            //Method inherited from \\\\Illuminate\\\\Container\\\\Container\n                        /** @var \\\\Illuminate\\\\Foundation\\\\Application $instance */\n                        $instance->offsetUnset($key);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Contracts\\\\Console\\\\Kernel\n     */    class Artisan {\n\n        /**\n         * Run the console application.\n         *\n         * @param \\\\Symfony\\\\Component\\\\Console\\\\Input\\\\InputInterface $input\n         * @param \\\\Symfony\\\\Component\\\\Console\\\\Output\\\\OutputInterface|null $output\n         * @return int\n         * @static\n         */        public static function handle($input, $output = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Foundation\\\\Console\\\\Kernel\n                        /** @var \\\\App\\\\Console\\\\Kernel $instance */\n                        return $instance->handle($input, $output);\n        }\n\n        /**\n         * Terminate the application.\n         *\n         * @param \\\\Symfony\\\\Component\\\\Console\\\\Input\\\\InputInterface $input\n         * @param int $status\n         * @return void\n         * @static\n         */        public static function terminate($input, $status)\n        {\n            //Method inherited from \\\\Illuminate\\\\Foundation\\\\Console\\\\Kernel\n                        /** @var \\\\App\\\\Console\\\\Kernel $instance */\n                        $instance->terminate($input, $status);\n        }\n\n        /**\n         * Register a Closure based command with the application.\n         *\n         * @param string $signature\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Foundation\\\\Console\\\\ClosureCommand\n         * @static\n         */        public static function command($signature, $callback)\n        {\n            //Method inherited from \\\\Illuminate\\\\Foundation\\\\Console\\\\Kernel\n                        /** @var \\\\App\\\\Console\\\\Kernel $instance */\n                        return $instance->command($signature, $callback);\n        }\n\n        /**\n         * Register the given command with the console application.\n         *\n         * @param \\\\Symfony\\\\Component\\\\Console\\\\Command\\\\Command $command\n         * @return void\n         * @static\n         */        public static function registerCommand($command)\n        {\n            //Method inherited from \\\\Illuminate\\\\Foundation\\\\Console\\\\Kernel\n                        /** @var \\\\App\\\\Console\\\\Kernel $instance */\n                        $instance->registerCommand($command);\n        }\n\n        /**\n         * Run an Artisan console command by name.\n         *\n         * @param string $command\n         * @param array $parameters\n         * @param \\\\Symfony\\\\Component\\\\Console\\\\Output\\\\OutputInterface|null $outputBuffer\n         * @return int\n         * @throws \\\\Symfony\\\\Component\\\\Console\\\\Exception\\\\CommandNotFoundException\n         * @static\n         */        public static function call($command, $parameters = [], $outputBuffer = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Foundation\\\\Console\\\\Kernel\n                        /** @var \\\\App\\\\Console\\\\Kernel $instance */\n                        return $instance->call($command, $parameters, $outputBuffer);\n        }\n\n        /**\n         * Queue the given console command.\n         *\n         * @param string $command\n         * @param array $parameters\n         * @return \\\\Illuminate\\\\Foundation\\\\Bus\\\\PendingDispatch\n         * @static\n         */        public static function queue($command, $parameters = [])\n        {\n            //Method inherited from \\\\Illuminate\\\\Foundation\\\\Console\\\\Kernel\n                        /** @var \\\\App\\\\Console\\\\Kernel $instance */\n                        return $instance->queue($command, $parameters);\n        }\n\n        /**\n         * Get all of the commands registered with the console.\n         *\n         * @return array\n         * @static\n         */        public static function all()\n        {\n            //Method inherited from \\\\Illuminate\\\\Foundation\\\\Console\\\\Kernel\n                        /** @var \\\\App\\\\Console\\\\Kernel $instance */\n                        return $instance->all();\n        }\n\n        /**\n         * Get the output for the last run command.\n         *\n         * @return string\n         * @static\n         */        public static function output()\n        {\n            //Method inherited from \\\\Illuminate\\\\Foundation\\\\Console\\\\Kernel\n                        /** @var \\\\App\\\\Console\\\\Kernel $instance */\n                        return $instance->output();\n        }\n\n        /**\n         * Bootstrap the application for artisan commands.\n         *\n         * @return void\n         * @static\n         */        public static function bootstrap()\n        {\n            //Method inherited from \\\\Illuminate\\\\Foundation\\\\Console\\\\Kernel\n                        /** @var \\\\App\\\\Console\\\\Kernel $instance */\n                        $instance->bootstrap();\n        }\n\n        /**\n         * Set the Artisan application instance.\n         *\n         * @param \\\\Illuminate\\\\Console\\\\Application $artisan\n         * @return void\n         * @static\n         */        public static function setArtisan($artisan)\n        {\n            //Method inherited from \\\\Illuminate\\\\Foundation\\\\Console\\\\Kernel\n                        /** @var \\\\App\\\\Console\\\\Kernel $instance */\n                        $instance->setArtisan($artisan);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Auth\\\\AuthManager\n     * @see \\\\Illuminate\\\\Contracts\\\\Auth\\\\Factory\n     * @see \\\\Illuminate\\\\Contracts\\\\Auth\\\\Guard\n     * @see \\\\Illuminate\\\\Contracts\\\\Auth\\\\StatefulGuard\n     */    class Auth {\n\n        /**\n         * Attempt to get the guard from the local cache.\n         *\n         * @param string|null $name\n         * @return \\\\Illuminate\\\\Contracts\\\\Auth\\\\Guard|\\\\Illuminate\\\\Contracts\\\\Auth\\\\StatefulGuard\n         * @static\n         */        public static function guard($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        return $instance->guard($name);\n        }\n\n        /**\n         * Create a session based authentication guard.\n         *\n         * @param string $name\n         * @param array $config\n         * @return \\\\Illuminate\\\\Auth\\\\SessionGuard\n         * @static\n         */        public static function createSessionDriver($name, $config)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        return $instance->createSessionDriver($name, $config);\n        }\n\n        /**\n         * Create a token based authentication guard.\n         *\n         * @param string $name\n         * @param array $config\n         * @return \\\\Illuminate\\\\Auth\\\\TokenGuard\n         * @static\n         */        public static function createTokenDriver($name, $config)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        return $instance->createTokenDriver($name, $config);\n        }\n\n        /**\n         * Get the default authentication driver name.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n\n        /**\n         * Set the default guard driver the factory should serve.\n         *\n         * @param string $name\n         * @return void\n         * @static\n         */        public static function shouldUse($name)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        $instance->shouldUse($name);\n        }\n\n        /**\n         * Set the default authentication driver name.\n         *\n         * @param string $name\n         * @return void\n         * @static\n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n\n        /**\n         * Register a new callback based request guard.\n         *\n         * @param string $driver\n         * @param callable $callback\n         * @return \\\\Illuminate\\\\Auth\\\\AuthManager\n         * @static\n         */        public static function viaRequest($driver, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        return $instance->viaRequest($driver, $callback);\n        }\n\n        /**\n         * Get the user resolver callback.\n         *\n         * @return \\\\Closure\n         * @static\n         */        public static function userResolver()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        return $instance->userResolver();\n        }\n\n        /**\n         * Set the callback to be used to resolve users.\n         *\n         * @param \\\\Closure $userResolver\n         * @return \\\\Illuminate\\\\Auth\\\\AuthManager\n         * @static\n         */        public static function resolveUsersUsing($userResolver)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        return $instance->resolveUsersUsing($userResolver);\n        }\n\n        /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Auth\\\\AuthManager\n         * @static\n         */        public static function extend($driver, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n\n        /**\n         * Register a custom provider creator Closure.\n         *\n         * @param string $name\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Auth\\\\AuthManager\n         * @static\n         */        public static function provider($name, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        return $instance->provider($name, $callback);\n        }\n\n        /**\n         * Determines if any guards have already been resolved.\n         *\n         * @return bool\n         * @static\n         */        public static function hasResolvedGuards()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        return $instance->hasResolvedGuards();\n        }\n\n        /**\n         * Create the user provider implementation for the driver.\n         *\n         * @param string|null $provider\n         * @return \\\\Illuminate\\\\Contracts\\\\Auth\\\\UserProvider|null\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function createUserProvider($provider = null)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        return $instance->createUserProvider($provider);\n        }\n\n        /**\n         * Get the default user provider name.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultUserProvider()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\AuthManager $instance */\n                        return $instance->getDefaultUserProvider();\n        }\n\n        /**\n         * Get the currently authenticated user.\n         *\n         * @return \\\\App\\\\User|null\n         * @static\n         */        public static function user()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->user();\n        }\n\n        /**\n         * Get the ID for the currently authenticated user.\n         *\n         * @return int|string|null\n         * @static\n         */        public static function id()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->id();\n        }\n\n        /**\n         * Log a user into the application without sessions or cookies.\n         *\n         * @param array $credentials\n         * @return bool\n         * @static\n         */        public static function once($credentials = [])\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->once($credentials);\n        }\n\n        /**\n         * Log the given user ID into the application without sessions or cookies.\n         *\n         * @param mixed $id\n         * @return \\\\App\\\\User|false\n         * @static\n         */        public static function onceUsingId($id)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->onceUsingId($id);\n        }\n\n        /**\n         * Validate a user's credentials.\n         *\n         * @param array $credentials\n         * @return bool\n         * @static\n         */        public static function validate($credentials = [])\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->validate($credentials);\n        }\n\n        /**\n         * Attempt to authenticate using HTTP Basic Auth.\n         *\n         * @param string $field\n         * @param array $extraConditions\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Response|null\n         * @static\n         */        public static function basic($field = 'email', $extraConditions = [])\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->basic($field, $extraConditions);\n        }\n\n        /**\n         * Perform a stateless HTTP Basic login attempt.\n         *\n         * @param string $field\n         * @param array $extraConditions\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Response|null\n         * @static\n         */        public static function onceBasic($field = 'email', $extraConditions = [])\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->onceBasic($field, $extraConditions);\n        }\n\n        /**\n         * Attempt to authenticate a user using the given credentials.\n         *\n         * @param array $credentials\n         * @param bool $remember\n         * @return bool\n         * @static\n         */        public static function attempt($credentials = [], $remember = false)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->attempt($credentials, $remember);\n        }\n\n        /**\n         * Log the given user ID into the application.\n         *\n         * @param mixed $id\n         * @param bool $remember\n         * @return \\\\App\\\\User|false\n         * @static\n         */        public static function loginUsingId($id, $remember = false)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->loginUsingId($id, $remember);\n        }\n\n        /**\n         * Log a user into the application.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\Auth\\\\Authenticatable $user\n         * @param bool $remember\n         * @return void\n         * @static\n         */        public static function login($user, $remember = false)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        $instance->login($user, $remember);\n        }\n\n        /**\n         * Log the user out of the application.\n         *\n         * @return void\n         * @static\n         */        public static function logout()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        $instance->logout();\n        }\n\n        /**\n         * Log the user out of the application on their current device only.\n         *\n         * @return void\n         * @static\n         */        public static function logoutCurrentDevice()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        $instance->logoutCurrentDevice();\n        }\n\n        /**\n         * Invalidate other sessions for the current user.\n         *\n         * The application must be using the AuthenticateSession middleware.\n         *\n         * @param string $password\n         * @param string $attribute\n         * @return bool|null\n         * @static\n         */        public static function logoutOtherDevices($password, $attribute = 'password')\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->logoutOtherDevices($password, $attribute);\n        }\n\n        /**\n         * Register an authentication attempt event listener.\n         *\n         * @param mixed $callback\n         * @return void\n         * @static\n         */        public static function attempting($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        $instance->attempting($callback);\n        }\n\n        /**\n         * Get the last user we attempted to authenticate.\n         *\n         * @return \\\\App\\\\User\n         * @static\n         */        public static function getLastAttempted()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->getLastAttempted();\n        }\n\n        /**\n         * Get a unique identifier for the auth session value.\n         *\n         * @return string\n         * @static\n         */        public static function getName()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->getName();\n        }\n\n        /**\n         * Get the name of the cookie used to store the \"recaller\".\n         *\n         * @return string\n         * @static\n         */        public static function getRecallerName()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->getRecallerName();\n        }\n\n        /**\n         * Determine if the user was authenticated via \"remember me\" cookie.\n         *\n         * @return bool\n         * @static\n         */        public static function viaRemember()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->viaRemember();\n        }\n\n        /**\n         * Get the cookie creator instance used by the guard.\n         *\n         * @return \\\\Illuminate\\\\Contracts\\\\Cookie\\\\QueueingFactory\n         * @throws \\\\RuntimeException\n         * @static\n         */        public static function getCookieJar()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->getCookieJar();\n        }\n\n        /**\n         * Set the cookie creator instance used by the guard.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\Cookie\\\\QueueingFactory $cookie\n         * @return void\n         * @static\n         */        public static function setCookieJar($cookie)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        $instance->setCookieJar($cookie);\n        }\n\n        /**\n         * Get the event dispatcher instance.\n         *\n         * @return \\\\Illuminate\\\\Contracts\\\\Events\\\\Dispatcher\n         * @static\n         */        public static function getDispatcher()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->getDispatcher();\n        }\n\n        /**\n         * Set the event dispatcher instance.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\Events\\\\Dispatcher $events\n         * @return void\n         * @static\n         */        public static function setDispatcher($events)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        $instance->setDispatcher($events);\n        }\n\n        /**\n         * Get the session store used by the guard.\n         *\n         * @return \\\\Illuminate\\\\Contracts\\\\Session\\\\Session\n         * @static\n         */        public static function getSession()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->getSession();\n        }\n\n        /**\n         * Return the currently cached user.\n         *\n         * @return \\\\App\\\\User|null\n         * @static\n         */        public static function getUser()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->getUser();\n        }\n\n        /**\n         * Set the current user.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\Auth\\\\Authenticatable $user\n         * @return \\\\Illuminate\\\\Auth\\\\SessionGuard\n         * @static\n         */        public static function setUser($user)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->setUser($user);\n        }\n\n        /**\n         * Get the current request instance.\n         *\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n         * @static\n         */        public static function getRequest()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->getRequest();\n        }\n\n        /**\n         * Set the current request instance.\n         *\n         * @param \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request $request\n         * @return \\\\Illuminate\\\\Auth\\\\SessionGuard\n         * @static\n         */        public static function setRequest($request)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->setRequest($request);\n        }\n\n        /**\n         * Determine if current user is authenticated. If not, throw an exception.\n         *\n         * @return \\\\App\\\\User\n         * @throws \\\\Illuminate\\\\Auth\\\\AuthenticationException\n         * @static\n         */        public static function authenticate()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->authenticate();\n        }\n\n        /**\n         * Determine if the guard has a user instance.\n         *\n         * @return bool\n         * @static\n         */        public static function hasUser()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->hasUser();\n        }\n\n        /**\n         * Determine if the current user is authenticated.\n         *\n         * @return bool\n         * @static\n         */        public static function check()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->check();\n        }\n\n        /**\n         * Determine if the current user is a guest.\n         *\n         * @return bool\n         * @static\n         */        public static function guest()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->guest();\n        }\n\n        /**\n         * Get the user provider used by the guard.\n         *\n         * @return \\\\Illuminate\\\\Contracts\\\\Auth\\\\UserProvider\n         * @static\n         */        public static function getProvider()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        return $instance->getProvider();\n        }\n\n        /**\n         * Set the user provider used by the guard.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\Auth\\\\UserProvider $provider\n         * @return void\n         * @static\n         */        public static function setProvider($provider)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\SessionGuard $instance */\n                        $instance->setProvider($provider);\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\Auth\\\\SessionGuard::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\Auth\\\\SessionGuard::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\Auth\\\\SessionGuard::hasMacro($name);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler\n     */    class Blade {\n\n        /**\n         * Compile the view at the given path.\n         *\n         * @param string|null $path\n         * @return void\n         * @static\n         */        public static function compile($path = null)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->compile($path);\n        }\n\n        /**\n         * Get the path currently being compiled.\n         *\n         * @return string\n         * @static\n         */        public static function getPath()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        return $instance->getPath();\n        }\n\n        /**\n         * Set the path currently being compiled.\n         *\n         * @param string $path\n         * @return void\n         * @static\n         */        public static function setPath($path)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->setPath($path);\n        }\n\n        /**\n         * Compile the given Blade template contents.\n         *\n         * @param string $value\n         * @return string\n         * @static\n         */        public static function compileString($value)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        return $instance->compileString($value);\n        }\n\n        /**\n         * Strip the parentheses from the given expression.\n         *\n         * @param string $expression\n         * @return string\n         * @static\n         */        public static function stripParentheses($expression)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        return $instance->stripParentheses($expression);\n        }\n\n        /**\n         * Register a custom Blade compiler.\n         *\n         * @param callable $compiler\n         * @return void\n         * @static\n         */        public static function extend($compiler)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->extend($compiler);\n        }\n\n        /**\n         * Get the extensions used by the compiler.\n         *\n         * @return array\n         * @static\n         */        public static function getExtensions()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        return $instance->getExtensions();\n        }\n\n        /**\n         * Register an \"if\" statement directive.\n         *\n         * @param string $name\n         * @param callable $callback\n         * @return void\n         * @static\n         */        public static function if($name, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->if($name, $callback);\n        }\n\n        /**\n         * Check the result of a condition.\n         *\n         * @param string $name\n         * @param array $parameters\n         * @return bool\n         * @static\n         */        public static function check($name, ...$parameters)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        return $instance->check($name, ...$parameters);\n        }\n\n        /**\n         * Register a class-based component alias directive.\n         *\n         * @param string $class\n         * @param string|null $alias\n         * @param string $prefix\n         * @return void\n         * @static\n         */        public static function component($class, $alias = null, $prefix = '')\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->component($class, $alias, $prefix);\n        }\n\n        /**\n         * Register an array of class-based components.\n         *\n         * @param array $components\n         * @param string $prefix\n         * @return void\n         * @static\n         */        public static function components($components, $prefix = '')\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->components($components, $prefix);\n        }\n\n        /**\n         * Get the registered class component aliases.\n         *\n         * @return array\n         * @static\n         */        public static function getClassComponentAliases()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        return $instance->getClassComponentAliases();\n        }\n\n        /**\n         * Register a component alias directive.\n         *\n         * @param string $path\n         * @param string|null $alias\n         * @return void\n         * @static\n         */        public static function aliasComponent($path, $alias = null)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->aliasComponent($path, $alias);\n        }\n\n        /**\n         * Register an include alias directive.\n         *\n         * @param string $path\n         * @param string|null $alias\n         * @return void\n         * @static\n         */        public static function include($path, $alias = null)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->include($path, $alias);\n        }\n\n        /**\n         * Register an include alias directive.\n         *\n         * @param string $path\n         * @param string|null $alias\n         * @return void\n         * @static\n         */        public static function aliasInclude($path, $alias = null)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->aliasInclude($path, $alias);\n        }\n\n        /**\n         * Register a handler for custom directives.\n         *\n         * @param string $name\n         * @param callable $handler\n         * @return void\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function directive($name, $handler)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->directive($name, $handler);\n        }\n\n        /**\n         * Get the list of custom directives.\n         *\n         * @return array\n         * @static\n         */        public static function getCustomDirectives()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        return $instance->getCustomDirectives();\n        }\n\n        /**\n         * Register a new precompiler.\n         *\n         * @param callable $precompiler\n         * @return void\n         * @static\n         */        public static function precompiler($precompiler)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->precompiler($precompiler);\n        }\n\n        /**\n         * Set the echo format to be used by the compiler.\n         *\n         * @param string $format\n         * @return void\n         * @static\n         */        public static function setEchoFormat($format)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->setEchoFormat($format);\n        }\n\n        /**\n         * Set the \"echo\" format to double encode entities.\n         *\n         * @return void\n         * @static\n         */        public static function withDoubleEncoding()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->withDoubleEncoding();\n        }\n\n        /**\n         * Set the \"echo\" format to not double encode entities.\n         *\n         * @return void\n         * @static\n         */        public static function withoutDoubleEncoding()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->withoutDoubleEncoding();\n        }\n\n        /**\n         * Indicate that component tags should not be compiled.\n         *\n         * @return void\n         * @static\n         */        public static function withoutComponentTags()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        $instance->withoutComponentTags();\n        }\n\n        /**\n         * Get the path to the compiled version of a view.\n         *\n         * @param string $path\n         * @return string\n         * @static\n         */        public static function getCompiledPath($path)\n        {\n            //Method inherited from \\\\Illuminate\\\\View\\\\Compilers\\\\Compiler\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        return $instance->getCompiledPath($path);\n        }\n\n        /**\n         * Determine if the view at the given path is expired.\n         *\n         * @param string $path\n         * @return bool\n         * @static\n         */        public static function isExpired($path)\n        {\n            //Method inherited from \\\\Illuminate\\\\View\\\\Compilers\\\\Compiler\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        return $instance->isExpired($path);\n        }\n\n        /**\n         * Get a new component hash for a component name.\n         *\n         * @param string $component\n         * @return string\n         * @static\n         */        public static function newComponentHash($component)\n        {\n                        return \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler::newComponentHash($component);\n        }\n\n        /**\n         * Compile a class component opening.\n         *\n         * @param string $component\n         * @param string $data\n         * @param string $hash\n         * @return string\n         * @static\n         */        public static function compileClassComponentOpening($component, $data, $hash)\n        {\n                        return \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler::compileClassComponentOpening($component, $data, $hash);\n        }\n\n        /**\n         * Compile the end-component statements into valid PHP.\n         *\n         * @return string\n         * @static\n         */        public static function compileEndComponentClass()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        return $instance->compileEndComponentClass();\n        }\n\n        /**\n         * Sanitize the given component attribute value.\n         *\n         * @param mixed $value\n         * @return mixed\n         * @static\n         */        public static function sanitizeComponentAttribute($value)\n        {\n                        return \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler::sanitizeComponentAttribute($value);\n        }\n\n        /**\n         * Compile Blade echos into valid PHP.\n         *\n         * @param string $value\n         * @return string\n         * @static\n         */        public static function compileEchos($value)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Compilers\\\\BladeCompiler $instance */\n                        return $instance->compileEchos($value);\n        }\n            }\n\n    /**\n     *\n     *\n     * @method static \\\\Illuminate\\\\Broadcasting\\\\Broadcasters\\\\Broadcaster channel(string $channel, callable|string  $callback, array $options = [])\n     * @method static mixed auth(\\\\Illuminate\\\\Http\\\\Request $request)\n     * @see \\\\Illuminate\\\\Contracts\\\\Broadcasting\\\\Factory\n     */    class Broadcast {\n\n        /**\n         * Register the routes for handling broadcast authentication and sockets.\n         *\n         * @param array|null $attributes\n         * @return void\n         * @static\n         */        public static function routes($attributes = null)\n        {\n                        /** @var \\\\Illuminate\\\\Broadcasting\\\\BroadcastManager $instance */\n                        $instance->routes($attributes);\n        }\n\n        /**\n         * Get the socket ID for the given request.\n         *\n         * @param \\\\Illuminate\\\\Http\\\\Request|null $request\n         * @return string|null\n         * @static\n         */        public static function socket($request = null)\n        {\n                        /** @var \\\\Illuminate\\\\Broadcasting\\\\BroadcastManager $instance */\n                        return $instance->socket($request);\n        }\n\n        /**\n         * Begin broadcasting an event.\n         *\n         * @param mixed|null $event\n         * @return \\\\Illuminate\\\\Broadcasting\\\\PendingBroadcast|void\n         * @static\n         */        public static function event($event = null)\n        {\n                        /** @var \\\\Illuminate\\\\Broadcasting\\\\BroadcastManager $instance */\n                        return $instance->event($event);\n        }\n\n        /**\n         * Queue the given event for broadcast.\n         *\n         * @param mixed $event\n         * @return void\n         * @static\n         */        public static function queue($event)\n        {\n                        /** @var \\\\Illuminate\\\\Broadcasting\\\\BroadcastManager $instance */\n                        $instance->queue($event);\n        }\n\n        /**\n         * Get a driver instance.\n         *\n         * @param string|null $driver\n         * @return mixed\n         * @static\n         */        public static function connection($driver = null)\n        {\n                        /** @var \\\\Illuminate\\\\Broadcasting\\\\BroadcastManager $instance */\n                        return $instance->connection($driver);\n        }\n\n        /**\n         * Get a driver instance.\n         *\n         * @param string|null $name\n         * @return mixed\n         * @static\n         */        public static function driver($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Broadcasting\\\\BroadcastManager $instance */\n                        return $instance->driver($name);\n        }\n\n        /**\n         * Get the default driver name.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Broadcasting\\\\BroadcastManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n\n        /**\n         * Set the default driver name.\n         *\n         * @param string $name\n         * @return void\n         * @static\n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\\\Illuminate\\\\Broadcasting\\\\BroadcastManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n\n        /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Broadcasting\\\\BroadcastManager\n         * @static\n         */        public static function extend($driver, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Broadcasting\\\\BroadcastManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Contracts\\\\Bus\\\\Dispatcher\n     */    class Bus {\n\n        /**\n         * Dispatch a command to its appropriate handler.\n         *\n         * @param mixed $command\n         * @return mixed\n         * @static\n         */        public static function dispatch($command)\n        {\n                        /** @var \\\\Illuminate\\\\Bus\\\\Dispatcher $instance */\n                        return $instance->dispatch($command);\n        }\n\n        /**\n         * Dispatch a command to its appropriate handler in the current process.\n         *\n         * @param mixed $command\n         * @param mixed $handler\n         * @return mixed\n         * @static\n         */        public static function dispatchNow($command, $handler = null)\n        {\n                        /** @var \\\\Illuminate\\\\Bus\\\\Dispatcher $instance */\n                        return $instance->dispatchNow($command, $handler);\n        }\n\n        /**\n         * Determine if the given command has a handler.\n         *\n         * @param mixed $command\n         * @return bool\n         * @static\n         */        public static function hasCommandHandler($command)\n        {\n                        /** @var \\\\Illuminate\\\\Bus\\\\Dispatcher $instance */\n                        return $instance->hasCommandHandler($command);\n        }\n\n        /**\n         * Retrieve the handler for a command.\n         *\n         * @param mixed $command\n         * @return bool|mixed\n         * @static\n         */        public static function getCommandHandler($command)\n        {\n                        /** @var \\\\Illuminate\\\\Bus\\\\Dispatcher $instance */\n                        return $instance->getCommandHandler($command);\n        }\n\n        /**\n         * Dispatch a command to its appropriate handler behind a queue.\n         *\n         * @param mixed $command\n         * @return mixed\n         * @static\n         */        public static function dispatchToQueue($command)\n        {\n                        /** @var \\\\Illuminate\\\\Bus\\\\Dispatcher $instance */\n                        return $instance->dispatchToQueue($command);\n        }\n\n        /**\n         * Dispatch a command to its appropriate handler after the current process.\n         *\n         * @param mixed $command\n         * @param mixed $handler\n         * @return void\n         * @static\n         */        public static function dispatchAfterResponse($command, $handler = null)\n        {\n                        /** @var \\\\Illuminate\\\\Bus\\\\Dispatcher $instance */\n                        $instance->dispatchAfterResponse($command, $handler);\n        }\n\n        /**\n         * Set the pipes through which commands should be piped before dispatching.\n         *\n         * @param array $pipes\n         * @return \\\\Illuminate\\\\Bus\\\\Dispatcher\n         * @static\n         */        public static function pipeThrough($pipes)\n        {\n                        /** @var \\\\Illuminate\\\\Bus\\\\Dispatcher $instance */\n                        return $instance->pipeThrough($pipes);\n        }\n\n        /**\n         * Map a command to a handler.\n         *\n         * @param array $map\n         * @return \\\\Illuminate\\\\Bus\\\\Dispatcher\n         * @static\n         */        public static function map($map)\n        {\n                        /** @var \\\\Illuminate\\\\Bus\\\\Dispatcher $instance */\n                        return $instance->map($map);\n        }\n\n        /**\n         * Assert if a job was dispatched based on a truth-test callback.\n         *\n         * @param string $command\n         * @param callable|int|null $callback\n         * @return void\n         * @static\n         */        public static function assertDispatched($command, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\BusFake $instance */\n                        $instance->assertDispatched($command, $callback);\n        }\n\n        /**\n         * Assert if a job was pushed a number of times.\n         *\n         * @param string $command\n         * @param int $times\n         * @return void\n         * @static\n         */        public static function assertDispatchedTimes($command, $times = 1)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\BusFake $instance */\n                        $instance->assertDispatchedTimes($command, $times);\n        }\n\n        /**\n         * Determine if a job was dispatched based on a truth-test callback.\n         *\n         * @param string $command\n         * @param callable|null $callback\n         * @return void\n         * @static\n         */        public static function assertNotDispatched($command, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\BusFake $instance */\n                        $instance->assertNotDispatched($command, $callback);\n        }\n\n        /**\n         * Assert if a job was dispatched after the response was sent based on a truth-test callback.\n         *\n         * @param string $command\n         * @param callable|int|null $callback\n         * @return void\n         * @static\n         */        public static function assertDispatchedAfterResponse($command, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\BusFake $instance */\n                        $instance->assertDispatchedAfterResponse($command, $callback);\n        }\n\n        /**\n         * Assert if a job was pushed after the response was sent a number of times.\n         *\n         * @param string $command\n         * @param int $times\n         * @return void\n         * @static\n         */        public static function assertDispatchedAfterResponseTimes($command, $times = 1)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\BusFake $instance */\n                        $instance->assertDispatchedAfterResponseTimes($command, $times);\n        }\n\n        /**\n         * Determine if a job was dispatched based on a truth-test callback.\n         *\n         * @param string $command\n         * @param callable|null $callback\n         * @return void\n         * @static\n         */        public static function assertNotDispatchedAfterResponse($command, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\BusFake $instance */\n                        $instance->assertNotDispatchedAfterResponse($command, $callback);\n        }\n\n        /**\n         * Get all of the jobs matching a truth-test callback.\n         *\n         * @param string $command\n         * @param callable|null $callback\n         * @return \\\\Illuminate\\\\Support\\\\Collection\n         * @static\n         */        public static function dispatched($command, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\BusFake $instance */\n                        return $instance->dispatched($command, $callback);\n        }\n\n        /**\n         * Get all of the jobs dispatched after the response was sent matching a truth-test callback.\n         *\n         * @param string $command\n         * @param callable|null $callback\n         * @return \\\\Illuminate\\\\Support\\\\Collection\n         * @static\n         */        public static function dispatchedAfterResponse($command, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\BusFake $instance */\n                        return $instance->dispatchedAfterResponse($command, $callback);\n        }\n\n        /**\n         * Determine if there are any stored commands for a given class.\n         *\n         * @param string $command\n         * @return bool\n         * @static\n         */        public static function hasDispatched($command)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\BusFake $instance */\n                        return $instance->hasDispatched($command);\n        }\n\n        /**\n         * Determine if there are any stored commands for a given class.\n         *\n         * @param string $command\n         * @return bool\n         * @static\n         */        public static function hasDispatchedAfterResponse($command)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\BusFake $instance */\n                        return $instance->hasDispatchedAfterResponse($command);\n        }\n            }\n\n    /**\n     *\n     *\n     * @method static \\\\Illuminate\\\\Contracts\\\\Cache\\\\Lock lock(string $name, int $seconds = 0, mixed $owner = null)\n     * @method static \\\\Illuminate\\\\Contracts\\\\Cache\\\\Lock restoreLock(string $name, string $owner)\n     * @see \\\\Illuminate\\\\Cache\\\\CacheManager\n     * @see \\\\Illuminate\\\\Cache\\\\Repository\n     */    class Cache {\n\n        /**\n         * Get a cache store instance by name, wrapped in a repository.\n         *\n         * @param string|null $name\n         * @return \\\\Illuminate\\\\Contracts\\\\Cache\\\\Repository\n         * @static\n         */        public static function store($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\CacheManager $instance */\n                        return $instance->store($name);\n        }\n\n        /**\n         * Get a cache driver instance.\n         *\n         * @param string|null $driver\n         * @return \\\\Illuminate\\\\Contracts\\\\Cache\\\\Repository\n         * @static\n         */        public static function driver($driver = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\CacheManager $instance */\n                        return $instance->driver($driver);\n        }\n\n        /**\n         * Create a new cache repository with the given implementation.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\Cache\\\\Store $store\n         * @return \\\\Illuminate\\\\Cache\\\\Repository\n         * @static\n         */        public static function repository($store)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\CacheManager $instance */\n                        return $instance->repository($store);\n        }\n\n        /**\n         * Re-set the event dispatcher on all resolved cache repositories.\n         *\n         * @return void\n         * @static\n         */        public static function refreshEventDispatcher()\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\CacheManager $instance */\n                        $instance->refreshEventDispatcher();\n        }\n\n        /**\n         * Get the default cache driver name.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\CacheManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n\n        /**\n         * Set the default cache driver name.\n         *\n         * @param string $name\n         * @return void\n         * @static\n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\CacheManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n\n        /**\n         * Unset the given driver instances.\n         *\n         * @param array|string|null $name\n         * @return \\\\Illuminate\\\\Cache\\\\CacheManager\n         * @static\n         */        public static function forgetDriver($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\CacheManager $instance */\n                        return $instance->forgetDriver($name);\n        }\n\n        /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Cache\\\\CacheManager\n         * @static\n         */        public static function extend($driver, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\CacheManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n\n        /**\n         * Determine if an item exists in the cache.\n         *\n         * @param string $key\n         * @return bool\n         * @static\n         */        public static function has($key)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->has($key);\n        }\n\n        /**\n         * Determine if an item doesn't exist in the cache.\n         *\n         * @param string $key\n         * @return bool\n         * @static\n         */        public static function missing($key)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->missing($key);\n        }\n\n        /**\n         * Retrieve an item from the cache by key.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed\n         * @static\n         */        public static function get($key, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->get($key, $default);\n        }\n\n        /**\n         * Retrieve multiple items from the cache by key.\n         *\n         * Items not found in the cache will have a null value.\n         *\n         * @param array $keys\n         * @return array\n         * @static\n         */        public static function many($keys)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->many($keys);\n        }\n\n        /**\n         * Obtains multiple cache items by their unique keys.\n         *\n         * @param \\\\Psr\\\\SimpleCache\\\\iterable $keys A list of keys that can obtained in a single operation.\n         * @param mixed $default Default value to return for keys that do not exist.\n         * @return \\\\Psr\\\\SimpleCache\\\\iterable A list of key => value pairs. Cache keys that do not exist or are stale will have $default as value.\n         * @throws \\\\Psr\\\\SimpleCache\\\\InvalidArgumentException\n         *   MUST be thrown if $keys is neither an array nor a Traversable,\n         *   or if any of the $keys are not a legal value.\n         * @static\n         */        public static function getMultiple($keys, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->getMultiple($keys, $default);\n        }\n\n        /**\n         * Retrieve an item from the cache and delete it.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed\n         * @static\n         */        public static function pull($key, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->pull($key, $default);\n        }\n\n        /**\n         * Store an item in the cache.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @param \\\\DateTimeInterface|\\\\DateInterval|int|null $ttl\n         * @return bool\n         * @static\n         */        public static function put($key, $value, $ttl = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->put($key, $value, $ttl);\n        }\n\n        /**\n         * Persists data in the cache, uniquely referenced by a key with an optional expiration TTL time.\n         *\n         * @param string $key The key of the item to store.\n         * @param mixed $value The value of the item to store, must be serializable.\n         * @param null|int|\\\\DateInterval $ttl Optional. The TTL value of this item. If no value is sent and\n         *                                      the driver supports TTL then the library may set a default value\n         *                                      for it or let the driver take care of that.\n         * @return bool True on success and false on failure.\n         * @throws \\\\Psr\\\\SimpleCache\\\\InvalidArgumentException\n         *   MUST be thrown if the $key string is not a legal value.\n         * @static\n         */        public static function set($key, $value, $ttl = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->set($key, $value, $ttl);\n        }\n\n        /**\n         * Store multiple items in the cache for a given number of seconds.\n         *\n         * @param array $values\n         * @param \\\\DateTimeInterface|\\\\DateInterval|int|null $ttl\n         * @return bool\n         * @static\n         */        public static function putMany($values, $ttl = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->putMany($values, $ttl);\n        }\n\n        /**\n         * Persists a set of key => value pairs in the cache, with an optional TTL.\n         *\n         * @param \\\\Psr\\\\SimpleCache\\\\iterable $values A list of key => value pairs for a multiple-set operation.\n         * @param null|int|\\\\DateInterval $ttl Optional. The TTL value of this item. If no value is sent and\n         *                                       the driver supports TTL then the library may set a default value\n         *                                       for it or let the driver take care of that.\n         * @return bool True on success and false on failure.\n         * @throws \\\\Psr\\\\SimpleCache\\\\InvalidArgumentException\n         *   MUST be thrown if $values is neither an array nor a Traversable,\n         *   or if any of the $values are not a legal value.\n         * @static\n         */        public static function setMultiple($values, $ttl = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->setMultiple($values, $ttl);\n        }\n\n        /**\n         * Store an item in the cache if the key does not exist.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @param \\\\DateTimeInterface|\\\\DateInterval|int|null $ttl\n         * @return bool\n         * @static\n         */        public static function add($key, $value, $ttl = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->add($key, $value, $ttl);\n        }\n\n        /**\n         * Increment the value of an item in the cache.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return int|bool\n         * @static\n         */        public static function increment($key, $value = 1)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->increment($key, $value);\n        }\n\n        /**\n         * Decrement the value of an item in the cache.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return int|bool\n         * @static\n         */        public static function decrement($key, $value = 1)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->decrement($key, $value);\n        }\n\n        /**\n         * Store an item in the cache indefinitely.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return bool\n         * @static\n         */        public static function forever($key, $value)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->forever($key, $value);\n        }\n\n        /**\n         * Get an item from the cache, or execute the given Closure and store the result.\n         *\n         * @param string $key\n         * @param \\\\DateTimeInterface|\\\\DateInterval|int|null $ttl\n         * @param \\\\Closure $callback\n         * @return mixed\n         * @static\n         */        public static function remember($key, $ttl, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->remember($key, $ttl, $callback);\n        }\n\n        /**\n         * Get an item from the cache, or execute the given Closure and store the result forever.\n         *\n         * @param string $key\n         * @param \\\\Closure $callback\n         * @return mixed\n         * @static\n         */        public static function sear($key, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->sear($key, $callback);\n        }\n\n        /**\n         * Get an item from the cache, or execute the given Closure and store the result forever.\n         *\n         * @param string $key\n         * @param \\\\Closure $callback\n         * @return mixed\n         * @static\n         */        public static function rememberForever($key, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->rememberForever($key, $callback);\n        }\n\n        /**\n         * Remove an item from the cache.\n         *\n         * @param string $key\n         * @return bool\n         * @static\n         */        public static function forget($key)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->forget($key);\n        }\n\n        /**\n         * Delete an item from the cache by its unique key.\n         *\n         * @param string $key The unique cache key of the item to delete.\n         * @return bool True if the item was successfully removed. False if there was an error.\n         * @throws \\\\Psr\\\\SimpleCache\\\\InvalidArgumentException\n         *   MUST be thrown if the $key string is not a legal value.\n         * @static\n         */        public static function delete($key)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->delete($key);\n        }\n\n        /**\n         * Deletes multiple cache items in a single operation.\n         *\n         * @param \\\\Psr\\\\SimpleCache\\\\iterable $keys A list of string-based keys to be deleted.\n         * @return bool True if the items were successfully removed. False if there was an error.\n         * @throws \\\\Psr\\\\SimpleCache\\\\InvalidArgumentException\n         *   MUST be thrown if $keys is neither an array nor a Traversable,\n         *   or if any of the $keys are not a legal value.\n         * @static\n         */        public static function deleteMultiple($keys)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->deleteMultiple($keys);\n        }\n\n        /**\n         * Wipes clean the entire cache's keys.\n         *\n         * @return bool True on success and false on failure.\n         * @static\n         */        public static function clear()\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->clear();\n        }\n\n        /**\n         * Begin executing a new tags operation if the store supports it.\n         *\n         * @param array|mixed $names\n         * @return \\\\Illuminate\\\\Cache\\\\TaggedCache\n         * @throws \\\\BadMethodCallException\n         * @static\n         */        public static function tags($names)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->tags($names);\n        }\n\n        /**\n         * Get the default cache time.\n         *\n         * @return int|null\n         * @static\n         */        public static function getDefaultCacheTime()\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->getDefaultCacheTime();\n        }\n\n        /**\n         * Set the default cache time in seconds.\n         *\n         * @param int|null $seconds\n         * @return \\\\Illuminate\\\\Cache\\\\Repository\n         * @static\n         */        public static function setDefaultCacheTime($seconds)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->setDefaultCacheTime($seconds);\n        }\n\n        /**\n         * Get the cache store implementation.\n         *\n         * @return \\\\Illuminate\\\\Contracts\\\\Cache\\\\Store\n         * @static\n         */        public static function getStore()\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->getStore();\n        }\n\n        /**\n         * Get the event dispatcher instance.\n         *\n         * @return \\\\Illuminate\\\\Contracts\\\\Events\\\\Dispatcher\n         * @static\n         */        public static function getEventDispatcher()\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->getEventDispatcher();\n        }\n\n        /**\n         * Set the event dispatcher instance.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\Events\\\\Dispatcher $events\n         * @return void\n         * @static\n         */        public static function setEventDispatcher($events)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        $instance->setEventDispatcher($events);\n        }\n\n        /**\n         * Determine if a cached value exists.\n         *\n         * @param string $key\n         * @return bool\n         * @static\n         */        public static function offsetExists($key)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->offsetExists($key);\n        }\n\n        /**\n         * Retrieve an item from the cache by key.\n         *\n         * @param string $key\n         * @return mixed\n         * @static\n         */        public static function offsetGet($key)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->offsetGet($key);\n        }\n\n        /**\n         * Store an item in the cache for the default time.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void\n         * @static\n         */        public static function offsetSet($key, $value)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        $instance->offsetSet($key, $value);\n        }\n\n        /**\n         * Remove an item from the cache.\n         *\n         * @param string $key\n         * @return void\n         * @static\n         */        public static function offsetUnset($key)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        $instance->offsetUnset($key);\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\Cache\\\\Repository::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\Cache\\\\Repository::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\Cache\\\\Repository::hasMacro($name);\n        }\n\n        /**\n         * Dynamically handle calls to the class.\n         *\n         * @param string $method\n         * @param array $parameters\n         * @return mixed\n         * @throws \\\\BadMethodCallException\n         * @static\n         */        public static function macroCall($method, $parameters)\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\Repository $instance */\n                        return $instance->macroCall($method, $parameters);\n        }\n\n        /**\n         * Remove all items from the cache.\n         *\n         * @return bool\n         * @static\n         */        public static function flush()\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\FileStore $instance */\n                        return $instance->flush();\n        }\n\n        /**\n         * Get the Filesystem instance.\n         *\n         * @return \\\\Illuminate\\\\Filesystem\\\\Filesystem\n         * @static\n         */        public static function getFilesystem()\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\FileStore $instance */\n                        return $instance->getFilesystem();\n        }\n\n        /**\n         * Get the working directory of the cache.\n         *\n         * @return string\n         * @static\n         */        public static function getDirectory()\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\FileStore $instance */\n                        return $instance->getDirectory();\n        }\n\n        /**\n         * Get the cache key prefix.\n         *\n         * @return string\n         * @static\n         */        public static function getPrefix()\n        {\n                        /** @var \\\\Illuminate\\\\Cache\\\\FileStore $instance */\n                        return $instance->getPrefix();\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Config\\\\Repository\n     */    class Config {\n\n        /**\n         * Determine if the given configuration value exists.\n         *\n         * @param string $key\n         * @return bool\n         * @static\n         */        public static function has($key)\n        {\n                        /** @var \\\\Illuminate\\\\Config\\\\Repository $instance */\n                        return $instance->has($key);\n        }\n\n        /**\n         * Get the specified configuration value.\n         *\n         * @param array|string $key\n         * @param mixed $default\n         * @return mixed\n         * @static\n         */        public static function get($key, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Config\\\\Repository $instance */\n                        return $instance->get($key, $default);\n        }\n\n        /**\n         * Get many configuration values.\n         *\n         * @param array $keys\n         * @return array\n         * @static\n         */        public static function getMany($keys)\n        {\n                        /** @var \\\\Illuminate\\\\Config\\\\Repository $instance */\n                        return $instance->getMany($keys);\n        }\n\n        /**\n         * Set a given configuration value.\n         *\n         * @param array|string $key\n         * @param mixed $value\n         * @return void\n         * @static\n         */        public static function set($key, $value = null)\n        {\n                        /** @var \\\\Illuminate\\\\Config\\\\Repository $instance */\n                        $instance->set($key, $value);\n        }\n\n        /**\n         * Prepend a value onto an array configuration value.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void\n         * @static\n         */        public static function prepend($key, $value)\n        {\n                        /** @var \\\\Illuminate\\\\Config\\\\Repository $instance */\n                        $instance->prepend($key, $value);\n        }\n\n        /**\n         * Push a value onto an array configuration value.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void\n         * @static\n         */        public static function push($key, $value)\n        {\n                        /** @var \\\\Illuminate\\\\Config\\\\Repository $instance */\n                        $instance->push($key, $value);\n        }\n\n        /**\n         * Get all of the configuration items for the application.\n         *\n         * @return array\n         * @static\n         */        public static function all()\n        {\n                        /** @var \\\\Illuminate\\\\Config\\\\Repository $instance */\n                        return $instance->all();\n        }\n\n        /**\n         * Determine if the given configuration option exists.\n         *\n         * @param string $key\n         * @return bool\n         * @static\n         */        public static function offsetExists($key)\n        {\n                        /** @var \\\\Illuminate\\\\Config\\\\Repository $instance */\n                        return $instance->offsetExists($key);\n        }\n\n        /**\n         * Get a configuration option.\n         *\n         * @param string $key\n         * @return mixed\n         * @static\n         */        public static function offsetGet($key)\n        {\n                        /** @var \\\\Illuminate\\\\Config\\\\Repository $instance */\n                        return $instance->offsetGet($key);\n        }\n\n        /**\n         * Set a configuration option.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void\n         * @static\n         */        public static function offsetSet($key, $value)\n        {\n                        /** @var \\\\Illuminate\\\\Config\\\\Repository $instance */\n                        $instance->offsetSet($key, $value);\n        }\n\n        /**\n         * Unset a configuration option.\n         *\n         * @param string $key\n         * @return void\n         * @static\n         */        public static function offsetUnset($key)\n        {\n                        /** @var \\\\Illuminate\\\\Config\\\\Repository $instance */\n                        $instance->offsetUnset($key);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Cookie\\\\CookieJar\n     */    class Cookie {\n\n        /**\n         * Create a new cookie instance.\n         *\n         * @param string $name\n         * @param string $value\n         * @param int $minutes\n         * @param string|null $path\n         * @param string|null $domain\n         * @param bool|null $secure\n         * @param bool $httpOnly\n         * @param bool $raw\n         * @param string|null $sameSite\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Cookie\n         * @static\n         */        public static function make($name, $value, $minutes = 0, $path = null, $domain = null, $secure = null, $httpOnly = true, $raw = false, $sameSite = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cookie\\\\CookieJar $instance */\n                        return $instance->make($name, $value, $minutes, $path, $domain, $secure, $httpOnly, $raw, $sameSite);\n        }\n\n        /**\n         * Create a cookie that lasts \"forever\" (five years).\n         *\n         * @param string $name\n         * @param string $value\n         * @param string|null $path\n         * @param string|null $domain\n         * @param bool|null $secure\n         * @param bool $httpOnly\n         * @param bool $raw\n         * @param string|null $sameSite\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Cookie\n         * @static\n         */        public static function forever($name, $value, $path = null, $domain = null, $secure = null, $httpOnly = true, $raw = false, $sameSite = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cookie\\\\CookieJar $instance */\n                        return $instance->forever($name, $value, $path, $domain, $secure, $httpOnly, $raw, $sameSite);\n        }\n\n        /**\n         * Expire the given cookie.\n         *\n         * @param string $name\n         * @param string|null $path\n         * @param string|null $domain\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Cookie\n         * @static\n         */        public static function forget($name, $path = null, $domain = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cookie\\\\CookieJar $instance */\n                        return $instance->forget($name, $path, $domain);\n        }\n\n        /**\n         * Determine if a cookie has been queued.\n         *\n         * @param string $key\n         * @param string|null $path\n         * @return bool\n         * @static\n         */        public static function hasQueued($key, $path = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cookie\\\\CookieJar $instance */\n                        return $instance->hasQueued($key, $path);\n        }\n\n        /**\n         * Get a queued cookie instance.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @param string|null $path\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Cookie|null\n         * @static\n         */        public static function queued($key, $default = null, $path = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cookie\\\\CookieJar $instance */\n                        return $instance->queued($key, $default, $path);\n        }\n\n        /**\n         * Queue a cookie to send with the next response.\n         *\n         * @param array $parameters\n         * @return void\n         * @static\n         */        public static function queue(...$parameters)\n        {\n                        /** @var \\\\Illuminate\\\\Cookie\\\\CookieJar $instance */\n                        $instance->queue(...$parameters);\n        }\n\n        /**\n         * Remove a cookie from the queue.\n         *\n         * @param string $name\n         * @param string|null $path\n         * @return void\n         * @static\n         */        public static function unqueue($name, $path = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cookie\\\\CookieJar $instance */\n                        $instance->unqueue($name, $path);\n        }\n\n        /**\n         * Set the default path and domain for the jar.\n         *\n         * @param string $path\n         * @param string $domain\n         * @param bool $secure\n         * @param string|null $sameSite\n         * @return \\\\Illuminate\\\\Cookie\\\\CookieJar\n         * @static\n         */        public static function setDefaultPathAndDomain($path, $domain, $secure = false, $sameSite = null)\n        {\n                        /** @var \\\\Illuminate\\\\Cookie\\\\CookieJar $instance */\n                        return $instance->setDefaultPathAndDomain($path, $domain, $secure, $sameSite);\n        }\n\n        /**\n         * Get the cookies which have been queued for the next request.\n         *\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Cookie[]\n         * @static\n         */        public static function getQueuedCookies()\n        {\n                        /** @var \\\\Illuminate\\\\Cookie\\\\CookieJar $instance */\n                        return $instance->getQueuedCookies();\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\Cookie\\\\CookieJar::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\Cookie\\\\CookieJar::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\Cookie\\\\CookieJar::hasMacro($name);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Encryption\\\\Encrypter\n     */    class Crypt {\n\n        /**\n         * Determine if the given key and cipher combination is valid.\n         *\n         * @param string $key\n         * @param string $cipher\n         * @return bool\n         * @static\n         */        public static function supported($key, $cipher)\n        {\n                        return \\\\Illuminate\\\\Encryption\\\\Encrypter::supported($key, $cipher);\n        }\n\n        /**\n         * Create a new encryption key for the given cipher.\n         *\n         * @param string $cipher\n         * @return string\n         * @static\n         */        public static function generateKey($cipher)\n        {\n                        return \\\\Illuminate\\\\Encryption\\\\Encrypter::generateKey($cipher);\n        }\n\n        /**\n         * Encrypt the given value.\n         *\n         * @param mixed $value\n         * @param bool $serialize\n         * @return string\n         * @throws \\\\Illuminate\\\\Contracts\\\\Encryption\\\\EncryptException\n         * @static\n         */        public static function encrypt($value, $serialize = true)\n        {\n                        /** @var \\\\Illuminate\\\\Encryption\\\\Encrypter $instance */\n                        return $instance->encrypt($value, $serialize);\n        }\n\n        /**\n         * Encrypt a string without serialization.\n         *\n         * @param string $value\n         * @return string\n         * @throws \\\\Illuminate\\\\Contracts\\\\Encryption\\\\EncryptException\n         * @static\n         */        public static function encryptString($value)\n        {\n                        /** @var \\\\Illuminate\\\\Encryption\\\\Encrypter $instance */\n                        return $instance->encryptString($value);\n        }\n\n        /**\n         * Decrypt the given value.\n         *\n         * @param string $payload\n         * @param bool $unserialize\n         * @return mixed\n         * @throws \\\\Illuminate\\\\Contracts\\\\Encryption\\\\DecryptException\n         * @static\n         */        public static function decrypt($payload, $unserialize = true)\n        {\n                        /** @var \\\\Illuminate\\\\Encryption\\\\Encrypter $instance */\n                        return $instance->decrypt($payload, $unserialize);\n        }\n\n        /**\n         * Decrypt the given string without unserialization.\n         *\n         * @param string $payload\n         * @return string\n         * @throws \\\\Illuminate\\\\Contracts\\\\Encryption\\\\DecryptException\n         * @static\n         */        public static function decryptString($payload)\n        {\n                        /** @var \\\\Illuminate\\\\Encryption\\\\Encrypter $instance */\n                        return $instance->decryptString($payload);\n        }\n\n        /**\n         * Get the encryption key.\n         *\n         * @return string\n         * @static\n         */        public static function getKey()\n        {\n                        /** @var \\\\Illuminate\\\\Encryption\\\\Encrypter $instance */\n                        return $instance->getKey();\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Database\\\\DatabaseManager\n     * @see \\\\Illuminate\\\\Database\\\\Connection\n     */    class DB {\n\n        /**\n         * Get a database connection instance.\n         *\n         * @param string|null $name\n         * @return \\\\Illuminate\\\\Database\\\\Connection\n         * @static\n         */        public static function connection($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\DatabaseManager $instance */\n                        return $instance->connection($name);\n        }\n\n        /**\n         * Disconnect from the given database and remove from local cache.\n         *\n         * @param string|null $name\n         * @return void\n         * @static\n         */        public static function purge($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\DatabaseManager $instance */\n                        $instance->purge($name);\n        }\n\n        /**\n         * Disconnect from the given database.\n         *\n         * @param string|null $name\n         * @return void\n         * @static\n         */        public static function disconnect($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\DatabaseManager $instance */\n                        $instance->disconnect($name);\n        }\n\n        /**\n         * Reconnect to the given database.\n         *\n         * @param string|null $name\n         * @return \\\\Illuminate\\\\Database\\\\Connection\n         * @static\n         */        public static function reconnect($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\DatabaseManager $instance */\n                        return $instance->reconnect($name);\n        }\n\n        /**\n         * Get the default connection name.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultConnection()\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\DatabaseManager $instance */\n                        return $instance->getDefaultConnection();\n        }\n\n        /**\n         * Set the default connection name.\n         *\n         * @param string $name\n         * @return void\n         * @static\n         */        public static function setDefaultConnection($name)\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\DatabaseManager $instance */\n                        $instance->setDefaultConnection($name);\n        }\n\n        /**\n         * Get all of the support drivers.\n         *\n         * @return array\n         * @static\n         */        public static function supportedDrivers()\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\DatabaseManager $instance */\n                        return $instance->supportedDrivers();\n        }\n\n        /**\n         * Get all of the drivers that are actually available.\n         *\n         * @return array\n         * @static\n         */        public static function availableDrivers()\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\DatabaseManager $instance */\n                        return $instance->availableDrivers();\n        }\n\n        /**\n         * Register an extension connection resolver.\n         *\n         * @param string $name\n         * @param callable $resolver\n         * @return void\n         * @static\n         */        public static function extend($name, $resolver)\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\DatabaseManager $instance */\n                        $instance->extend($name, $resolver);\n        }\n\n        /**\n         * Return all of the created connections.\n         *\n         * @return array\n         * @static\n         */        public static function getConnections()\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\DatabaseManager $instance */\n                        return $instance->getConnections();\n        }\n\n        /**\n         * Set the database reconnector callback.\n         *\n         * @param callable $reconnector\n         * @return void\n         * @static\n         */        public static function setReconnector($reconnector)\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\DatabaseManager $instance */\n                        $instance->setReconnector($reconnector);\n        }\n\n        /**\n         * Get a schema builder instance for the connection.\n         *\n         * @return \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder\n         * @static\n         */        public static function getSchemaBuilder()\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getSchemaBuilder();\n        }\n\n        /**\n         * Set the query grammar to the default implementation.\n         *\n         * @return void\n         * @static\n         */        public static function useDefaultQueryGrammar()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->useDefaultQueryGrammar();\n        }\n\n        /**\n         * Set the schema grammar to the default implementation.\n         *\n         * @return void\n         * @static\n         */        public static function useDefaultSchemaGrammar()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->useDefaultSchemaGrammar();\n        }\n\n        /**\n         * Set the query post processor to the default implementation.\n         *\n         * @return void\n         * @static\n         */        public static function useDefaultPostProcessor()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->useDefaultPostProcessor();\n        }\n\n        /**\n         * Begin a fluent query against a database table.\n         *\n         * @param \\\\Closure|\\\\Illuminate\\\\Database\\\\Query\\\\Builder|string $table\n         * @param string|null $as\n         * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n         * @static\n         */        public static function table($table, $as = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->table($table, $as);\n        }\n\n        /**\n         * Get a new query builder instance.\n         *\n         * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n         * @static\n         */        public static function query()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->query();\n        }\n\n        /**\n         * Run a select statement and return a single result.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param bool $useReadPdo\n         * @return mixed\n         * @static\n         */        public static function selectOne($query, $bindings = [], $useReadPdo = true)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->selectOne($query, $bindings, $useReadPdo);\n        }\n\n        /**\n         * Run a select statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return array\n         * @static\n         */        public static function selectFromWriteConnection($query, $bindings = [])\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->selectFromWriteConnection($query, $bindings);\n        }\n\n        /**\n         * Run a select statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param bool $useReadPdo\n         * @return array\n         * @static\n         */        public static function select($query, $bindings = [], $useReadPdo = true)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->select($query, $bindings, $useReadPdo);\n        }\n\n        /**\n         * Run a select statement against the database and returns a generator.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param bool $useReadPdo\n         * @return \\\\Generator\n         * @static\n         */        public static function cursor($query, $bindings = [], $useReadPdo = true)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->cursor($query, $bindings, $useReadPdo);\n        }\n\n        /**\n         * Run an insert statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return bool\n         * @static\n         */        public static function insert($query, $bindings = [])\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->insert($query, $bindings);\n        }\n\n        /**\n         * Run an update statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return int\n         * @static\n         */        public static function update($query, $bindings = [])\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->update($query, $bindings);\n        }\n\n        /**\n         * Run a delete statement against the database.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return int\n         * @static\n         */        public static function delete($query, $bindings = [])\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->delete($query, $bindings);\n        }\n\n        /**\n         * Execute an SQL statement and return the boolean result.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return bool\n         * @static\n         */        public static function statement($query, $bindings = [])\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->statement($query, $bindings);\n        }\n\n        /**\n         * Run an SQL statement and get the number of rows affected.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @return int\n         * @static\n         */        public static function affectingStatement($query, $bindings = [])\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->affectingStatement($query, $bindings);\n        }\n\n        /**\n         * Run a raw, unprepared query against the PDO connection.\n         *\n         * @param string $query\n         * @return bool\n         * @static\n         */        public static function unprepared($query)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->unprepared($query);\n        }\n\n        /**\n         * Execute the given callback in \"dry run\" mode.\n         *\n         * @param \\\\Closure $callback\n         * @return array\n         * @static\n         */        public static function pretend($callback)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->pretend($callback);\n        }\n\n        /**\n         * Bind values to their parameters in the given statement.\n         *\n         * @param \\\\PDOStatement $statement\n         * @param array $bindings\n         * @return void\n         * @static\n         */        public static function bindValues($statement, $bindings)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->bindValues($statement, $bindings);\n        }\n\n        /**\n         * Prepare the query bindings for execution.\n         *\n         * @param array $bindings\n         * @return array\n         * @static\n         */        public static function prepareBindings($bindings)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->prepareBindings($bindings);\n        }\n\n        /**\n         * Log a query in the connection's query log.\n         *\n         * @param string $query\n         * @param array $bindings\n         * @param float|null $time\n         * @return void\n         * @static\n         */        public static function logQuery($query, $bindings, $time = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->logQuery($query, $bindings, $time);\n        }\n\n        /**\n         * Register a database query listener with the connection.\n         *\n         * @param \\\\Closure $callback\n         * @return void\n         * @static\n         */        public static function listen($callback)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->listen($callback);\n        }\n\n        /**\n         * Get a new raw query expression.\n         *\n         * @param mixed $value\n         * @return \\\\Illuminate\\\\Database\\\\Query\\\\Expression\n         * @static\n         */        public static function raw($value)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->raw($value);\n        }\n\n        /**\n         * Indicate if any records have been modified.\n         *\n         * @param bool $value\n         * @return void\n         * @static\n         */        public static function recordsHaveBeenModified($value = true)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->recordsHaveBeenModified($value);\n        }\n\n        /**\n         * Is Doctrine available?\n         *\n         * @return bool\n         * @static\n         */        public static function isDoctrineAvailable()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->isDoctrineAvailable();\n        }\n\n        /**\n         * Get a Doctrine Schema Column instance.\n         *\n         * @param string $table\n         * @param string $column\n         * @return \\\\Doctrine\\\\DBAL\\\\Schema\\\\Column\n         * @static\n         */        public static function getDoctrineColumn($table, $column)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getDoctrineColumn($table, $column);\n        }\n\n        /**\n         * Get the Doctrine DBAL schema manager for the connection.\n         *\n         * @return \\\\Doctrine\\\\DBAL\\\\Schema\\\\AbstractSchemaManager\n         * @static\n         */        public static function getDoctrineSchemaManager()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getDoctrineSchemaManager();\n        }\n\n        /**\n         * Get the Doctrine DBAL database connection instance.\n         *\n         * @return \\\\Doctrine\\\\DBAL\\\\Connection\n         * @static\n         */        public static function getDoctrineConnection()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getDoctrineConnection();\n        }\n\n        /**\n         * Get the current PDO connection.\n         *\n         * @return \\\\PDO\n         * @static\n         */        public static function getPdo()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getPdo();\n        }\n\n        /**\n         * Get the current PDO connection parameter without executing any reconnect logic.\n         *\n         * @return \\\\PDO|\\\\Closure|null\n         * @static\n         */        public static function getRawPdo()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getRawPdo();\n        }\n\n        /**\n         * Get the current PDO connection used for reading.\n         *\n         * @return \\\\PDO\n         * @static\n         */        public static function getReadPdo()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getReadPdo();\n        }\n\n        /**\n         * Get the current read PDO connection parameter without executing any reconnect logic.\n         *\n         * @return \\\\PDO|\\\\Closure|null\n         * @static\n         */        public static function getRawReadPdo()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getRawReadPdo();\n        }\n\n        /**\n         * Set the PDO connection.\n         *\n         * @param \\\\PDO|\\\\Closure|null $pdo\n         * @return \\\\Illuminate\\\\Database\\\\MySqlConnection\n         * @static\n         */        public static function setPdo($pdo)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->setPdo($pdo);\n        }\n\n        /**\n         * Set the PDO connection used for reading.\n         *\n         * @param \\\\PDO|\\\\Closure|null $pdo\n         * @return \\\\Illuminate\\\\Database\\\\MySqlConnection\n         * @static\n         */        public static function setReadPdo($pdo)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->setReadPdo($pdo);\n        }\n\n        /**\n         * Get the database connection name.\n         *\n         * @return string|null\n         * @static\n         */        public static function getName()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getName();\n        }\n\n        /**\n         * Get an option from the configuration options.\n         *\n         * @param string|null $option\n         * @return mixed\n         * @static\n         */        public static function getConfig($option = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getConfig($option);\n        }\n\n        /**\n         * Get the PDO driver name.\n         *\n         * @return string\n         * @static\n         */        public static function getDriverName()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getDriverName();\n        }\n\n        /**\n         * Get the query grammar used by the connection.\n         *\n         * @return \\\\Illuminate\\\\Database\\\\Query\\\\Grammars\\\\Grammar\n         * @static\n         */        public static function getQueryGrammar()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getQueryGrammar();\n        }\n\n        /**\n         * Set the query grammar used by the connection.\n         *\n         * @param \\\\Illuminate\\\\Database\\\\Query\\\\Grammars\\\\Grammar $grammar\n         * @return \\\\Illuminate\\\\Database\\\\MySqlConnection\n         * @static\n         */        public static function setQueryGrammar($grammar)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->setQueryGrammar($grammar);\n        }\n\n        /**\n         * Get the schema grammar used by the connection.\n         *\n         * @return \\\\Illuminate\\\\Database\\\\Schema\\\\Grammars\\\\Grammar\n         * @static\n         */        public static function getSchemaGrammar()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getSchemaGrammar();\n        }\n\n        /**\n         * Set the schema grammar used by the connection.\n         *\n         * @param \\\\Illuminate\\\\Database\\\\Schema\\\\Grammars\\\\Grammar $grammar\n         * @return \\\\Illuminate\\\\Database\\\\MySqlConnection\n         * @static\n         */        public static function setSchemaGrammar($grammar)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->setSchemaGrammar($grammar);\n        }\n\n        /**\n         * Get the query post processor used by the connection.\n         *\n         * @return \\\\Illuminate\\\\Database\\\\Query\\\\Processors\\\\Processor\n         * @static\n         */        public static function getPostProcessor()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getPostProcessor();\n        }\n\n        /**\n         * Set the query post processor used by the connection.\n         *\n         * @param \\\\Illuminate\\\\Database\\\\Query\\\\Processors\\\\Processor $processor\n         * @return \\\\Illuminate\\\\Database\\\\MySqlConnection\n         * @static\n         */        public static function setPostProcessor($processor)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->setPostProcessor($processor);\n        }\n\n        /**\n         * Get the event dispatcher used by the connection.\n         *\n         * @return \\\\Illuminate\\\\Contracts\\\\Events\\\\Dispatcher\n         * @static\n         */        public static function getEventDispatcher()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getEventDispatcher();\n        }\n\n        /**\n         * Set the event dispatcher instance on the connection.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\Events\\\\Dispatcher $events\n         * @return \\\\Illuminate\\\\Database\\\\MySqlConnection\n         * @static\n         */        public static function setEventDispatcher($events)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->setEventDispatcher($events);\n        }\n\n        /**\n         * Unset the event dispatcher for this connection.\n         *\n         * @return void\n         * @static\n         */        public static function unsetEventDispatcher()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->unsetEventDispatcher();\n        }\n\n        /**\n         * Determine if the connection is in a \"dry run\".\n         *\n         * @return bool\n         * @static\n         */        public static function pretending()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->pretending();\n        }\n\n        /**\n         * Get the connection query log.\n         *\n         * @return array\n         * @static\n         */        public static function getQueryLog()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getQueryLog();\n        }\n\n        /**\n         * Clear the query log.\n         *\n         * @return void\n         * @static\n         */        public static function flushQueryLog()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->flushQueryLog();\n        }\n\n        /**\n         * Enable the query log on the connection.\n         *\n         * @return void\n         * @static\n         */        public static function enableQueryLog()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->enableQueryLog();\n        }\n\n        /**\n         * Disable the query log on the connection.\n         *\n         * @return void\n         * @static\n         */        public static function disableQueryLog()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->disableQueryLog();\n        }\n\n        /**\n         * Determine whether we're logging queries.\n         *\n         * @return bool\n         * @static\n         */        public static function logging()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->logging();\n        }\n\n        /**\n         * Get the name of the connected database.\n         *\n         * @return string\n         * @static\n         */        public static function getDatabaseName()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getDatabaseName();\n        }\n\n        /**\n         * Set the name of the connected database.\n         *\n         * @param string $database\n         * @return \\\\Illuminate\\\\Database\\\\MySqlConnection\n         * @static\n         */        public static function setDatabaseName($database)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->setDatabaseName($database);\n        }\n\n        /**\n         * Get the table prefix for the connection.\n         *\n         * @return string\n         * @static\n         */        public static function getTablePrefix()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->getTablePrefix();\n        }\n\n        /**\n         * Set the table prefix in use by the connection.\n         *\n         * @param string $prefix\n         * @return \\\\Illuminate\\\\Database\\\\MySqlConnection\n         * @static\n         */        public static function setTablePrefix($prefix)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->setTablePrefix($prefix);\n        }\n\n        /**\n         * Set the table prefix and return the grammar.\n         *\n         * @param \\\\Illuminate\\\\Database\\\\Grammar $grammar\n         * @return \\\\Illuminate\\\\Database\\\\Grammar\n         * @static\n         */        public static function withTablePrefix($grammar)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->withTablePrefix($grammar);\n        }\n\n        /**\n         * Register a connection resolver.\n         *\n         * @param string $driver\n         * @param \\\\Closure $callback\n         * @return void\n         * @static\n         */        public static function resolverFor($driver, $callback)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        \\\\Illuminate\\\\Database\\\\MySqlConnection::resolverFor($driver, $callback);\n        }\n\n        /**\n         * Get the connection resolver for the given driver.\n         *\n         * @param string $driver\n         * @return mixed\n         * @static\n         */        public static function getResolver($driver)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        return \\\\Illuminate\\\\Database\\\\MySqlConnection::getResolver($driver);\n        }\n\n        /**\n         * Execute a Closure within a transaction.\n         *\n         * @param \\\\Closure $callback\n         * @param int $attempts\n         * @return mixed\n         * @throws \\\\Throwable\n         * @static\n         */        public static function transaction($callback, $attempts = 1)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->transaction($callback, $attempts);\n        }\n\n        /**\n         * Start a new database transaction.\n         *\n         * @return void\n         * @throws \\\\Throwable\n         * @static\n         */        public static function beginTransaction()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->beginTransaction();\n        }\n\n        /**\n         * Commit the active database transaction.\n         *\n         * @return void\n         * @throws \\\\Throwable\n         * @static\n         */        public static function commit()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->commit();\n        }\n\n        /**\n         * Rollback the active database transaction.\n         *\n         * @param int|null $toLevel\n         * @return void\n         * @throws \\\\Throwable\n         * @static\n         */        public static function rollBack($toLevel = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        $instance->rollBack($toLevel);\n        }\n\n        /**\n         * Get the number of active transactions.\n         *\n         * @return int\n         * @static\n         */        public static function transactionLevel()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Connection\n                        /** @var \\\\Illuminate\\\\Database\\\\MySqlConnection $instance */\n                        return $instance->transactionLevel();\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Events\\\\Dispatcher\n     */    class Event {\n\n        /**\n         * Register an event listener with the dispatcher.\n         *\n         * @param string|array $events\n         * @param \\\\Closure|string $listener\n         * @return void\n         * @static\n         */        public static function listen($events, $listener)\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        $instance->listen($events, $listener);\n        }\n\n        /**\n         * Determine if a given event has listeners.\n         *\n         * @param string $eventName\n         * @return bool\n         * @static\n         */        public static function hasListeners($eventName)\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        return $instance->hasListeners($eventName);\n        }\n\n        /**\n         * Determine if the given event has any wildcard listeners.\n         *\n         * @param string $eventName\n         * @return bool\n         * @static\n         */        public static function hasWildcardListeners($eventName)\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        return $instance->hasWildcardListeners($eventName);\n        }\n\n        /**\n         * Register an event and payload to be fired later.\n         *\n         * @param string $event\n         * @param array $payload\n         * @return void\n         * @static\n         */        public static function push($event, $payload = [])\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        $instance->push($event, $payload);\n        }\n\n        /**\n         * Flush a set of pushed events.\n         *\n         * @param string $event\n         * @return void\n         * @static\n         */        public static function flush($event)\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        $instance->flush($event);\n        }\n\n        /**\n         * Register an event subscriber with the dispatcher.\n         *\n         * @param object|string $subscriber\n         * @return void\n         * @static\n         */        public static function subscribe($subscriber)\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        $instance->subscribe($subscriber);\n        }\n\n        /**\n         * Fire an event until the first non-null response is returned.\n         *\n         * @param string|object $event\n         * @param mixed $payload\n         * @return array|null\n         * @static\n         */        public static function until($event, $payload = [])\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        return $instance->until($event, $payload);\n        }\n\n        /**\n         * Fire an event and call the listeners.\n         *\n         * @param string|object $event\n         * @param mixed $payload\n         * @param bool $halt\n         * @return array|null\n         * @static\n         */        public static function dispatch($event, $payload = [], $halt = false)\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        return $instance->dispatch($event, $payload, $halt);\n        }\n\n        /**\n         * Get all of the listeners for a given event name.\n         *\n         * @param string $eventName\n         * @return array\n         * @static\n         */        public static function getListeners($eventName)\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        return $instance->getListeners($eventName);\n        }\n\n        /**\n         * Register an event listener with the dispatcher.\n         *\n         * @param \\\\Closure|string $listener\n         * @param bool $wildcard\n         * @return \\\\Closure\n         * @static\n         */        public static function makeListener($listener, $wildcard = false)\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        return $instance->makeListener($listener, $wildcard);\n        }\n\n        /**\n         * Create a class based listener using the IoC container.\n         *\n         * @param string $listener\n         * @param bool $wildcard\n         * @return \\\\Closure\n         * @static\n         */        public static function createClassListener($listener, $wildcard = false)\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        return $instance->createClassListener($listener, $wildcard);\n        }\n\n        /**\n         * Remove a set of listeners from the dispatcher.\n         *\n         * @param string $event\n         * @return void\n         * @static\n         */        public static function forget($event)\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        $instance->forget($event);\n        }\n\n        /**\n         * Forget all of the pushed listeners.\n         *\n         * @return void\n         * @static\n         */        public static function forgetPushed()\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        $instance->forgetPushed();\n        }\n\n        /**\n         * Set the queue resolver implementation.\n         *\n         * @param callable $resolver\n         * @return \\\\Illuminate\\\\Events\\\\Dispatcher\n         * @static\n         */        public static function setQueueResolver($resolver)\n        {\n                        /** @var \\\\Illuminate\\\\Events\\\\Dispatcher $instance */\n                        return $instance->setQueueResolver($resolver);\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\Events\\\\Dispatcher::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\Events\\\\Dispatcher::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\Events\\\\Dispatcher::hasMacro($name);\n        }\n\n        /**\n         * Assert if an event was dispatched based on a truth-test callback.\n         *\n         * @param string $event\n         * @param callable|int|null $callback\n         * @return void\n         * @static\n         */        public static function assertDispatched($event, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\EventFake $instance */\n                        $instance->assertDispatched($event, $callback);\n        }\n\n        /**\n         * Assert if a event was dispatched a number of times.\n         *\n         * @param string $event\n         * @param int $times\n         * @return void\n         * @static\n         */        public static function assertDispatchedTimes($event, $times = 1)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\EventFake $instance */\n                        $instance->assertDispatchedTimes($event, $times);\n        }\n\n        /**\n         * Determine if an event was dispatched based on a truth-test callback.\n         *\n         * @param string $event\n         * @param callable|null $callback\n         * @return void\n         * @static\n         */        public static function assertNotDispatched($event, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\EventFake $instance */\n                        $instance->assertNotDispatched($event, $callback);\n        }\n\n        /**\n         * Get all of the events matching a truth-test callback.\n         *\n         * @param string $event\n         * @param callable|null $callback\n         * @return \\\\Illuminate\\\\Support\\\\Collection\n         * @static\n         */        public static function dispatched($event, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\EventFake $instance */\n                        return $instance->dispatched($event, $callback);\n        }\n\n        /**\n         * Determine if the given event has been dispatched.\n         *\n         * @param string $event\n         * @return bool\n         * @static\n         */        public static function hasDispatched($event)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\EventFake $instance */\n                        return $instance->hasDispatched($event);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Filesystem\\\\Filesystem\n     */    class File {\n\n        /**\n         * Determine if a file or directory exists.\n         *\n         * @param string $path\n         * @return bool\n         * @static\n         */        public static function exists($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->exists($path);\n        }\n\n        /**\n         * Determine if a file or directory is missing.\n         *\n         * @param string $path\n         * @return bool\n         * @static\n         */        public static function missing($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->missing($path);\n        }\n\n        /**\n         * Get the contents of a file.\n         *\n         * @param string $path\n         * @param bool $lock\n         * @return string\n         * @throws \\\\Illuminate\\\\Contracts\\\\Filesystem\\\\FileNotFoundException\n         * @static\n         */        public static function get($path, $lock = false)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->get($path, $lock);\n        }\n\n        /**\n         * Get contents of a file with shared access.\n         *\n         * @param string $path\n         * @return string\n         * @static\n         */        public static function sharedGet($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->sharedGet($path);\n        }\n\n        /**\n         * Get the returned value of a file.\n         *\n         * @param string $path\n         * @return mixed\n         * @throws \\\\Illuminate\\\\Contracts\\\\Filesystem\\\\FileNotFoundException\n         * @static\n         */        public static function getRequire($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->getRequire($path);\n        }\n\n        /**\n         * Require the given file once.\n         *\n         * @param string $file\n         * @return mixed\n         * @static\n         */        public static function requireOnce($file)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->requireOnce($file);\n        }\n\n        /**\n         * Get the MD5 hash of the file at the given path.\n         *\n         * @param string $path\n         * @return string\n         * @static\n         */        public static function hash($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->hash($path);\n        }\n\n        /**\n         * Write the contents of a file.\n         *\n         * @param string $path\n         * @param string $contents\n         * @param bool $lock\n         * @return int|bool\n         * @static\n         */        public static function put($path, $contents, $lock = false)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->put($path, $contents, $lock);\n        }\n\n        /**\n         * Write the contents of a file, replacing it atomically if it already exists.\n         *\n         * @param string $path\n         * @param string $content\n         * @return void\n         * @static\n         */        public static function replace($path, $content)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        $instance->replace($path, $content);\n        }\n\n        /**\n         * Prepend to a file.\n         *\n         * @param string $path\n         * @param string $data\n         * @return int\n         * @static\n         */        public static function prepend($path, $data)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->prepend($path, $data);\n        }\n\n        /**\n         * Append to a file.\n         *\n         * @param string $path\n         * @param string $data\n         * @return int\n         * @static\n         */        public static function append($path, $data)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->append($path, $data);\n        }\n\n        /**\n         * Get or set UNIX mode of a file or directory.\n         *\n         * @param string $path\n         * @param int|null $mode\n         * @return mixed\n         * @static\n         */        public static function chmod($path, $mode = null)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->chmod($path, $mode);\n        }\n\n        /**\n         * Delete the file at a given path.\n         *\n         * @param string|array $paths\n         * @return bool\n         * @static\n         */        public static function delete($paths)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->delete($paths);\n        }\n\n        /**\n         * Move a file to a new location.\n         *\n         * @param string $path\n         * @param string $target\n         * @return bool\n         * @static\n         */        public static function move($path, $target)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->move($path, $target);\n        }\n\n        /**\n         * Copy a file to a new location.\n         *\n         * @param string $path\n         * @param string $target\n         * @return bool\n         * @static\n         */        public static function copy($path, $target)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->copy($path, $target);\n        }\n\n        /**\n         * Create a symlink to the target file or directory. On Windows, a hard link is created if the target is a file.\n         *\n         * @param string $target\n         * @param string $link\n         * @return void\n         * @static\n         */        public static function link($target, $link)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        $instance->link($target, $link);\n        }\n\n        /**\n         * Extract the file name from a file path.\n         *\n         * @param string $path\n         * @return string\n         * @static\n         */        public static function name($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->name($path);\n        }\n\n        /**\n         * Extract the trailing name component from a file path.\n         *\n         * @param string $path\n         * @return string\n         * @static\n         */        public static function basename($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->basename($path);\n        }\n\n        /**\n         * Extract the parent directory from a file path.\n         *\n         * @param string $path\n         * @return string\n         * @static\n         */        public static function dirname($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->dirname($path);\n        }\n\n        /**\n         * Extract the file extension from a file path.\n         *\n         * @param string $path\n         * @return string\n         * @static\n         */        public static function extension($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->extension($path);\n        }\n\n        /**\n         * Get the file type of a given file.\n         *\n         * @param string $path\n         * @return string\n         * @static\n         */        public static function type($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->type($path);\n        }\n\n        /**\n         * Get the mime-type of a given file.\n         *\n         * @param string $path\n         * @return string|false\n         * @static\n         */        public static function mimeType($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->mimeType($path);\n        }\n\n        /**\n         * Get the file size of a given file.\n         *\n         * @param string $path\n         * @return int\n         * @static\n         */        public static function size($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->size($path);\n        }\n\n        /**\n         * Get the file's last modification time.\n         *\n         * @param string $path\n         * @return int\n         * @static\n         */        public static function lastModified($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->lastModified($path);\n        }\n\n        /**\n         * Determine if the given path is a directory.\n         *\n         * @param string $directory\n         * @return bool\n         * @static\n         */        public static function isDirectory($directory)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->isDirectory($directory);\n        }\n\n        /**\n         * Determine if the given path is readable.\n         *\n         * @param string $path\n         * @return bool\n         * @static\n         */        public static function isReadable($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->isReadable($path);\n        }\n\n        /**\n         * Determine if the given path is writable.\n         *\n         * @param string $path\n         * @return bool\n         * @static\n         */        public static function isWritable($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->isWritable($path);\n        }\n\n        /**\n         * Determine if the given path is a file.\n         *\n         * @param string $file\n         * @return bool\n         * @static\n         */        public static function isFile($file)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->isFile($file);\n        }\n\n        /**\n         * Find path names matching a given pattern.\n         *\n         * @param string $pattern\n         * @param int $flags\n         * @return array\n         * @static\n         */        public static function glob($pattern, $flags = 0)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->glob($pattern, $flags);\n        }\n\n        /**\n         * Get an array of all files in a directory.\n         *\n         * @param string $directory\n         * @param bool $hidden\n         * @return \\\\Symfony\\\\Component\\\\Finder\\\\SplFileInfo[]\n         * @static\n         */        public static function files($directory, $hidden = false)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->files($directory, $hidden);\n        }\n\n        /**\n         * Get all of the files from the given directory (recursive).\n         *\n         * @param string $directory\n         * @param bool $hidden\n         * @return \\\\Symfony\\\\Component\\\\Finder\\\\SplFileInfo[]\n         * @static\n         */        public static function allFiles($directory, $hidden = false)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->allFiles($directory, $hidden);\n        }\n\n        /**\n         * Get all of the directories within a given directory.\n         *\n         * @param string $directory\n         * @return array\n         * @static\n         */        public static function directories($directory)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->directories($directory);\n        }\n\n        /**\n         * Ensure a directory exists.\n         *\n         * @param string $path\n         * @param int $mode\n         * @param bool $recursive\n         * @return void\n         * @static\n         */        public static function ensureDirectoryExists($path, $mode = 493, $recursive = true)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        $instance->ensureDirectoryExists($path, $mode, $recursive);\n        }\n\n        /**\n         * Create a directory.\n         *\n         * @param string $path\n         * @param int $mode\n         * @param bool $recursive\n         * @param bool $force\n         * @return bool\n         * @static\n         */        public static function makeDirectory($path, $mode = 493, $recursive = false, $force = false)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->makeDirectory($path, $mode, $recursive, $force);\n        }\n\n        /**\n         * Move a directory.\n         *\n         * @param string $from\n         * @param string $to\n         * @param bool $overwrite\n         * @return bool\n         * @static\n         */        public static function moveDirectory($from, $to, $overwrite = false)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->moveDirectory($from, $to, $overwrite);\n        }\n\n        /**\n         * Copy a directory from one location to another.\n         *\n         * @param string $directory\n         * @param string $destination\n         * @param int|null $options\n         * @return bool\n         * @static\n         */        public static function copyDirectory($directory, $destination, $options = null)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->copyDirectory($directory, $destination, $options);\n        }\n\n        /**\n         * Recursively delete a directory.\n         *\n         * The directory itself may be optionally preserved.\n         *\n         * @param string $directory\n         * @param bool $preserve\n         * @return bool\n         * @static\n         */        public static function deleteDirectory($directory, $preserve = false)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->deleteDirectory($directory, $preserve);\n        }\n\n        /**\n         * Remove all of the directories within a given directory.\n         *\n         * @param string $directory\n         * @return bool\n         * @static\n         */        public static function deleteDirectories($directory)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->deleteDirectories($directory);\n        }\n\n        /**\n         * Empty the specified directory of all files and folders.\n         *\n         * @param string $directory\n         * @return bool\n         * @static\n         */        public static function cleanDirectory($directory)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\Filesystem $instance */\n                        return $instance->cleanDirectory($directory);\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\Filesystem\\\\Filesystem::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\Filesystem\\\\Filesystem::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\Filesystem\\\\Filesystem::hasMacro($name);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Contracts\\\\Auth\\\\Access\\\\Gate\n     */    class Gate {\n\n        /**\n         * Determine if a given ability has been defined.\n         *\n         * @param string|array $ability\n         * @return bool\n         * @static\n         */        public static function has($ability)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->has($ability);\n        }\n\n        /**\n         * Define a new ability.\n         *\n         * @param string $ability\n         * @param callable|string $callback\n         * @return \\\\Illuminate\\\\Auth\\\\Access\\\\Gate\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function define($ability, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->define($ability, $callback);\n        }\n\n        /**\n         * Define abilities for a resource.\n         *\n         * @param string $name\n         * @param string $class\n         * @param array|null $abilities\n         * @return \\\\Illuminate\\\\Auth\\\\Access\\\\Gate\n         * @static\n         */        public static function resource($name, $class, $abilities = null)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->resource($name, $class, $abilities);\n        }\n\n        /**\n         * Define a policy class for a given class type.\n         *\n         * @param string $class\n         * @param string $policy\n         * @return \\\\Illuminate\\\\Auth\\\\Access\\\\Gate\n         * @static\n         */        public static function policy($class, $policy)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->policy($class, $policy);\n        }\n\n        /**\n         * Register a callback to run before all Gate checks.\n         *\n         * @param callable $callback\n         * @return \\\\Illuminate\\\\Auth\\\\Access\\\\Gate\n         * @static\n         */        public static function before($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->before($callback);\n        }\n\n        /**\n         * Register a callback to run after all Gate checks.\n         *\n         * @param callable $callback\n         * @return \\\\Illuminate\\\\Auth\\\\Access\\\\Gate\n         * @static\n         */        public static function after($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->after($callback);\n        }\n\n        /**\n         * Determine if the given ability should be granted for the current user.\n         *\n         * @param string $ability\n         * @param array|mixed $arguments\n         * @return bool\n         * @static\n         */        public static function allows($ability, $arguments = [])\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->allows($ability, $arguments);\n        }\n\n        /**\n         * Determine if the given ability should be denied for the current user.\n         *\n         * @param string $ability\n         * @param array|mixed $arguments\n         * @return bool\n         * @static\n         */        public static function denies($ability, $arguments = [])\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->denies($ability, $arguments);\n        }\n\n        /**\n         * Determine if all of the given abilities should be granted for the current user.\n         *\n         * @param \\\\Illuminate\\\\Auth\\\\Access\\\\iterable|string $abilities\n         * @param array|mixed $arguments\n         * @return bool\n         * @static\n         */        public static function check($abilities, $arguments = [])\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->check($abilities, $arguments);\n        }\n\n        /**\n         * Determine if any one of the given abilities should be granted for the current user.\n         *\n         * @param \\\\Illuminate\\\\Auth\\\\Access\\\\iterable|string $abilities\n         * @param array|mixed $arguments\n         * @return bool\n         * @static\n         */        public static function any($abilities, $arguments = [])\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->any($abilities, $arguments);\n        }\n\n        /**\n         * Determine if all of the given abilities should be denied for the current user.\n         *\n         * @param \\\\Illuminate\\\\Auth\\\\Access\\\\iterable|string $abilities\n         * @param array|mixed $arguments\n         * @return bool\n         * @static\n         */        public static function none($abilities, $arguments = [])\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->none($abilities, $arguments);\n        }\n\n        /**\n         * Determine if the given ability should be granted for the current user.\n         *\n         * @param string $ability\n         * @param array|mixed $arguments\n         * @return \\\\Illuminate\\\\Auth\\\\Access\\\\Response\n         * @throws \\\\Illuminate\\\\Auth\\\\Access\\\\AuthorizationException\n         * @static\n         */        public static function authorize($ability, $arguments = [])\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->authorize($ability, $arguments);\n        }\n\n        /**\n         * Inspect the user for the given ability.\n         *\n         * @param string $ability\n         * @param array|mixed $arguments\n         * @return \\\\Illuminate\\\\Auth\\\\Access\\\\Response\n         * @static\n         */        public static function inspect($ability, $arguments = [])\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->inspect($ability, $arguments);\n        }\n\n        /**\n         * Get the raw result from the authorization callback.\n         *\n         * @param string $ability\n         * @param array|mixed $arguments\n         * @return mixed\n         * @throws \\\\Illuminate\\\\Auth\\\\Access\\\\AuthorizationException\n         * @static\n         */        public static function raw($ability, $arguments = [])\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->raw($ability, $arguments);\n        }\n\n        /**\n         * Get a policy instance for a given class.\n         *\n         * @param object|string $class\n         * @return mixed\n         * @static\n         */        public static function getPolicyFor($class)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->getPolicyFor($class);\n        }\n\n        /**\n         * Specify a callback to be used to guess policy names.\n         *\n         * @param callable $callback\n         * @return \\\\Illuminate\\\\Auth\\\\Access\\\\Gate\n         * @static\n         */        public static function guessPolicyNamesUsing($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->guessPolicyNamesUsing($callback);\n        }\n\n        /**\n         * Build a policy class instance of the given type.\n         *\n         * @param object|string $class\n         * @return mixed\n         * @throws \\\\Illuminate\\\\Contracts\\\\Container\\\\BindingResolutionException\n         * @static\n         */        public static function resolvePolicy($class)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->resolvePolicy($class);\n        }\n\n        /**\n         * Get a gate instance for the given user.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\Auth\\\\Authenticatable|mixed $user\n         * @return static\n         * @static\n         */        public static function forUser($user)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->forUser($user);\n        }\n\n        /**\n         * Get all of the defined abilities.\n         *\n         * @return array\n         * @static\n         */        public static function abilities()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->abilities();\n        }\n\n        /**\n         * Get all of the defined policies.\n         *\n         * @return array\n         * @static\n         */        public static function policies()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Access\\\\Gate $instance */\n                        return $instance->policies();\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Hashing\\\\HashManager\n     */    class Hash {\n\n        /**\n         * Create an instance of the Bcrypt hash Driver.\n         *\n         * @return \\\\Illuminate\\\\Hashing\\\\BcryptHasher\n         * @static\n         */        public static function createBcryptDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Hashing\\\\HashManager $instance */\n                        return $instance->createBcryptDriver();\n        }\n\n        /**\n         * Create an instance of the Argon2i hash Driver.\n         *\n         * @return \\\\Illuminate\\\\Hashing\\\\ArgonHasher\n         * @static\n         */        public static function createArgonDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Hashing\\\\HashManager $instance */\n                        return $instance->createArgonDriver();\n        }\n\n        /**\n         * Create an instance of the Argon2id hash Driver.\n         *\n         * @return \\\\Illuminate\\\\Hashing\\\\Argon2IdHasher\n         * @static\n         */        public static function createArgon2idDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Hashing\\\\HashManager $instance */\n                        return $instance->createArgon2idDriver();\n        }\n\n        /**\n         * Get information about the given hashed value.\n         *\n         * @param string $hashedValue\n         * @return array\n         * @static\n         */        public static function info($hashedValue)\n        {\n                        /** @var \\\\Illuminate\\\\Hashing\\\\HashManager $instance */\n                        return $instance->info($hashedValue);\n        }\n\n        /**\n         * Hash the given value.\n         *\n         * @param string $value\n         * @param array $options\n         * @return string\n         * @static\n         */        public static function make($value, $options = [])\n        {\n                        /** @var \\\\Illuminate\\\\Hashing\\\\HashManager $instance */\n                        return $instance->make($value, $options);\n        }\n\n        /**\n         * Check the given plain value against a hash.\n         *\n         * @param string $value\n         * @param string $hashedValue\n         * @param array $options\n         * @return bool\n         * @static\n         */        public static function check($value, $hashedValue, $options = [])\n        {\n                        /** @var \\\\Illuminate\\\\Hashing\\\\HashManager $instance */\n                        return $instance->check($value, $hashedValue, $options);\n        }\n\n        /**\n         * Check if the given hash has been hashed using the given options.\n         *\n         * @param string $hashedValue\n         * @param array $options\n         * @return bool\n         * @static\n         */        public static function needsRehash($hashedValue, $options = [])\n        {\n                        /** @var \\\\Illuminate\\\\Hashing\\\\HashManager $instance */\n                        return $instance->needsRehash($hashedValue, $options);\n        }\n\n        /**\n         * Get the default driver name.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Hashing\\\\HashManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n\n        /**\n         * Get a driver instance.\n         *\n         * @param string|null $driver\n         * @return mixed\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function driver($driver = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Support\\\\Manager\n                        /** @var \\\\Illuminate\\\\Hashing\\\\HashManager $instance */\n                        return $instance->driver($driver);\n        }\n\n        /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Hashing\\\\HashManager\n         * @static\n         */        public static function extend($driver, $callback)\n        {\n            //Method inherited from \\\\Illuminate\\\\Support\\\\Manager\n                        /** @var \\\\Illuminate\\\\Hashing\\\\HashManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n\n        /**\n         * Get all of the created \"drivers\".\n         *\n         * @return array\n         * @static\n         */        public static function getDrivers()\n        {\n            //Method inherited from \\\\Illuminate\\\\Support\\\\Manager\n                        /** @var \\\\Illuminate\\\\Hashing\\\\HashManager $instance */\n                        return $instance->getDrivers();\n        }\n            }\n\n    /**\n     *\n     *\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest asJson()\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest asForm()\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest attach(string $name, string $contents, string|null $filename = null, array $headers = [])\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest asMultipart()\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest bodyFormat(string $format)\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest contentType(string $contentType)\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest acceptJson()\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest accept(string $contentType)\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest retry(int $times, int $sleep = 0)\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest withHeaders(array $headers)\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest withBasicAuth(string $username, string $password)\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest withDigestAuth(string $username, string $password)\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest withToken(string $token, string $type = 'Bearer')\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest withCookies(array $cookies, string $domain)\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest withoutRedirecting()\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest withoutVerifying()\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest timeout(int $seconds)\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest withOptions(array $options)\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest beforeSending(callable $callback)\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\Response get(string $url, array $query = [])\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\Response post(string $url, array $data = [])\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\Response patch(string $url, array $data = [])\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\Response put(string $url, array $data = [])\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\Response delete(string $url, array $data = [])\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\Response send(string $method, string $url, array $options = [])\n     * @method static \\\\Illuminate\\\\Http\\\\Client\\\\PendingRequest stub(callable $callback)\n     * @see \\\\Illuminate\\\\Http\\\\Client\\\\Factory\n     */    class Http {\n\n        /**\n         * Create a new response instance for use during stubbing.\n         *\n         * @param array|string $body\n         * @param int $status\n         * @param array $headers\n         * @return \\\\GuzzleHttp\\\\Promise\\\\PromiseInterface\n         * @static\n         */        public static function response($body = null, $status = 200, $headers = [])\n        {\n                        return \\\\Illuminate\\\\Http\\\\Client\\\\Factory::response($body, $status, $headers);\n        }\n\n        /**\n         * Get an invokable object that returns a sequence of responses in order for use during stubbing.\n         *\n         * @param array $responses\n         * @return \\\\Illuminate\\\\Http\\\\Client\\\\ResponseSequence\n         * @static\n         */        public static function sequence($responses = [])\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Client\\\\Factory $instance */\n                        return $instance->sequence($responses);\n        }\n\n        /**\n         * Register a stub callable that will intercept requests and be able to return stub responses.\n         *\n         * @param callable|array $callback\n         * @return \\\\Illuminate\\\\Http\\\\Client\\\\Factory\n         * @static\n         */        public static function fake($callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Client\\\\Factory $instance */\n                        return $instance->fake($callback);\n        }\n\n        /**\n         * Register a response sequence for the given URL pattern.\n         *\n         * @param string $url\n         * @return \\\\Illuminate\\\\Http\\\\Client\\\\ResponseSequence\n         * @static\n         */        public static function fakeSequence($url = '*')\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Client\\\\Factory $instance */\n                        return $instance->fakeSequence($url);\n        }\n\n        /**\n         * Stub the given URL using the given callback.\n         *\n         * @param string $url\n         * @param \\\\Illuminate\\\\Http\\\\Client\\\\Response|\\\\GuzzleHttp\\\\Promise\\\\PromiseInterface|callable $callback\n         * @return \\\\Illuminate\\\\Http\\\\Client\\\\Factory\n         * @static\n         */        public static function stubUrl($url, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Client\\\\Factory $instance */\n                        return $instance->stubUrl($url, $callback);\n        }\n\n        /**\n         * Record a request response pair.\n         *\n         * @param \\\\Illuminate\\\\Http\\\\Client\\\\Request $request\n         * @param \\\\Illuminate\\\\Http\\\\Client\\\\Response $response\n         * @return void\n         * @static\n         */        public static function recordRequestResponsePair($request, $response)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Client\\\\Factory $instance */\n                        $instance->recordRequestResponsePair($request, $response);\n        }\n\n        /**\n         * Assert that a request / response pair was recorded matching a given truth test.\n         *\n         * @param callable $callback\n         * @return void\n         * @static\n         */        public static function assertSent($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Client\\\\Factory $instance */\n                        $instance->assertSent($callback);\n        }\n\n        /**\n         * Assert that a request / response pair was not recorded matching a given truth test.\n         *\n         * @param callable $callback\n         * @return void\n         * @static\n         */        public static function assertNotSent($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Client\\\\Factory $instance */\n                        $instance->assertNotSent($callback);\n        }\n\n        /**\n         * Assert that no request / response pair was recorded.\n         *\n         * @return void\n         * @static\n         */        public static function assertNothingSent()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Client\\\\Factory $instance */\n                        $instance->assertNothingSent();\n        }\n\n        /**\n         * Assert how many requests have been recorded.\n         *\n         * @param $count\n         * @return void\n         * @static\n         */        public static function assertSentCount($count)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Client\\\\Factory $instance */\n                        $instance->assertSentCount($count);\n        }\n\n        /**\n         * Assert that every created response sequence is empty.\n         *\n         * @return void\n         * @static\n         */        public static function assertSequencesAreEmpty()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Client\\\\Factory $instance */\n                        $instance->assertSequencesAreEmpty();\n        }\n\n        /**\n         * Get a collection of the request / response pairs matching the given truth test.\n         *\n         * @param callable $callback\n         * @return \\\\Illuminate\\\\Support\\\\Collection\n         * @static\n         */        public static function recorded($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Client\\\\Factory $instance */\n                        return $instance->recorded($callback);\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\Http\\\\Client\\\\Factory::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\Http\\\\Client\\\\Factory::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\Http\\\\Client\\\\Factory::hasMacro($name);\n        }\n\n        /**\n         * Dynamically handle calls to the class.\n         *\n         * @param string $method\n         * @param array $parameters\n         * @return mixed\n         * @throws \\\\BadMethodCallException\n         * @static\n         */        public static function macroCall($method, $parameters)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Client\\\\Factory $instance */\n                        return $instance->macroCall($method, $parameters);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Translation\\\\Translator\n     */    class Lang {\n\n        /**\n         * Determine if a translation exists for a given locale.\n         *\n         * @param string $key\n         * @param string|null $locale\n         * @return bool\n         * @static\n         */        public static function hasForLocale($key, $locale = null)\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        return $instance->hasForLocale($key, $locale);\n        }\n\n        /**\n         * Determine if a translation exists.\n         *\n         * @param string $key\n         * @param string|null $locale\n         * @param bool $fallback\n         * @return bool\n         * @static\n         */        public static function has($key, $locale = null, $fallback = true)\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        return $instance->has($key, $locale, $fallback);\n        }\n\n        /**\n         * Get the translation for the given key.\n         *\n         * @param string $key\n         * @param array $replace\n         * @param string|null $locale\n         * @param bool $fallback\n         * @return string|array\n         * @static\n         */        public static function get($key, $replace = [], $locale = null, $fallback = true)\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        return $instance->get($key, $replace, $locale, $fallback);\n        }\n\n        /**\n         * Get a translation according to an integer value.\n         *\n         * @param string $key\n         * @param \\\\Countable|int|array $number\n         * @param array $replace\n         * @param string|null $locale\n         * @return string\n         * @static\n         */        public static function choice($key, $number, $replace = [], $locale = null)\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        return $instance->choice($key, $number, $replace, $locale);\n        }\n\n        /**\n         * Add translation lines to the given locale.\n         *\n         * @param array $lines\n         * @param string $locale\n         * @param string $namespace\n         * @return void\n         * @static\n         */        public static function addLines($lines, $locale, $namespace = '*')\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        $instance->addLines($lines, $locale, $namespace);\n        }\n\n        /**\n         * Load the specified language group.\n         *\n         * @param string $namespace\n         * @param string $group\n         * @param string $locale\n         * @return void\n         * @static\n         */        public static function load($namespace, $group, $locale)\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        $instance->load($namespace, $group, $locale);\n        }\n\n        /**\n         * Add a new namespace to the loader.\n         *\n         * @param string $namespace\n         * @param string $hint\n         * @return void\n         * @static\n         */        public static function addNamespace($namespace, $hint)\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        $instance->addNamespace($namespace, $hint);\n        }\n\n        /**\n         * Add a new JSON path to the loader.\n         *\n         * @param string $path\n         * @return void\n         * @static\n         */        public static function addJsonPath($path)\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        $instance->addJsonPath($path);\n        }\n\n        /**\n         * Parse a key into namespace, group, and item.\n         *\n         * @param string $key\n         * @return array\n         * @static\n         */        public static function parseKey($key)\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        return $instance->parseKey($key);\n        }\n\n        /**\n         * Get the message selector instance.\n         *\n         * @return \\\\Illuminate\\\\Translation\\\\MessageSelector\n         * @static\n         */        public static function getSelector()\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        return $instance->getSelector();\n        }\n\n        /**\n         * Set the message selector instance.\n         *\n         * @param \\\\Illuminate\\\\Translation\\\\MessageSelector $selector\n         * @return void\n         * @static\n         */        public static function setSelector($selector)\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        $instance->setSelector($selector);\n        }\n\n        /**\n         * Get the language line loader implementation.\n         *\n         * @return \\\\Illuminate\\\\Contracts\\\\Translation\\\\Loader\n         * @static\n         */        public static function getLoader()\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        return $instance->getLoader();\n        }\n\n        /**\n         * Get the default locale being used.\n         *\n         * @return string\n         * @static\n         */        public static function locale()\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        return $instance->locale();\n        }\n\n        /**\n         * Get the default locale being used.\n         *\n         * @return string\n         * @static\n         */        public static function getLocale()\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        return $instance->getLocale();\n        }\n\n        /**\n         * Set the default locale.\n         *\n         * @param string $locale\n         * @return void\n         * @static\n         */        public static function setLocale($locale)\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        $instance->setLocale($locale);\n        }\n\n        /**\n         * Get the fallback locale being used.\n         *\n         * @return string\n         * @static\n         */        public static function getFallback()\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        return $instance->getFallback();\n        }\n\n        /**\n         * Set the fallback locale being used.\n         *\n         * @param string $fallback\n         * @return void\n         * @static\n         */        public static function setFallback($fallback)\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        $instance->setFallback($fallback);\n        }\n\n        /**\n         * Set the loaded translation groups.\n         *\n         * @param array $loaded\n         * @return void\n         * @static\n         */        public static function setLoaded($loaded)\n        {\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        $instance->setLoaded($loaded);\n        }\n\n        /**\n         * Set the parsed value of a key.\n         *\n         * @param string $key\n         * @param array $parsed\n         * @return void\n         * @static\n         */        public static function setParsedKey($key, $parsed)\n        {\n            //Method inherited from \\\\Illuminate\\\\Support\\\\NamespacedItemResolver\n                        /** @var \\\\Illuminate\\\\Translation\\\\Translator $instance */\n                        $instance->setParsedKey($key, $parsed);\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\Translation\\\\Translator::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\Translation\\\\Translator::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\Translation\\\\Translator::hasMacro($name);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Log\\\\Logger\n     */    class Log {\n\n        /**\n         * Create a new, on-demand aggregate logger instance.\n         *\n         * @param array $channels\n         * @param string|null $channel\n         * @return \\\\Psr\\\\Log\\\\LoggerInterface\n         * @static\n         */        public static function stack($channels, $channel = null)\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        return $instance->stack($channels, $channel);\n        }\n\n        /**\n         * Get a log channel instance.\n         *\n         * @param string|null $channel\n         * @return \\\\Psr\\\\Log\\\\LoggerInterface\n         * @static\n         */        public static function channel($channel = null)\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        return $instance->channel($channel);\n        }\n\n        /**\n         * Get a log driver instance.\n         *\n         * @param string|null $driver\n         * @return \\\\Psr\\\\Log\\\\LoggerInterface\n         * @static\n         */        public static function driver($driver = null)\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        return $instance->driver($driver);\n        }\n\n        /**\n         *\n         *\n         * @return array\n         * @static\n         */        public static function getChannels()\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        return $instance->getChannels();\n        }\n\n        /**\n         * Get the default log driver name.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n\n        /**\n         * Set the default log driver name.\n         *\n         * @param string $name\n         * @return void\n         * @static\n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n\n        /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Log\\\\LogManager\n         * @static\n         */        public static function extend($driver, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n\n        /**\n         * Unset the given channel instance.\n         *\n         * @param string|null $name\n         * @return \\\\Illuminate\\\\Log\\\\LogManager\n         * @static\n         */        public static function forgetChannel($driver = null)\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        return $instance->forgetChannel($driver);\n        }\n\n        /**\n         * System is unusable.\n         *\n         * @param string $message\n         * @param array $context\n         * @return void\n         * @static\n         */        public static function emergency($message, $context = [])\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        $instance->emergency($message, $context);\n        }\n\n        /**\n         * Action must be taken immediately.\n         *\n         * Example: Entire website down, database unavailable, etc. This should\n         * trigger the SMS alerts and wake you up.\n         *\n         * @param string $message\n         * @param array $context\n         * @return void\n         * @static\n         */        public static function alert($message, $context = [])\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        $instance->alert($message, $context);\n        }\n\n        /**\n         * Critical conditions.\n         *\n         * Example: Application component unavailable, unexpected exception.\n         *\n         * @param string $message\n         * @param array $context\n         * @return void\n         * @static\n         */        public static function critical($message, $context = [])\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        $instance->critical($message, $context);\n        }\n\n        /**\n         * Runtime errors that do not require immediate action but should typically\n         * be logged and monitored.\n         *\n         * @param string $message\n         * @param array $context\n         * @return void\n         * @static\n         */        public static function error($message, $context = [])\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        $instance->error($message, $context);\n        }\n\n        /**\n         * Exceptional occurrences that are not errors.\n         *\n         * Example: Use of deprecated APIs, poor use of an API, undesirable things\n         * that are not necessarily wrong.\n         *\n         * @param string $message\n         * @param array $context\n         * @return void\n         * @static\n         */        public static function warning($message, $context = [])\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        $instance->warning($message, $context);\n        }\n\n        /**\n         * Normal but significant events.\n         *\n         * @param string $message\n         * @param array $context\n         * @return void\n         * @static\n         */        public static function notice($message, $context = [])\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        $instance->notice($message, $context);\n        }\n\n        /**\n         * Interesting events.\n         *\n         * Example: User logs in, SQL logs.\n         *\n         * @param string $message\n         * @param array $context\n         * @return void\n         * @static\n         */        public static function info($message, $context = [])\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        $instance->info($message, $context);\n        }\n\n        /**\n         * Detailed debug information.\n         *\n         * @param string $message\n         * @param array $context\n         * @return void\n         * @static\n         */        public static function debug($message, $context = [])\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        $instance->debug($message, $context);\n        }\n\n        /**\n         * Logs with an arbitrary level.\n         *\n         * @param mixed $level\n         * @param string $message\n         * @param array $context\n         * @return void\n         * @static\n         */        public static function log($level, $message, $context = [])\n        {\n                        /** @var \\\\Illuminate\\\\Log\\\\LogManager $instance */\n                        $instance->log($level, $message, $context);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Mail\\\\Mailer\n     * @see \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake\n     */    class Mail {\n\n        /**\n         * Get a mailer instance by name.\n         *\n         * @param string|null $name\n         * @return \\\\Illuminate\\\\Mail\\\\Mailer\n         * @static\n         */        public static function mailer($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Mail\\\\MailManager $instance */\n                        return $instance->mailer($name);\n        }\n\n        /**\n         * Get a mailer driver instance.\n         *\n         * @param string|null $driver\n         * @return \\\\Illuminate\\\\Mail\\\\Mailer\n         * @static\n         */        public static function driver($driver = null)\n        {\n                        /** @var \\\\Illuminate\\\\Mail\\\\MailManager $instance */\n                        return $instance->driver($driver);\n        }\n\n        /**\n         * Create a new transport instance.\n         *\n         * @param array $config\n         * @return \\\\Swift_Transport\n         * @static\n         */        public static function createTransport($config)\n        {\n                        /** @var \\\\Illuminate\\\\Mail\\\\MailManager $instance */\n                        return $instance->createTransport($config);\n        }\n\n        /**\n         * Get the default mail driver name.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Mail\\\\MailManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n\n        /**\n         * Set the default mail driver name.\n         *\n         * @param string $name\n         * @return void\n         * @static\n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\\\Illuminate\\\\Mail\\\\MailManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n\n        /**\n         * Register a custom transport creator Closure.\n         *\n         * @param string $driver\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Mail\\\\MailManager\n         * @static\n         */        public static function extend($driver, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Mail\\\\MailManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n\n        /**\n         * Assert if a mailable was sent based on a truth-test callback.\n         *\n         * @param string $mailable\n         * @param callable|int|null $callback\n         * @return void\n         * @static\n         */        public static function assertSent($mailable, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        $instance->assertSent($mailable, $callback);\n        }\n\n        /**\n         * Determine if a mailable was not sent based on a truth-test callback.\n         *\n         * @param string $mailable\n         * @param callable|null $callback\n         * @return void\n         * @static\n         */        public static function assertNotSent($mailable, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        $instance->assertNotSent($mailable, $callback);\n        }\n\n        /**\n         * Assert that no mailables were sent.\n         *\n         * @return void\n         * @static\n         */        public static function assertNothingSent()\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        $instance->assertNothingSent();\n        }\n\n        /**\n         * Assert if a mailable was queued based on a truth-test callback.\n         *\n         * @param string $mailable\n         * @param callable|int|null $callback\n         * @return void\n         * @static\n         */        public static function assertQueued($mailable, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        $instance->assertQueued($mailable, $callback);\n        }\n\n        /**\n         * Determine if a mailable was not queued based on a truth-test callback.\n         *\n         * @param string $mailable\n         * @param callable|null $callback\n         * @return void\n         * @static\n         */        public static function assertNotQueued($mailable, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        $instance->assertNotQueued($mailable, $callback);\n        }\n\n        /**\n         * Assert that no mailables were queued.\n         *\n         * @return void\n         * @static\n         */        public static function assertNothingQueued()\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        $instance->assertNothingQueued();\n        }\n\n        /**\n         * Get all of the mailables matching a truth-test callback.\n         *\n         * @param string $mailable\n         * @param callable|null $callback\n         * @return \\\\Illuminate\\\\Support\\\\Collection\n         * @static\n         */        public static function sent($mailable, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        return $instance->sent($mailable, $callback);\n        }\n\n        /**\n         * Determine if the given mailable has been sent.\n         *\n         * @param string $mailable\n         * @return bool\n         * @static\n         */        public static function hasSent($mailable)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        return $instance->hasSent($mailable);\n        }\n\n        /**\n         * Get all of the queued mailables matching a truth-test callback.\n         *\n         * @param string $mailable\n         * @param callable|null $callback\n         * @return \\\\Illuminate\\\\Support\\\\Collection\n         * @static\n         */        public static function queued($mailable, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        return $instance->queued($mailable, $callback);\n        }\n\n        /**\n         * Determine if the given mailable has been queued.\n         *\n         * @param string $mailable\n         * @return bool\n         * @static\n         */        public static function hasQueued($mailable)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        return $instance->hasQueued($mailable);\n        }\n\n        /**\n         * Begin the process of mailing a mailable class instance.\n         *\n         * @param mixed $users\n         * @return \\\\Illuminate\\\\Mail\\\\PendingMail\n         * @static\n         */        public static function to($users)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        return $instance->to($users);\n        }\n\n        /**\n         * Begin the process of mailing a mailable class instance.\n         *\n         * @param mixed $users\n         * @return \\\\Illuminate\\\\Mail\\\\PendingMail\n         * @static\n         */        public static function bcc($users)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        return $instance->bcc($users);\n        }\n\n        /**\n         * Send a new message with only a raw text part.\n         *\n         * @param string $text\n         * @param \\\\Closure|string $callback\n         * @return void\n         * @static\n         */        public static function raw($text, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        $instance->raw($text, $callback);\n        }\n\n        /**\n         * Send a new message using a view.\n         *\n         * @param string|array $view\n         * @param array $data\n         * @param \\\\Closure|string|null $callback\n         * @return void\n         * @static\n         */        public static function send($view, $data = [], $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        $instance->send($view, $data, $callback);\n        }\n\n        /**\n         * Queue a new e-mail message for sending.\n         *\n         * @param string|array $view\n         * @param string|null $queue\n         * @return mixed\n         * @static\n         */        public static function queue($view, $queue = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        return $instance->queue($view, $queue);\n        }\n\n        /**\n         * Queue a new e-mail message for sending after (n) seconds.\n         *\n         * @param \\\\DateTimeInterface|\\\\DateInterval|int $delay\n         * @param \\\\Illuminate\\\\Contracts\\\\Mail\\\\Mailable|string|array $view\n         * @param string|null $queue\n         * @return mixed\n         * @static\n         */        public static function later($delay, $view, $queue = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        return $instance->later($delay, $view, $queue);\n        }\n\n        /**\n         * Get the array of failed recipients.\n         *\n         * @return array\n         * @static\n         */        public static function failures()\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\MailFake $instance */\n                        return $instance->failures();\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Notifications\\\\ChannelManager\n     */    class Notification {\n\n        /**\n         * Send the given notification to the given notifiable entities.\n         *\n         * @param \\\\Illuminate\\\\Support\\\\Collection|array|mixed $notifiables\n         * @param mixed $notification\n         * @return void\n         * @static\n         */        public static function send($notifiables, $notification)\n        {\n                        /** @var \\\\Illuminate\\\\Notifications\\\\ChannelManager $instance */\n                        $instance->send($notifiables, $notification);\n        }\n\n        /**\n         * Send the given notification immediately.\n         *\n         * @param \\\\Illuminate\\\\Support\\\\Collection|array|mixed $notifiables\n         * @param mixed $notification\n         * @param array|null $channels\n         * @return void\n         * @static\n         */        public static function sendNow($notifiables, $notification, $channels = null)\n        {\n                        /** @var \\\\Illuminate\\\\Notifications\\\\ChannelManager $instance */\n                        $instance->sendNow($notifiables, $notification, $channels);\n        }\n\n        /**\n         * Get a channel instance.\n         *\n         * @param string|null $name\n         * @return mixed\n         * @static\n         */        public static function channel($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Notifications\\\\ChannelManager $instance */\n                        return $instance->channel($name);\n        }\n\n        /**\n         * Get the default channel driver name.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Notifications\\\\ChannelManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n\n        /**\n         * Get the default channel driver name.\n         *\n         * @return string\n         * @static\n         */        public static function deliversVia()\n        {\n                        /** @var \\\\Illuminate\\\\Notifications\\\\ChannelManager $instance */\n                        return $instance->deliversVia();\n        }\n\n        /**\n         * Set the default channel driver name.\n         *\n         * @param string $channel\n         * @return void\n         * @static\n         */        public static function deliverVia($channel)\n        {\n                        /** @var \\\\Illuminate\\\\Notifications\\\\ChannelManager $instance */\n                        $instance->deliverVia($channel);\n        }\n\n        /**\n         * Set the locale of notifications.\n         *\n         * @param string $locale\n         * @return \\\\Illuminate\\\\Notifications\\\\ChannelManager\n         * @static\n         */        public static function locale($locale)\n        {\n                        /** @var \\\\Illuminate\\\\Notifications\\\\ChannelManager $instance */\n                        return $instance->locale($locale);\n        }\n\n        /**\n         * Get a driver instance.\n         *\n         * @param string|null $driver\n         * @return mixed\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function driver($driver = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Support\\\\Manager\n                        /** @var \\\\Illuminate\\\\Notifications\\\\ChannelManager $instance */\n                        return $instance->driver($driver);\n        }\n\n        /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Notifications\\\\ChannelManager\n         * @static\n         */        public static function extend($driver, $callback)\n        {\n            //Method inherited from \\\\Illuminate\\\\Support\\\\Manager\n                        /** @var \\\\Illuminate\\\\Notifications\\\\ChannelManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n\n        /**\n         * Get all of the created \"drivers\".\n         *\n         * @return array\n         * @static\n         */        public static function getDrivers()\n        {\n            //Method inherited from \\\\Illuminate\\\\Support\\\\Manager\n                        /** @var \\\\Illuminate\\\\Notifications\\\\ChannelManager $instance */\n                        return $instance->getDrivers();\n        }\n\n        /**\n         * Assert if a notification was sent based on a truth-test callback.\n         *\n         * @param mixed $notifiable\n         * @param string $notification\n         * @param callable|null $callback\n         * @return void\n         * @throws \\\\Exception\n         * @static\n         */        public static function assertSentTo($notifiable, $notification, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\NotificationFake $instance */\n                        $instance->assertSentTo($notifiable, $notification, $callback);\n        }\n\n        /**\n         * Assert if a notification was sent a number of times.\n         *\n         * @param mixed $notifiable\n         * @param string $notification\n         * @param int $times\n         * @return void\n         * @static\n         */        public static function assertSentToTimes($notifiable, $notification, $times = 1)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\NotificationFake $instance */\n                        $instance->assertSentToTimes($notifiable, $notification, $times);\n        }\n\n        /**\n         * Determine if a notification was sent based on a truth-test callback.\n         *\n         * @param mixed $notifiable\n         * @param string $notification\n         * @param callable|null $callback\n         * @return void\n         * @throws \\\\Exception\n         * @static\n         */        public static function assertNotSentTo($notifiable, $notification, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\NotificationFake $instance */\n                        $instance->assertNotSentTo($notifiable, $notification, $callback);\n        }\n\n        /**\n         * Assert that no notifications were sent.\n         *\n         * @return void\n         * @static\n         */        public static function assertNothingSent()\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\NotificationFake $instance */\n                        $instance->assertNothingSent();\n        }\n\n        /**\n         * Assert the total amount of times a notification was sent.\n         *\n         * @param int $expectedCount\n         * @param string $notification\n         * @return void\n         * @static\n         */        public static function assertTimesSent($expectedCount, $notification)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\NotificationFake $instance */\n                        $instance->assertTimesSent($expectedCount, $notification);\n        }\n\n        /**\n         * Get all of the notifications matching a truth-test callback.\n         *\n         * @param mixed $notifiable\n         * @param string $notification\n         * @param callable|null $callback\n         * @return \\\\Illuminate\\\\Support\\\\Collection\n         * @static\n         */        public static function sent($notifiable, $notification, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\NotificationFake $instance */\n                        return $instance->sent($notifiable, $notification, $callback);\n        }\n\n        /**\n         * Determine if there are more notifications left to inspect.\n         *\n         * @param mixed $notifiable\n         * @param string $notification\n         * @return bool\n         * @static\n         */        public static function hasSent($notifiable, $notification)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\NotificationFake $instance */\n                        return $instance->hasSent($notifiable, $notification);\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\NotificationFake::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\NotificationFake::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\NotificationFake::hasMacro($name);\n        }\n            }\n\n    /**\n     *\n     *\n     * @method static string sendResetLink(array $credentials)\n     * @method static mixed reset(array $credentials, \\\\Closure $callback)\n     * @see \\\\Illuminate\\\\Auth\\\\Passwords\\\\PasswordBroker\n     */    class Password {\n\n        /**\n         * Attempt to get the broker from the local cache.\n         *\n         * @param string|null $name\n         * @return \\\\Illuminate\\\\Contracts\\\\Auth\\\\PasswordBroker\n         * @static\n         */        public static function broker($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Passwords\\\\PasswordBrokerManager $instance */\n                        return $instance->broker($name);\n        }\n\n        /**\n         * Get the default password broker name.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Passwords\\\\PasswordBrokerManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n\n        /**\n         * Set the default password broker name.\n         *\n         * @param string $name\n         * @return void\n         * @static\n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\\\Illuminate\\\\Auth\\\\Passwords\\\\PasswordBrokerManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Queue\\\\QueueManager\n     * @see \\\\Illuminate\\\\Queue\\\\Queue\n     */    class Queue {\n\n        /**\n         * Register an event listener for the before job event.\n         *\n         * @param mixed $callback\n         * @return void\n         * @static\n         */        public static function before($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Queue\\\\QueueManager $instance */\n                        $instance->before($callback);\n        }\n\n        /**\n         * Register an event listener for the after job event.\n         *\n         * @param mixed $callback\n         * @return void\n         * @static\n         */        public static function after($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Queue\\\\QueueManager $instance */\n                        $instance->after($callback);\n        }\n\n        /**\n         * Register an event listener for the exception occurred job event.\n         *\n         * @param mixed $callback\n         * @return void\n         * @static\n         */        public static function exceptionOccurred($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Queue\\\\QueueManager $instance */\n                        $instance->exceptionOccurred($callback);\n        }\n\n        /**\n         * Register an event listener for the daemon queue loop.\n         *\n         * @param mixed $callback\n         * @return void\n         * @static\n         */        public static function looping($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Queue\\\\QueueManager $instance */\n                        $instance->looping($callback);\n        }\n\n        /**\n         * Register an event listener for the failed job event.\n         *\n         * @param mixed $callback\n         * @return void\n         * @static\n         */        public static function failing($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Queue\\\\QueueManager $instance */\n                        $instance->failing($callback);\n        }\n\n        /**\n         * Register an event listener for the daemon queue stopping.\n         *\n         * @param mixed $callback\n         * @return void\n         * @static\n         */        public static function stopping($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Queue\\\\QueueManager $instance */\n                        $instance->stopping($callback);\n        }\n\n        /**\n         * Determine if the driver is connected.\n         *\n         * @param string|null $name\n         * @return bool\n         * @static\n         */        public static function connected($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Queue\\\\QueueManager $instance */\n                        return $instance->connected($name);\n        }\n\n        /**\n         * Resolve a queue connection instance.\n         *\n         * @param string|null $name\n         * @return \\\\Illuminate\\\\Contracts\\\\Queue\\\\Queue\n         * @static\n         */        public static function connection($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Queue\\\\QueueManager $instance */\n                        return $instance->connection($name);\n        }\n\n        /**\n         * Add a queue connection resolver.\n         *\n         * @param string $driver\n         * @param \\\\Closure $resolver\n         * @return void\n         * @static\n         */        public static function extend($driver, $resolver)\n        {\n                        /** @var \\\\Illuminate\\\\Queue\\\\QueueManager $instance */\n                        $instance->extend($driver, $resolver);\n        }\n\n        /**\n         * Add a queue connection resolver.\n         *\n         * @param string $driver\n         * @param \\\\Closure $resolver\n         * @return void\n         * @static\n         */        public static function addConnector($driver, $resolver)\n        {\n                        /** @var \\\\Illuminate\\\\Queue\\\\QueueManager $instance */\n                        $instance->addConnector($driver, $resolver);\n        }\n\n        /**\n         * Get the name of the default queue connection.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Queue\\\\QueueManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n\n        /**\n         * Set the name of the default queue connection.\n         *\n         * @param string $name\n         * @return void\n         * @static\n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\\\Illuminate\\\\Queue\\\\QueueManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n\n        /**\n         * Get the full name for the given connection.\n         *\n         * @param string|null $connection\n         * @return string\n         * @static\n         */        public static function getName($connection = null)\n        {\n                        /** @var \\\\Illuminate\\\\Queue\\\\QueueManager $instance */\n                        return $instance->getName($connection);\n        }\n\n        /**\n         * Assert if a job was pushed based on a truth-test callback.\n         *\n         * @param string $job\n         * @param callable|int|null $callback\n         * @return void\n         * @static\n         */        public static function assertPushed($job, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        $instance->assertPushed($job, $callback);\n        }\n\n        /**\n         * Assert if a job was pushed based on a truth-test callback.\n         *\n         * @param string $queue\n         * @param string $job\n         * @param callable|null $callback\n         * @return void\n         * @static\n         */        public static function assertPushedOn($queue, $job, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        $instance->assertPushedOn($queue, $job, $callback);\n        }\n\n        /**\n         * Assert if a job was pushed with chained jobs based on a truth-test callback.\n         *\n         * @param string $job\n         * @param array $expectedChain\n         * @param callable|null $callback\n         * @return void\n         * @static\n         */        public static function assertPushedWithChain($job, $expectedChain = [], $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        $instance->assertPushedWithChain($job, $expectedChain, $callback);\n        }\n\n        /**\n         * Assert if a job was pushed with an empty chain based on a truth-test callback.\n         *\n         * @param string $job\n         * @param callable|null $callback\n         * @return void\n         * @static\n         */        public static function assertPushedWithoutChain($job, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        $instance->assertPushedWithoutChain($job, $callback);\n        }\n\n        /**\n         * Determine if a job was pushed based on a truth-test callback.\n         *\n         * @param string $job\n         * @param callable|null $callback\n         * @return void\n         * @static\n         */        public static function assertNotPushed($job, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        $instance->assertNotPushed($job, $callback);\n        }\n\n        /**\n         * Assert that no jobs were pushed.\n         *\n         * @return void\n         * @static\n         */        public static function assertNothingPushed()\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        $instance->assertNothingPushed();\n        }\n\n        /**\n         * Get all of the jobs matching a truth-test callback.\n         *\n         * @param string $job\n         * @param callable|null $callback\n         * @return \\\\Illuminate\\\\Support\\\\Collection\n         * @static\n         */        public static function pushed($job, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        return $instance->pushed($job, $callback);\n        }\n\n        /**\n         * Determine if there are any stored jobs for a given class.\n         *\n         * @param string $job\n         * @return bool\n         * @static\n         */        public static function hasPushed($job)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        return $instance->hasPushed($job);\n        }\n\n        /**\n         * Get the size of the queue.\n         *\n         * @param string|null $queue\n         * @return int\n         * @static\n         */        public static function size($queue = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        return $instance->size($queue);\n        }\n\n        /**\n         * Push a new job onto the queue.\n         *\n         * @param string $job\n         * @param mixed $data\n         * @param string|null $queue\n         * @return mixed\n         * @static\n         */        public static function push($job, $data = '', $queue = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        return $instance->push($job, $data, $queue);\n        }\n\n        /**\n         * Push a raw payload onto the queue.\n         *\n         * @param string $payload\n         * @param string|null $queue\n         * @param array $options\n         * @return mixed\n         * @static\n         */        public static function pushRaw($payload, $queue = null, $options = [])\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        return $instance->pushRaw($payload, $queue, $options);\n        }\n\n        /**\n         * Push a new job onto the queue after a delay.\n         *\n         * @param \\\\DateTimeInterface|\\\\DateInterval|int $delay\n         * @param string $job\n         * @param mixed $data\n         * @param string|null $queue\n         * @return mixed\n         * @static\n         */        public static function later($delay, $job, $data = '', $queue = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        return $instance->later($delay, $job, $data, $queue);\n        }\n\n        /**\n         * Push a new job onto the queue.\n         *\n         * @param string $queue\n         * @param string $job\n         * @param mixed $data\n         * @return mixed\n         * @static\n         */        public static function pushOn($queue, $job, $data = '')\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        return $instance->pushOn($queue, $job, $data);\n        }\n\n        /**\n         * Push a new job onto the queue after a delay.\n         *\n         * @param string $queue\n         * @param \\\\DateTimeInterface|\\\\DateInterval|int $delay\n         * @param string $job\n         * @param mixed $data\n         * @return mixed\n         * @static\n         */        public static function laterOn($queue, $delay, $job, $data = '')\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        return $instance->laterOn($queue, $delay, $job, $data);\n        }\n\n        /**\n         * Pop the next job off of the queue.\n         *\n         * @param string|null $queue\n         * @return \\\\Illuminate\\\\Contracts\\\\Queue\\\\Job|null\n         * @static\n         */        public static function pop($queue = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        return $instance->pop($queue);\n        }\n\n        /**\n         * Push an array of jobs onto the queue.\n         *\n         * @param array $jobs\n         * @param mixed $data\n         * @param string|null $queue\n         * @return mixed\n         * @static\n         */        public static function bulk($jobs, $data = '', $queue = null)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        return $instance->bulk($jobs, $data, $queue);\n        }\n\n        /**\n         * Get the jobs that have been pushed.\n         *\n         * @return array\n         * @static\n         */        public static function pushedJobs()\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        return $instance->pushedJobs();\n        }\n\n        /**\n         * Get the connection name for the queue.\n         *\n         * @return string\n         * @static\n         */        public static function getConnectionName()\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        return $instance->getConnectionName();\n        }\n\n        /**\n         * Set the connection name for the queue.\n         *\n         * @param string $name\n         * @return \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake\n         * @static\n         */        public static function setConnectionName($name)\n        {\n                        /** @var \\\\Illuminate\\\\Support\\\\Testing\\\\Fakes\\\\QueueFake $instance */\n                        return $instance->setConnectionName($name);\n        }\n\n        /**\n         * Get the retry delay for an object-based queue handler.\n         *\n         * @param mixed $job\n         * @return mixed\n         * @static\n         */        public static function getJobRetryDelay($job)\n        {\n            //Method inherited from \\\\Illuminate\\\\Queue\\\\Queue\n                        /** @var \\\\Illuminate\\\\Queue\\\\SyncQueue $instance */\n                        return $instance->getJobRetryDelay($job);\n        }\n\n        /**\n         * Get the expiration timestamp for an object-based queue handler.\n         *\n         * @param mixed $job\n         * @return mixed\n         * @static\n         */        public static function getJobExpiration($job)\n        {\n            //Method inherited from \\\\Illuminate\\\\Queue\\\\Queue\n                        /** @var \\\\Illuminate\\\\Queue\\\\SyncQueue $instance */\n                        return $instance->getJobExpiration($job);\n        }\n\n        /**\n         * Register a callback to be executed when creating job payloads.\n         *\n         * @param callable $callback\n         * @return void\n         * @static\n         */        public static function createPayloadUsing($callback)\n        {\n            //Method inherited from \\\\Illuminate\\\\Queue\\\\Queue\n                        \\\\Illuminate\\\\Queue\\\\SyncQueue::createPayloadUsing($callback);\n        }\n\n        /**\n         * Set the IoC container instance.\n         *\n         * @param \\\\Illuminate\\\\Container\\\\Container $container\n         * @return void\n         * @static\n         */        public static function setContainer($container)\n        {\n            //Method inherited from \\\\Illuminate\\\\Queue\\\\Queue\n                        /** @var \\\\Illuminate\\\\Queue\\\\SyncQueue $instance */\n                        $instance->setContainer($container);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Routing\\\\Redirector\n     */    class Redirect {\n\n        /**\n         * Create a new redirect response to the \"home\" route.\n         *\n         * @param int $status\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function home($status = 302)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        return $instance->home($status);\n        }\n\n        /**\n         * Create a new redirect response to the previous location.\n         *\n         * @param int $status\n         * @param array $headers\n         * @param mixed $fallback\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function back($status = 302, $headers = [], $fallback = false)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        return $instance->back($status, $headers, $fallback);\n        }\n\n        /**\n         * Create a new redirect response to the current URI.\n         *\n         * @param int $status\n         * @param array $headers\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function refresh($status = 302, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        return $instance->refresh($status, $headers);\n        }\n\n        /**\n         * Create a new redirect response, while putting the current URL in the session.\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @param bool|null $secure\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function guest($path, $status = 302, $headers = [], $secure = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        return $instance->guest($path, $status, $headers, $secure);\n        }\n\n        /**\n         * Create a new redirect response to the previously intended location.\n         *\n         * @param string $default\n         * @param int $status\n         * @param array $headers\n         * @param bool|null $secure\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function intended($default = '/', $status = 302, $headers = [], $secure = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        return $instance->intended($default, $status, $headers, $secure);\n        }\n\n        /**\n         * Set the intended url.\n         *\n         * @param string $url\n         * @return void\n         * @static\n         */        public static function setIntendedUrl($url)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        $instance->setIntendedUrl($url);\n        }\n\n        /**\n         * Create a new redirect response to the given path.\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @param bool|null $secure\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function to($path, $status = 302, $headers = [], $secure = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        return $instance->to($path, $status, $headers, $secure);\n        }\n\n        /**\n         * Create a new redirect response to an external URL (no validation).\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function away($path, $status = 302, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        return $instance->away($path, $status, $headers);\n        }\n\n        /**\n         * Create a new redirect response to the given HTTPS path.\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function secure($path, $status = 302, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        return $instance->secure($path, $status, $headers);\n        }\n\n        /**\n         * Create a new redirect response to a named route.\n         *\n         * @param string $route\n         * @param mixed $parameters\n         * @param int $status\n         * @param array $headers\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function route($route, $parameters = [], $status = 302, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        return $instance->route($route, $parameters, $status, $headers);\n        }\n\n        /**\n         * Create a new redirect response to a signed named route.\n         *\n         * @param string $route\n         * @param mixed $parameters\n         * @param \\\\DateTimeInterface|\\\\DateInterval|int|null $expiration\n         * @param int $status\n         * @param array $headers\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function signedRoute($route, $parameters = [], $expiration = null, $status = 302, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        return $instance->signedRoute($route, $parameters, $expiration, $status, $headers);\n        }\n\n        /**\n         * Create a new redirect response to a signed named route.\n         *\n         * @param string $route\n         * @param \\\\DateTimeInterface|\\\\DateInterval|int|null $expiration\n         * @param mixed $parameters\n         * @param int $status\n         * @param array $headers\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function temporarySignedRoute($route, $expiration, $parameters = [], $status = 302, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        return $instance->temporarySignedRoute($route, $expiration, $parameters, $status, $headers);\n        }\n\n        /**\n         * Create a new redirect response to a controller action.\n         *\n         * @param string|array $action\n         * @param mixed $parameters\n         * @param int $status\n         * @param array $headers\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function action($action, $parameters = [], $status = 302, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        return $instance->action($action, $parameters, $status, $headers);\n        }\n\n        /**\n         * Get the URL generator instance.\n         *\n         * @return \\\\Illuminate\\\\Routing\\\\UrlGenerator\n         * @static\n         */        public static function getUrlGenerator()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        return $instance->getUrlGenerator();\n        }\n\n        /**\n         * Set the active session store.\n         *\n         * @param \\\\Illuminate\\\\Session\\\\Store $session\n         * @return void\n         * @static\n         */        public static function setSession($session)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Redirector $instance */\n                        $instance->setSession($session);\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\Routing\\\\Redirector::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\Routing\\\\Redirector::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\Routing\\\\Redirector::hasMacro($name);\n        }\n            }\n\n    /**\n     *\n     *\n     * @method static mixed filterFiles(mixed $files)\n     * @see \\\\Illuminate\\\\Http\\\\Request\n     */    class Request {\n\n        /**\n         * Create a new Illuminate HTTP request from server variables.\n         *\n         * @return static\n         * @static\n         */        public static function capture()\n        {\n                        return \\\\Illuminate\\\\Http\\\\Request::capture();\n        }\n\n        /**\n         * Return the Request instance.\n         *\n         * @return \\\\Illuminate\\\\Http\\\\Request\n         * @static\n         */        public static function instance()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->instance();\n        }\n\n        /**\n         * Get the request method.\n         *\n         * @return string\n         * @static\n         */        public static function method()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->method();\n        }\n\n        /**\n         * Get the root URL for the application.\n         *\n         * @return string\n         * @static\n         */        public static function root()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->root();\n        }\n\n        /**\n         * Get the URL (no query string) for the request.\n         *\n         * @return string\n         * @static\n         */        public static function url()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->url();\n        }\n\n        /**\n         * Get the full URL for the request.\n         *\n         * @return string\n         * @static\n         */        public static function fullUrl()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->fullUrl();\n        }\n\n        /**\n         * Get the full URL for the request with the added query string parameters.\n         *\n         * @param array $query\n         * @return string\n         * @static\n         */        public static function fullUrlWithQuery($query)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->fullUrlWithQuery($query);\n        }\n\n        /**\n         * Get the current path info for the request.\n         *\n         * @return string\n         * @static\n         */        public static function path()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->path();\n        }\n\n        /**\n         * Get the current decoded path info for the request.\n         *\n         * @return string\n         * @static\n         */        public static function decodedPath()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->decodedPath();\n        }\n\n        /**\n         * Get a segment from the URI (1 based index).\n         *\n         * @param int $index\n         * @param string|null $default\n         * @return string|null\n         * @static\n         */        public static function segment($index, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->segment($index, $default);\n        }\n\n        /**\n         * Get all of the segments for the request path.\n         *\n         * @return array\n         * @static\n         */        public static function segments()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->segments();\n        }\n\n        /**\n         * Determine if the current request URI matches a pattern.\n         *\n         * @param mixed $patterns\n         * @return bool\n         * @static\n         */        public static function is(...$patterns)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->is(...$patterns);\n        }\n\n        /**\n         * Determine if the route name matches a given pattern.\n         *\n         * @param mixed $patterns\n         * @return bool\n         * @static\n         */        public static function routeIs(...$patterns)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->routeIs(...$patterns);\n        }\n\n        /**\n         * Determine if the current request URL and query string matches a pattern.\n         *\n         * @param mixed $patterns\n         * @return bool\n         * @static\n         */        public static function fullUrlIs(...$patterns)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->fullUrlIs(...$patterns);\n        }\n\n        /**\n         * Determine if the request is the result of an AJAX call.\n         *\n         * @return bool\n         * @static\n         */        public static function ajax()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->ajax();\n        }\n\n        /**\n         * Determine if the request is the result of an PJAX call.\n         *\n         * @return bool\n         * @static\n         */        public static function pjax()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->pjax();\n        }\n\n        /**\n         * Determine if the request is the result of an prefetch call.\n         *\n         * @return bool\n         * @static\n         */        public static function prefetch()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->prefetch();\n        }\n\n        /**\n         * Determine if the request is over HTTPS.\n         *\n         * @return bool\n         * @static\n         */        public static function secure()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->secure();\n        }\n\n        /**\n         * Get the client IP address.\n         *\n         * @return string|null\n         * @static\n         */        public static function ip()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->ip();\n        }\n\n        /**\n         * Get the client IP addresses.\n         *\n         * @return array\n         * @static\n         */        public static function ips()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->ips();\n        }\n\n        /**\n         * Get the client user agent.\n         *\n         * @return string\n         * @static\n         */        public static function userAgent()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->userAgent();\n        }\n\n        /**\n         * Merge new input into the current request's input array.\n         *\n         * @param array $input\n         * @return \\\\Illuminate\\\\Http\\\\Request\n         * @static\n         */        public static function merge($input)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->merge($input);\n        }\n\n        /**\n         * Replace the input for the current request.\n         *\n         * @param array $input\n         * @return \\\\Illuminate\\\\Http\\\\Request\n         * @static\n         */        public static function replace($input)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->replace($input);\n        }\n\n        /**\n         * This method belongs to Symfony HttpFoundation and is not usually needed when using Laravel.\n         *\n         * Instead, you may use the \"input\" method.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed\n         * @static\n         */        public static function get($key, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->get($key, $default);\n        }\n\n        /**\n         * Get the JSON payload for the request.\n         *\n         * @param string|null $key\n         * @param mixed $default\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag|mixed\n         * @static\n         */        public static function json($key = null, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->json($key, $default);\n        }\n\n        /**\n         * Create a new request instance from the given Laravel request.\n         *\n         * @param \\\\Illuminate\\\\Http\\\\Request $from\n         * @param \\\\Illuminate\\\\Http\\\\Request|null $to\n         * @return static\n         * @static\n         */        public static function createFrom($from, $to = null)\n        {\n                        return \\\\Illuminate\\\\Http\\\\Request::createFrom($from, $to);\n        }\n\n        /**\n         * Create an Illuminate request from a Symfony instance.\n         *\n         * @param \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request $request\n         * @return static\n         * @static\n         */        public static function createFromBase($request)\n        {\n                        return \\\\Illuminate\\\\Http\\\\Request::createFromBase($request);\n        }\n\n        /**\n         * Clones a request and overrides some of its parameters.\n         *\n         * @param array $query The GET parameters\n         * @param array $request The POST parameters\n         * @param array $attributes The request attributes (parameters parsed from the PATH_INFO, ...)\n         * @param array $cookies The COOKIE parameters\n         * @param array $files The FILES parameters\n         * @param array $server The SERVER parameters\n         * @return static\n         * @static\n         */        public static function duplicate($query = null, $request = null, $attributes = null, $cookies = null, $files = null, $server = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->duplicate($query, $request, $attributes, $cookies, $files, $server);\n        }\n\n        /**\n         * Get the session associated with the request.\n         *\n         * @return \\\\Illuminate\\\\Session\\\\Store\n         * @throws \\\\RuntimeException\n         * @static\n         */        public static function session()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->session();\n        }\n\n        /**\n         * Get the session associated with the request.\n         *\n         * @return \\\\Illuminate\\\\Session\\\\Store|null\n         * @static\n         */        public static function getSession()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getSession();\n        }\n\n        /**\n         * Set the session instance on the request.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\Session\\\\Session $session\n         * @return void\n         * @static\n         */        public static function setLaravelSession($session)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        $instance->setLaravelSession($session);\n        }\n\n        /**\n         * Get the user making the request.\n         *\n         * @param string|null $guard\n         * @return mixed\n         * @static\n         */        public static function user($guard = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->user($guard);\n        }\n\n        /**\n         * Get the route handling the request.\n         *\n         * @param string|null $param\n         * @param mixed $default\n         * @return \\\\Illuminate\\\\Routing\\\\Route|object|string|null\n         * @static\n         */        public static function route($param = null, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->route($param, $default);\n        }\n\n        /**\n         * Get a unique fingerprint for the request / route / IP address.\n         *\n         * @return string\n         * @throws \\\\RuntimeException\n         * @static\n         */        public static function fingerprint()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->fingerprint();\n        }\n\n        /**\n         * Set the JSON payload for the request.\n         *\n         * @param \\\\Symfony\\\\Component\\\\HttpFoundation\\\\ParameterBag $json\n         * @return \\\\Illuminate\\\\Http\\\\Request\n         * @static\n         */        public static function setJson($json)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->setJson($json);\n        }\n\n        /**\n         * Get the user resolver callback.\n         *\n         * @return \\\\Closure\n         * @static\n         */        public static function getUserResolver()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getUserResolver();\n        }\n\n        /**\n         * Set the user resolver callback.\n         *\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Http\\\\Request\n         * @static\n         */        public static function setUserResolver($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->setUserResolver($callback);\n        }\n\n        /**\n         * Get the route resolver callback.\n         *\n         * @return \\\\Closure\n         * @static\n         */        public static function getRouteResolver()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getRouteResolver();\n        }\n\n        /**\n         * Set the route resolver callback.\n         *\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Http\\\\Request\n         * @static\n         */        public static function setRouteResolver($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->setRouteResolver($callback);\n        }\n\n        /**\n         * Get all of the input and files for the request.\n         *\n         * @return array\n         * @static\n         */        public static function toArray()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->toArray();\n        }\n\n        /**\n         * Determine if the given offset exists.\n         *\n         * @param string $offset\n         * @return bool\n         * @static\n         */        public static function offsetExists($offset)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->offsetExists($offset);\n        }\n\n        /**\n         * Get the value at the given offset.\n         *\n         * @param string $offset\n         * @return mixed\n         * @static\n         */        public static function offsetGet($offset)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->offsetGet($offset);\n        }\n\n        /**\n         * Set the value at the given offset.\n         *\n         * @param string $offset\n         * @param mixed $value\n         * @return void\n         * @static\n         */        public static function offsetSet($offset, $value)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        $instance->offsetSet($offset, $value);\n        }\n\n        /**\n         * Remove the value at the given offset.\n         *\n         * @param string $offset\n         * @return void\n         * @static\n         */        public static function offsetUnset($offset)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        $instance->offsetUnset($offset);\n        }\n\n        /**\n         * Sets the parameters for this request.\n         *\n         * This method also re-initializes all properties.\n         *\n         * @param array $query The GET parameters\n         * @param array $request The POST parameters\n         * @param array $attributes The request attributes (parameters parsed from the PATH_INFO, ...)\n         * @param array $cookies The COOKIE parameters\n         * @param array $files The FILES parameters\n         * @param array $server The SERVER parameters\n         * @param string|resource|null $content The raw body data\n         * @static\n         */        public static function initialize($query = [], $request = [], $attributes = [], $cookies = [], $files = [], $server = [], $content = null)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->initialize($query, $request, $attributes, $cookies, $files, $server, $content);\n        }\n\n        /**\n         * Creates a new request with values from PHP's super globals.\n         *\n         * @return static\n         * @static\n         */        public static function createFromGlobals()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        return \\\\Illuminate\\\\Http\\\\Request::createFromGlobals();\n        }\n\n        /**\n         * Creates a Request based on a given URI and configuration.\n         *\n         * The information contained in the URI always take precedence\n         * over the other information (server and parameters).\n         *\n         * @param string $uri The URI\n         * @param string $method The HTTP method\n         * @param array $parameters The query (GET) or request (POST) parameters\n         * @param array $cookies The request cookies ($_COOKIE)\n         * @param array $files The request files ($_FILES)\n         * @param array $server The server parameters ($_SERVER)\n         * @param string|resource|null $content The raw body data\n         * @return static\n         * @static\n         */        public static function create($uri, $method = 'GET', $parameters = [], $cookies = [], $files = [], $server = [], $content = null)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        return \\\\Illuminate\\\\Http\\\\Request::create($uri, $method, $parameters, $cookies, $files, $server, $content);\n        }\n\n        /**\n         * Sets a callable able to create a Request instance.\n         *\n         * This is mainly useful when you need to override the Request class\n         * to keep BC with an existing system. It should not be used for any\n         * other purpose.\n         *\n         * @static\n         */        public static function setFactory($callable)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        return \\\\Illuminate\\\\Http\\\\Request::setFactory($callable);\n        }\n\n        /**\n         * Overrides the PHP global variables according to this request instance.\n         *\n         * It overrides $_GET, $_POST, $_REQUEST, $_SERVER, $_COOKIE.\n         * $_FILES is never overridden, see rfc1867\n         *\n         * @static\n         */        public static function overrideGlobals()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->overrideGlobals();\n        }\n\n        /**\n         * Sets a list of trusted proxies.\n         *\n         * You should only list the reverse proxies that you manage directly.\n         *\n         * @param array $proxies A list of trusted proxies, the string 'REMOTE_ADDR' will be replaced with $_SERVER['REMOTE_ADDR']\n         * @param int $trustedHeaderSet A bit field of Request::HEADER_*, to set which headers to trust from your proxies\n         * @throws \\\\InvalidArgumentException When $trustedHeaderSet is invalid\n         * @static\n         */        public static function setTrustedProxies($proxies, $trustedHeaderSet)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        return \\\\Illuminate\\\\Http\\\\Request::setTrustedProxies($proxies, $trustedHeaderSet);\n        }\n\n        /**\n         * Gets the list of trusted proxies.\n         *\n         * @return array An array of trusted proxies\n         * @static\n         */        public static function getTrustedProxies()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        return \\\\Illuminate\\\\Http\\\\Request::getTrustedProxies();\n        }\n\n        /**\n         * Gets the set of trusted headers from trusted proxies.\n         *\n         * @return int A bit field of Request::HEADER_* that defines which headers are trusted from your proxies\n         * @static\n         */        public static function getTrustedHeaderSet()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        return \\\\Illuminate\\\\Http\\\\Request::getTrustedHeaderSet();\n        }\n\n        /**\n         * Sets a list of trusted host patterns.\n         *\n         * You should only list the hosts you manage using regexs.\n         *\n         * @param array $hostPatterns A list of trusted host patterns\n         * @static\n         */        public static function setTrustedHosts($hostPatterns)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        return \\\\Illuminate\\\\Http\\\\Request::setTrustedHosts($hostPatterns);\n        }\n\n        /**\n         * Gets the list of trusted host patterns.\n         *\n         * @return array An array of trusted host patterns\n         * @static\n         */        public static function getTrustedHosts()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        return \\\\Illuminate\\\\Http\\\\Request::getTrustedHosts();\n        }\n\n        /**\n         * Normalizes a query string.\n         *\n         * It builds a normalized query string, where keys/value pairs are alphabetized,\n         * have consistent escaping and unneeded delimiters are removed.\n         *\n         * @return string A normalized query string for the Request\n         * @static\n         */        public static function normalizeQueryString($qs)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        return \\\\Illuminate\\\\Http\\\\Request::normalizeQueryString($qs);\n        }\n\n        /**\n         * Enables support for the _method request parameter to determine the intended HTTP method.\n         *\n         * Be warned that enabling this feature might lead to CSRF issues in your code.\n         * Check that you are using CSRF tokens when required.\n         * If the HTTP method parameter override is enabled, an html-form with method \"POST\" can be altered\n         * and used to send a \"PUT\" or \"DELETE\" request via the _method request parameter.\n         * If these methods are not protected against CSRF, this presents a possible vulnerability.\n         *\n         * The HTTP method can only be overridden when the real HTTP method is POST.\n         *\n         * @static\n         */        public static function enableHttpMethodParameterOverride()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        return \\\\Illuminate\\\\Http\\\\Request::enableHttpMethodParameterOverride();\n        }\n\n        /**\n         * Checks whether support for the _method request parameter is enabled.\n         *\n         * @return bool True when the _method request parameter is enabled, false otherwise\n         * @static\n         */        public static function getHttpMethodParameterOverride()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        return \\\\Illuminate\\\\Http\\\\Request::getHttpMethodParameterOverride();\n        }\n\n        /**\n         * Whether the request contains a Session which was started in one of the\n         * previous requests.\n         *\n         * @return bool\n         * @static\n         */        public static function hasPreviousSession()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->hasPreviousSession();\n        }\n\n        /**\n         * Whether the request contains a Session object.\n         *\n         * This method does not give any information about the state of the session object,\n         * like whether the session is started or not. It is just a way to check if this Request\n         * is associated with a Session instance.\n         *\n         * @return bool true when the Request contains a Session object, false otherwise\n         * @static\n         */        public static function hasSession()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->hasSession();\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function setSession($session)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->setSession($session);\n        }\n\n        /**\n         *\n         *\n         * @internal\n         * @static\n         */        public static function setSessionFactory($factory)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->setSessionFactory($factory);\n        }\n\n        /**\n         * Returns the client IP addresses.\n         *\n         * In the returned array the most trusted IP address is first, and the\n         * least trusted one last. The \"real\" client IP address is the last one,\n         * but this is also the least trusted one. Trusted proxies are stripped.\n         *\n         * Use this method carefully; you should use getClientIp() instead.\n         *\n         * @return array The client IP addresses\n         * @see getClientIp()\n         * @static\n         */        public static function getClientIps()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getClientIps();\n        }\n\n        /**\n         * Returns the client IP address.\n         *\n         * This method can read the client IP address from the \"X-Forwarded-For\" header\n         * when trusted proxies were set via \"setTrustedProxies()\". The \"X-Forwarded-For\"\n         * header value is a comma+space separated list of IP addresses, the left-most\n         * being the original client, and each successive proxy that passed the request\n         * adding the IP address where it received the request from.\n         *\n         * If your reverse proxy uses a different header name than \"X-Forwarded-For\",\n         * (\"Client-Ip\" for instance), configure it via the $trustedHeaderSet\n         * argument of the Request::setTrustedProxies() method instead.\n         *\n         * @return string|null The client IP address\n         * @see getClientIps()\n         * @see https://wikipedia.org/wiki/X-Forwarded-For\n         * @static\n         */        public static function getClientIp()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getClientIp();\n        }\n\n        /**\n         * Returns current script name.\n         *\n         * @return string\n         * @static\n         */        public static function getScriptName()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getScriptName();\n        }\n\n        /**\n         * Returns the path being requested relative to the executed script.\n         *\n         * The path info always starts with a /.\n         *\n         * Suppose this request is instantiated from /mysite on localhost:\n         *\n         *  * http://localhost/mysite              returns an empty string\n         *  * http://localhost/mysite/about        returns '/about'\n         *  * http://localhost/mysite/enco%20ded   returns '/enco%20ded'\n         *  * http://localhost/mysite/about?var=1  returns '/about'\n         *\n         * @return string The raw path (i.e. not urldecoded)\n         * @static\n         */        public static function getPathInfo()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getPathInfo();\n        }\n\n        /**\n         * Returns the root path from which this request is executed.\n         *\n         * Suppose that an index.php file instantiates this request object:\n         *\n         *  * http://localhost/index.php         returns an empty string\n         *  * http://localhost/index.php/page    returns an empty string\n         *  * http://localhost/web/index.php     returns '/web'\n         *  * http://localhost/we%20b/index.php  returns '/we%20b'\n         *\n         * @return string The raw path (i.e. not urldecoded)\n         * @static\n         */        public static function getBasePath()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getBasePath();\n        }\n\n        /**\n         * Returns the root URL from which this request is executed.\n         *\n         * The base URL never ends with a /.\n         *\n         * This is similar to getBasePath(), except that it also includes the\n         * script filename (e.g. index.php) if one exists.\n         *\n         * @return string The raw URL (i.e. not urldecoded)\n         * @static\n         */        public static function getBaseUrl()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getBaseUrl();\n        }\n\n        /**\n         * Gets the request's scheme.\n         *\n         * @return string\n         * @static\n         */        public static function getScheme()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getScheme();\n        }\n\n        /**\n         * Returns the port on which the request is made.\n         *\n         * This method can read the client port from the \"X-Forwarded-Port\" header\n         * when trusted proxies were set via \"setTrustedProxies()\".\n         *\n         * The \"X-Forwarded-Port\" header must contain the client port.\n         *\n         * @return int|string can be a string if fetched from the server bag\n         * @static\n         */        public static function getPort()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getPort();\n        }\n\n        /**\n         * Returns the user.\n         *\n         * @return string|null\n         * @static\n         */        public static function getUser()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getUser();\n        }\n\n        /**\n         * Returns the password.\n         *\n         * @return string|null\n         * @static\n         */        public static function getPassword()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getPassword();\n        }\n\n        /**\n         * Gets the user info.\n         *\n         * @return string A user name and, optionally, scheme-specific information about how to gain authorization to access the server\n         * @static\n         */        public static function getUserInfo()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getUserInfo();\n        }\n\n        /**\n         * Returns the HTTP host being requested.\n         *\n         * The port name will be appended to the host if it's non-standard.\n         *\n         * @return string\n         * @static\n         */        public static function getHttpHost()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getHttpHost();\n        }\n\n        /**\n         * Returns the requested URI (path and query string).\n         *\n         * @return string The raw URI (i.e. not URI decoded)\n         * @static\n         */        public static function getRequestUri()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getRequestUri();\n        }\n\n        /**\n         * Gets the scheme and HTTP host.\n         *\n         * If the URL was called with basic authentication, the user\n         * and the password are not added to the generated string.\n         *\n         * @return string The scheme and HTTP host\n         * @static\n         */        public static function getSchemeAndHttpHost()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getSchemeAndHttpHost();\n        }\n\n        /**\n         * Generates a normalized URI (URL) for the Request.\n         *\n         * @return string A normalized URI (URL) for the Request\n         * @see getQueryString()\n         * @static\n         */        public static function getUri()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getUri();\n        }\n\n        /**\n         * Generates a normalized URI for the given path.\n         *\n         * @param string $path A path to use instead of the current one\n         * @return string The normalized URI for the path\n         * @static\n         */        public static function getUriForPath($path)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getUriForPath($path);\n        }\n\n        /**\n         * Returns the path as relative reference from the current Request path.\n         *\n         * Only the URIs path component (no schema, host etc.) is relevant and must be given.\n         * Both paths must be absolute and not contain relative parts.\n         * Relative URLs from one resource to another are useful when generating self-contained downloadable document archives.\n         * Furthermore, they can be used to reduce the link size in documents.\n         *\n         * Example target paths, given a base path of \"/a/b/c/d\":\n         * - \"/a/b/c/d\"     -> \"\"\n         * - \"/a/b/c/\"      -> \"./\"\n         * - \"/a/b/\"        -> \"../\"\n         * - \"/a/b/c/other\" -> \"other\"\n         * - \"/a/x/y\"       -> \"../../x/y\"\n         *\n         * @return string The relative target path\n         * @static\n         */        public static function getRelativeUriForPath($path)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getRelativeUriForPath($path);\n        }\n\n        /**\n         * Generates the normalized query string for the Request.\n         *\n         * It builds a normalized query string, where keys/value pairs are alphabetized\n         * and have consistent escaping.\n         *\n         * @return string|null A normalized query string for the Request\n         * @static\n         */        public static function getQueryString()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getQueryString();\n        }\n\n        /**\n         * Checks whether the request is secure or not.\n         *\n         * This method can read the client protocol from the \"X-Forwarded-Proto\" header\n         * when trusted proxies were set via \"setTrustedProxies()\".\n         *\n         * The \"X-Forwarded-Proto\" header must contain the protocol: \"https\" or \"http\".\n         *\n         * @return bool\n         * @static\n         */        public static function isSecure()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->isSecure();\n        }\n\n        /**\n         * Returns the host name.\n         *\n         * This method can read the client host name from the \"X-Forwarded-Host\" header\n         * when trusted proxies were set via \"setTrustedProxies()\".\n         *\n         * The \"X-Forwarded-Host\" header must contain the client host name.\n         *\n         * @return string\n         * @throws SuspiciousOperationException when the host name is invalid or not trusted\n         * @static\n         */        public static function getHost()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getHost();\n        }\n\n        /**\n         * Sets the request method.\n         *\n         * @static\n         */        public static function setMethod($method)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->setMethod($method);\n        }\n\n        /**\n         * Gets the request \"intended\" method.\n         *\n         * If the X-HTTP-Method-Override header is set, and if the method is a POST,\n         * then it is used to determine the \"real\" intended HTTP method.\n         *\n         * The _method request parameter can also be used to determine the HTTP method,\n         * but only if enableHttpMethodParameterOverride() has been called.\n         *\n         * The method is always an uppercased string.\n         *\n         * @return string The request method\n         * @see getRealMethod()\n         * @static\n         */        public static function getMethod()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getMethod();\n        }\n\n        /**\n         * Gets the \"real\" request method.\n         *\n         * @return string The request method\n         * @see getMethod()\n         * @static\n         */        public static function getRealMethod()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getRealMethod();\n        }\n\n        /**\n         * Gets the mime type associated with the format.\n         *\n         * @return string|null The associated mime type (null if not found)\n         * @static\n         */        public static function getMimeType($format)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getMimeType($format);\n        }\n\n        /**\n         * Gets the mime types associated with the format.\n         *\n         * @return array The associated mime types\n         * @static\n         */        public static function getMimeTypes($format)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        return \\\\Illuminate\\\\Http\\\\Request::getMimeTypes($format);\n        }\n\n        /**\n         * Gets the format associated with the mime type.\n         *\n         * @return string|null The format (null if not found)\n         * @static\n         */        public static function getFormat($mimeType)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getFormat($mimeType);\n        }\n\n        /**\n         * Associates a format with mime types.\n         *\n         * @param string|array $mimeTypes The associated mime types (the preferred one must be the first as it will be used as the content type)\n         * @static\n         */        public static function setFormat($format, $mimeTypes)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->setFormat($format, $mimeTypes);\n        }\n\n        /**\n         * Gets the request format.\n         *\n         * Here is the process to determine the format:\n         *\n         *  * format defined by the user (with setRequestFormat())\n         *  * _format request attribute\n         *  * $default\n         *\n         * @see getPreferredFormat\n         * @return string|null The request format\n         * @static\n         */        public static function getRequestFormat($default = 'html')\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getRequestFormat($default);\n        }\n\n        /**\n         * Sets the request format.\n         *\n         * @static\n         */        public static function setRequestFormat($format)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->setRequestFormat($format);\n        }\n\n        /**\n         * Gets the format associated with the request.\n         *\n         * @return string|null The format (null if no content type is present)\n         * @static\n         */        public static function getContentType()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getContentType();\n        }\n\n        /**\n         * Sets the default locale.\n         *\n         * @static\n         */        public static function setDefaultLocale($locale)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->setDefaultLocale($locale);\n        }\n\n        /**\n         * Get the default locale.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultLocale()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getDefaultLocale();\n        }\n\n        /**\n         * Sets the locale.\n         *\n         * @static\n         */        public static function setLocale($locale)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->setLocale($locale);\n        }\n\n        /**\n         * Get the locale.\n         *\n         * @return string\n         * @static\n         */        public static function getLocale()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getLocale();\n        }\n\n        /**\n         * Checks if the request method is of specified type.\n         *\n         * @param string $method Uppercase request method (GET, POST etc)\n         * @return bool\n         * @static\n         */        public static function isMethod($method)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->isMethod($method);\n        }\n\n        /**\n         * Checks whether or not the method is safe.\n         *\n         * @see https://tools.ietf.org/html/rfc7231#section-4.2.1\n         * @return bool\n         * @static\n         */        public static function isMethodSafe()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->isMethodSafe();\n        }\n\n        /**\n         * Checks whether or not the method is idempotent.\n         *\n         * @return bool\n         * @static\n         */        public static function isMethodIdempotent()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->isMethodIdempotent();\n        }\n\n        /**\n         * Checks whether the method is cacheable or not.\n         *\n         * @see https://tools.ietf.org/html/rfc7231#section-4.2.3\n         * @return bool True for GET and HEAD, false otherwise\n         * @static\n         */        public static function isMethodCacheable()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->isMethodCacheable();\n        }\n\n        /**\n         * Returns the protocol version.\n         *\n         * If the application is behind a proxy, the protocol version used in the\n         * requests between the client and the proxy and between the proxy and the\n         * server might be different. This returns the former (from the \"Via\" header)\n         * if the proxy is trusted (see \"setTrustedProxies()\"), otherwise it returns\n         * the latter (from the \"SERVER_PROTOCOL\" server parameter).\n         *\n         * @return string\n         * @static\n         */        public static function getProtocolVersion()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getProtocolVersion();\n        }\n\n        /**\n         * Returns the request body content.\n         *\n         * @param bool $asResource If true, a resource will be returned\n         * @return string|resource The request body content or a resource to read the body stream\n         * @throws \\\\LogicException\n         * @static\n         */        public static function getContent($asResource = false)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getContent($asResource);\n        }\n\n        /**\n         * Gets the Etags.\n         *\n         * @return array The entity tags\n         * @static\n         */        public static function getETags()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getETags();\n        }\n\n        /**\n         *\n         *\n         * @return bool\n         * @static\n         */        public static function isNoCache()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->isNoCache();\n        }\n\n        /**\n         * Gets the preferred format for the response by inspecting, in the following order:\n         *   * the request format set using setRequestFormat\n         *   * the values of the Accept HTTP header\n         *\n         * Note that if you use this method, you should send the \"Vary: Accept\" header\n         * in the response to prevent any issues with intermediary HTTP caches.\n         *\n         * @static\n         */        public static function getPreferredFormat($default = 'html')\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getPreferredFormat($default);\n        }\n\n        /**\n         * Returns the preferred language.\n         *\n         * @param string[] $locales An array of ordered available locales\n         * @return string|null The preferred locale\n         * @static\n         */        public static function getPreferredLanguage($locales = null)\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getPreferredLanguage($locales);\n        }\n\n        /**\n         * Gets a list of languages acceptable by the client browser.\n         *\n         * @return array Languages ordered in the user browser preferences\n         * @static\n         */        public static function getLanguages()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getLanguages();\n        }\n\n        /**\n         * Gets a list of charsets acceptable by the client browser.\n         *\n         * @return array List of charsets in preferable order\n         * @static\n         */        public static function getCharsets()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getCharsets();\n        }\n\n        /**\n         * Gets a list of encodings acceptable by the client browser.\n         *\n         * @return array List of encodings in preferable order\n         * @static\n         */        public static function getEncodings()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getEncodings();\n        }\n\n        /**\n         * Gets a list of content types acceptable by the client browser.\n         *\n         * @return array List of content types in preferable order\n         * @static\n         */        public static function getAcceptableContentTypes()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->getAcceptableContentTypes();\n        }\n\n        /**\n         * Returns true if the request is a XMLHttpRequest.\n         *\n         * It works if your JavaScript library sets an X-Requested-With HTTP header.\n         * It is known to work with common JavaScript frameworks:\n         *\n         * @see https://wikipedia.org/wiki/List_of_Ajax_frameworks#JavaScript\n         * @return bool true if the request is an XMLHttpRequest, false otherwise\n         * @static\n         */        public static function isXmlHttpRequest()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->isXmlHttpRequest();\n        }\n\n        /**\n         * Indicates whether this request originated from a trusted proxy.\n         *\n         * This can be useful to determine whether or not to trust the\n         * contents of a proxy-specific header.\n         *\n         * @return bool true if the request came from a trusted proxy, false otherwise\n         * @static\n         */        public static function isFromTrustedProxy()\n        {\n            //Method inherited from \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->isFromTrustedProxy();\n        }\n\n        /**\n         * Determine if the given content types match.\n         *\n         * @param string $actual\n         * @param string $type\n         * @return bool\n         * @static\n         */        public static function matchesType($actual, $type)\n        {\n                        return \\\\Illuminate\\\\Http\\\\Request::matchesType($actual, $type);\n        }\n\n        /**\n         * Determine if the request is sending JSON.\n         *\n         * @return bool\n         * @static\n         */        public static function isJson()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->isJson();\n        }\n\n        /**\n         * Determine if the current request probably expects a JSON response.\n         *\n         * @return bool\n         * @static\n         */        public static function expectsJson()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->expectsJson();\n        }\n\n        /**\n         * Determine if the current request is asking for JSON.\n         *\n         * @return bool\n         * @static\n         */        public static function wantsJson()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->wantsJson();\n        }\n\n        /**\n         * Determines whether the current requests accepts a given content type.\n         *\n         * @param string|array $contentTypes\n         * @return bool\n         * @static\n         */        public static function accepts($contentTypes)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->accepts($contentTypes);\n        }\n\n        /**\n         * Return the most suitable content type from the given array based on content negotiation.\n         *\n         * @param string|array $contentTypes\n         * @return string|null\n         * @static\n         */        public static function prefers($contentTypes)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->prefers($contentTypes);\n        }\n\n        /**\n         * Determine if the current request accepts any content type.\n         *\n         * @return bool\n         * @static\n         */        public static function acceptsAnyContentType()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->acceptsAnyContentType();\n        }\n\n        /**\n         * Determines whether a request accepts JSON.\n         *\n         * @return bool\n         * @static\n         */        public static function acceptsJson()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->acceptsJson();\n        }\n\n        /**\n         * Determines whether a request accepts HTML.\n         *\n         * @return bool\n         * @static\n         */        public static function acceptsHtml()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->acceptsHtml();\n        }\n\n        /**\n         * Get the data format expected in the response.\n         *\n         * @param string $default\n         * @return string\n         * @static\n         */        public static function format($default = 'html')\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->format($default);\n        }\n\n        /**\n         * Retrieve an old input item.\n         *\n         * @param string|null $key\n         * @param string|array|null $default\n         * @return string|array\n         * @static\n         */        public static function old($key = null, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->old($key, $default);\n        }\n\n        /**\n         * Flash the input for the current request to the session.\n         *\n         * @return void\n         * @static\n         */        public static function flash()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        $instance->flash();\n        }\n\n        /**\n         * Flash only some of the input to the session.\n         *\n         * @param array|mixed $keys\n         * @return void\n         * @static\n         */        public static function flashOnly($keys)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        $instance->flashOnly($keys);\n        }\n\n        /**\n         * Flash only some of the input to the session.\n         *\n         * @param array|mixed $keys\n         * @return void\n         * @static\n         */        public static function flashExcept($keys)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        $instance->flashExcept($keys);\n        }\n\n        /**\n         * Flush all of the old input from the session.\n         *\n         * @return void\n         * @static\n         */        public static function flush()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        $instance->flush();\n        }\n\n        /**\n         * Retrieve a server variable from the request.\n         *\n         * @param string|null $key\n         * @param string|array|null $default\n         * @return string|array|null\n         * @static\n         */        public static function server($key = null, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->server($key, $default);\n        }\n\n        /**\n         * Determine if a header is set on the request.\n         *\n         * @param string $key\n         * @return bool\n         * @static\n         */        public static function hasHeader($key)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->hasHeader($key);\n        }\n\n        /**\n         * Retrieve a header from the request.\n         *\n         * @param string|null $key\n         * @param string|array|null $default\n         * @return string|array|null\n         * @static\n         */        public static function header($key = null, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->header($key, $default);\n        }\n\n        /**\n         * Get the bearer token from the request headers.\n         *\n         * @return string|null\n         * @static\n         */        public static function bearerToken()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->bearerToken();\n        }\n\n        /**\n         * Determine if the request contains a given input item key.\n         *\n         * @param string|array $key\n         * @return bool\n         * @static\n         */        public static function exists($key)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->exists($key);\n        }\n\n        /**\n         * Determine if the request contains a given input item key.\n         *\n         * @param string|array $key\n         * @return bool\n         * @static\n         */        public static function has($key)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->has($key);\n        }\n\n        /**\n         * Determine if the request contains any of the given inputs.\n         *\n         * @param string|array $keys\n         * @return bool\n         * @static\n         */        public static function hasAny($keys)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->hasAny($keys);\n        }\n\n        /**\n         * Determine if the request contains a non-empty value for an input item.\n         *\n         * @param string|array $key\n         * @return bool\n         * @static\n         */        public static function filled($key)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->filled($key);\n        }\n\n        /**\n         * Determine if the request contains a non-empty value for any of the given inputs.\n         *\n         * @param string|array $keys\n         * @return bool\n         * @static\n         */        public static function anyFilled($keys)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->anyFilled($keys);\n        }\n\n        /**\n         * Determine if the request is missing a given input item key.\n         *\n         * @param string|array $key\n         * @return bool\n         * @static\n         */        public static function missing($key)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->missing($key);\n        }\n\n        /**\n         * Get the keys for all of the input and files.\n         *\n         * @return array\n         * @static\n         */        public static function keys()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->keys();\n        }\n\n        /**\n         * Get all of the input and files for the request.\n         *\n         * @param array|mixed|null $keys\n         * @return array\n         * @static\n         */        public static function all($keys = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->all($keys);\n        }\n\n        /**\n         * Retrieve an input item from the request.\n         *\n         * @param string|null $key\n         * @param mixed $default\n         * @return mixed\n         * @static\n         */        public static function input($key = null, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->input($key, $default);\n        }\n\n        /**\n         * Retrieve input as a boolean value.\n         *\n         * Returns true when value is \"1\", \"true\", \"on\", and \"yes\". Otherwise, returns false.\n         *\n         * @param string|null $key\n         * @param bool $default\n         * @return bool\n         * @static\n         */        public static function boolean($key = null, $default = false)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->boolean($key, $default);\n        }\n\n        /**\n         * Get a subset containing the provided keys with values from the input data.\n         *\n         * @param array|mixed $keys\n         * @return array\n         * @static\n         */        public static function only($keys)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->only($keys);\n        }\n\n        /**\n         * Get all of the input except for a specified array of items.\n         *\n         * @param array|mixed $keys\n         * @return array\n         * @static\n         */        public static function except($keys)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->except($keys);\n        }\n\n        /**\n         * Retrieve a query string item from the request.\n         *\n         * @param string|null $key\n         * @param string|array|null $default\n         * @return string|array|null\n         * @static\n         */        public static function query($key = null, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->query($key, $default);\n        }\n\n        /**\n         * Retrieve a request payload item from the request.\n         *\n         * @param string|null $key\n         * @param string|array|null $default\n         * @return string|array|null\n         * @static\n         */        public static function post($key = null, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->post($key, $default);\n        }\n\n        /**\n         * Determine if a cookie is set on the request.\n         *\n         * @param string $key\n         * @return bool\n         * @static\n         */        public static function hasCookie($key)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->hasCookie($key);\n        }\n\n        /**\n         * Retrieve a cookie from the request.\n         *\n         * @param string|null $key\n         * @param string|array|null $default\n         * @return string|array|null\n         * @static\n         */        public static function cookie($key = null, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->cookie($key, $default);\n        }\n\n        /**\n         * Get an array of all of the files on the request.\n         *\n         * @return array\n         * @static\n         */        public static function allFiles()\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->allFiles();\n        }\n\n        /**\n         * Determine if the uploaded data contains a file.\n         *\n         * @param string $key\n         * @return bool\n         * @static\n         */        public static function hasFile($key)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->hasFile($key);\n        }\n\n        /**\n         * Retrieve a file from the request.\n         *\n         * @param string|null $key\n         * @param mixed $default\n         * @return \\\\Illuminate\\\\Http\\\\UploadedFile|\\\\Illuminate\\\\Http\\\\UploadedFile[]|array|null\n         * @static\n         */        public static function file($key = null, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Http\\\\Request $instance */\n                        return $instance->file($key, $default);\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\Http\\\\Request::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\Http\\\\Request::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\Http\\\\Request::hasMacro($name);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function validate($rules, ...$params)\n        {\n                        return \\\\Illuminate\\\\Http\\\\Request::validate($rules, ...$params);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function validateWithBag($errorBag, $rules, ...$params)\n        {\n                        return \\\\Illuminate\\\\Http\\\\Request::validateWithBag($errorBag, $rules, ...$params);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function hasValidSignature($absolute = true)\n        {\n                        return \\\\Illuminate\\\\Http\\\\Request::hasValidSignature($absolute);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Contracts\\\\Routing\\\\ResponseFactory\n     */    class Response {\n\n        /**\n         * Create a new response instance.\n         *\n         * @param string $content\n         * @param int $status\n         * @param array $headers\n         * @return \\\\Illuminate\\\\Http\\\\Response\n         * @static\n         */        public static function make($content = '', $status = 200, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->make($content, $status, $headers);\n        }\n\n        /**\n         * Create a new \"no content\" response.\n         *\n         * @param int $status\n         * @param array $headers\n         * @return \\\\Illuminate\\\\Http\\\\Response\n         * @static\n         */        public static function noContent($status = 204, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->noContent($status, $headers);\n        }\n\n        /**\n         * Create a new response for a given view.\n         *\n         * @param string|array $view\n         * @param array $data\n         * @param int $status\n         * @param array $headers\n         * @return \\\\Illuminate\\\\Http\\\\Response\n         * @static\n         */        public static function view($view, $data = [], $status = 200, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->view($view, $data, $status, $headers);\n        }\n\n        /**\n         * Create a new JSON response instance.\n         *\n         * @param mixed $data\n         * @param int $status\n         * @param array $headers\n         * @param int $options\n         * @return \\\\Illuminate\\\\Http\\\\JsonResponse\n         * @static\n         */        public static function json($data = [], $status = 200, $headers = [], $options = 0)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->json($data, $status, $headers, $options);\n        }\n\n        /**\n         * Create a new JSONP response instance.\n         *\n         * @param string $callback\n         * @param mixed $data\n         * @param int $status\n         * @param array $headers\n         * @param int $options\n         * @return \\\\Illuminate\\\\Http\\\\JsonResponse\n         * @static\n         */        public static function jsonp($callback, $data = [], $status = 200, $headers = [], $options = 0)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->jsonp($callback, $data, $status, $headers, $options);\n        }\n\n        /**\n         * Create a new streamed response instance.\n         *\n         * @param \\\\Closure $callback\n         * @param int $status\n         * @param array $headers\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\StreamedResponse\n         * @static\n         */        public static function stream($callback, $status = 200, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->stream($callback, $status, $headers);\n        }\n\n        /**\n         * Create a new streamed response instance as a file download.\n         *\n         * @param \\\\Closure $callback\n         * @param string|null $name\n         * @param array $headers\n         * @param string|null $disposition\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\StreamedResponse\n         * @static\n         */        public static function streamDownload($callback, $name = null, $headers = [], $disposition = 'attachment')\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->streamDownload($callback, $name, $headers, $disposition);\n        }\n\n        /**\n         * Create a new file download response.\n         *\n         * @param \\\\SplFileInfo|string $file\n         * @param string|null $name\n         * @param array $headers\n         * @param string|null $disposition\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\BinaryFileResponse\n         * @static\n         */        public static function download($file, $name = null, $headers = [], $disposition = 'attachment')\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->download($file, $name, $headers, $disposition);\n        }\n\n        /**\n         * Return the raw contents of a binary file.\n         *\n         * @param \\\\SplFileInfo|string $file\n         * @param array $headers\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\BinaryFileResponse\n         * @static\n         */        public static function file($file, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->file($file, $headers);\n        }\n\n        /**\n         * Create a new redirect response to the given path.\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @param bool|null $secure\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function redirectTo($path, $status = 302, $headers = [], $secure = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->redirectTo($path, $status, $headers, $secure);\n        }\n\n        /**\n         * Create a new redirect response to a named route.\n         *\n         * @param string $route\n         * @param mixed $parameters\n         * @param int $status\n         * @param array $headers\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function redirectToRoute($route, $parameters = [], $status = 302, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->redirectToRoute($route, $parameters, $status, $headers);\n        }\n\n        /**\n         * Create a new redirect response to a controller action.\n         *\n         * @param string $action\n         * @param mixed $parameters\n         * @param int $status\n         * @param array $headers\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function redirectToAction($action, $parameters = [], $status = 302, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->redirectToAction($action, $parameters, $status, $headers);\n        }\n\n        /**\n         * Create a new redirect response, while putting the current URL in the session.\n         *\n         * @param string $path\n         * @param int $status\n         * @param array $headers\n         * @param bool|null $secure\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function redirectGuest($path, $status = 302, $headers = [], $secure = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->redirectGuest($path, $status, $headers, $secure);\n        }\n\n        /**\n         * Create a new redirect response to the previously intended location.\n         *\n         * @param string $default\n         * @param int $status\n         * @param array $headers\n         * @param bool|null $secure\n         * @return \\\\Illuminate\\\\Http\\\\RedirectResponse\n         * @static\n         */        public static function redirectToIntended($default = '/', $status = 302, $headers = [], $secure = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\ResponseFactory $instance */\n                        return $instance->redirectToIntended($default, $status, $headers, $secure);\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\Routing\\\\ResponseFactory::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\Routing\\\\ResponseFactory::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\Routing\\\\ResponseFactory::hasMacro($name);\n        }\n            }\n\n    /**\n     *\n     *\n     * @method static \\\\Illuminate\\\\Routing\\\\RouteRegistrar prefix(string  $prefix)\n     * @method static \\\\Illuminate\\\\Routing\\\\RouteRegistrar where(array  $where)\n     * @method static \\\\Illuminate\\\\Routing\\\\RouteRegistrar middleware(array|string|null $middleware)\n     * @method static \\\\Illuminate\\\\Routing\\\\RouteRegistrar as(string $value)\n     * @method static \\\\Illuminate\\\\Routing\\\\RouteRegistrar domain(string $value)\n     * @method static \\\\Illuminate\\\\Routing\\\\RouteRegistrar name(string $value)\n     * @method static \\\\Illuminate\\\\Routing\\\\RouteRegistrar namespace(string $value)\n     * @see \\\\Illuminate\\\\Routing\\\\Router\n     */    class Route {\n\n        /**\n         * Register a new GET route with the router.\n         *\n         * @param string $uri\n         * @param array|string|callable|null $action\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function get($uri, $action = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->get($uri, $action);\n        }\n\n        /**\n         * Register a new POST route with the router.\n         *\n         * @param string $uri\n         * @param array|string|callable|null $action\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function post($uri, $action = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->post($uri, $action);\n        }\n\n        /**\n         * Register a new PUT route with the router.\n         *\n         * @param string $uri\n         * @param array|string|callable|null $action\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function put($uri, $action = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->put($uri, $action);\n        }\n\n        /**\n         * Register a new PATCH route with the router.\n         *\n         * @param string $uri\n         * @param array|string|callable|null $action\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function patch($uri, $action = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->patch($uri, $action);\n        }\n\n        /**\n         * Register a new DELETE route with the router.\n         *\n         * @param string $uri\n         * @param array|string|callable|null $action\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function delete($uri, $action = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->delete($uri, $action);\n        }\n\n        /**\n         * Register a new OPTIONS route with the router.\n         *\n         * @param string $uri\n         * @param array|string|callable|null $action\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function options($uri, $action = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->options($uri, $action);\n        }\n\n        /**\n         * Register a new route responding to all verbs.\n         *\n         * @param string $uri\n         * @param array|string|callable|null $action\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function any($uri, $action = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->any($uri, $action);\n        }\n\n        /**\n         * Register a new Fallback route with the router.\n         *\n         * @param array|string|callable|null $action\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function fallback($action)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->fallback($action);\n        }\n\n        /**\n         * Create a redirect from one URI to another.\n         *\n         * @param string $uri\n         * @param string $destination\n         * @param int $status\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function redirect($uri, $destination, $status = 302)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->redirect($uri, $destination, $status);\n        }\n\n        /**\n         * Create a permanent redirect from one URI to another.\n         *\n         * @param string $uri\n         * @param string $destination\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function permanentRedirect($uri, $destination)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->permanentRedirect($uri, $destination);\n        }\n\n        /**\n         * Register a new route that returns a view.\n         *\n         * @param string $uri\n         * @param string $view\n         * @param array $data\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function view($uri, $view, $data = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->view($uri, $view, $data);\n        }\n\n        /**\n         * Register a new route with the given verbs.\n         *\n         * @param array|string $methods\n         * @param string $uri\n         * @param array|string|callable|null $action\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function match($methods, $uri, $action = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->match($methods, $uri, $action);\n        }\n\n        /**\n         * Register an array of resource controllers.\n         *\n         * @param array $resources\n         * @param array $options\n         * @return void\n         * @static\n         */        public static function resources($resources, $options = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        $instance->resources($resources, $options);\n        }\n\n        /**\n         * Route a resource to a controller.\n         *\n         * @param string $name\n         * @param string $controller\n         * @param array $options\n         * @return \\\\Illuminate\\\\Routing\\\\PendingResourceRegistration\n         * @static\n         */        public static function resource($name, $controller, $options = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->resource($name, $controller, $options);\n        }\n\n        /**\n         * Register an array of API resource controllers.\n         *\n         * @param array $resources\n         * @param array $options\n         * @return void\n         * @static\n         */        public static function apiResources($resources, $options = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        $instance->apiResources($resources, $options);\n        }\n\n        /**\n         * Route an API resource to a controller.\n         *\n         * @param string $name\n         * @param string $controller\n         * @param array $options\n         * @return \\\\Illuminate\\\\Routing\\\\PendingResourceRegistration\n         * @static\n         */        public static function apiResource($name, $controller, $options = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->apiResource($name, $controller, $options);\n        }\n\n        /**\n         * Create a route group with shared attributes.\n         *\n         * @param array $attributes\n         * @param \\\\Closure|string $routes\n         * @return void\n         * @static\n         */        public static function group($attributes, $routes)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        $instance->group($attributes, $routes);\n        }\n\n        /**\n         * Merge the given array with the last group stack.\n         *\n         * @param array $new\n         * @param bool $prependExistingPrefix\n         * @return array\n         * @static\n         */        public static function mergeWithLastGroup($new, $prependExistingPrefix = true)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->mergeWithLastGroup($new, $prependExistingPrefix);\n        }\n\n        /**\n         * Get the prefix from the last group on the stack.\n         *\n         * @return string\n         * @static\n         */        public static function getLastGroupPrefix()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->getLastGroupPrefix();\n        }\n\n        /**\n         * Add a route to the underlying route collection.\n         *\n         * @param array|string $methods\n         * @param string $uri\n         * @param array|string|callable|null $action\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function addRoute($methods, $uri, $action)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->addRoute($methods, $uri, $action);\n        }\n\n        /**\n         * Create a new Route object.\n         *\n         * @param array|string $methods\n         * @param string $uri\n         * @param mixed $action\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function newRoute($methods, $uri, $action)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->newRoute($methods, $uri, $action);\n        }\n\n        /**\n         * Return the response returned by the given route.\n         *\n         * @param string $name\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Response\n         * @static\n         */        public static function respondWithRoute($name)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->respondWithRoute($name);\n        }\n\n        /**\n         * Dispatch the request to the application.\n         *\n         * @param \\\\Illuminate\\\\Http\\\\Request $request\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Response\n         * @static\n         */        public static function dispatch($request)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->dispatch($request);\n        }\n\n        /**\n         * Dispatch the request to a route and return the response.\n         *\n         * @param \\\\Illuminate\\\\Http\\\\Request $request\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Response\n         * @static\n         */        public static function dispatchToRoute($request)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->dispatchToRoute($request);\n        }\n\n        /**\n         * Gather the middleware for the given route with resolved class names.\n         *\n         * @param \\\\Illuminate\\\\Routing\\\\Route $route\n         * @return array\n         * @static\n         */        public static function gatherRouteMiddleware($route)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->gatherRouteMiddleware($route);\n        }\n\n        /**\n         * Create a response instance from the given value.\n         *\n         * @param \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request $request\n         * @param mixed $response\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Response\n         * @static\n         */        public static function prepareResponse($request, $response)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->prepareResponse($request, $response);\n        }\n\n        /**\n         * Static version of prepareResponse.\n         *\n         * @param \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request $request\n         * @param mixed $response\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Response\n         * @static\n         */        public static function toResponse($request, $response)\n        {\n                        return \\\\Illuminate\\\\Routing\\\\Router::toResponse($request, $response);\n        }\n\n        /**\n         * Substitute the route bindings onto the route.\n         *\n         * @param \\\\Illuminate\\\\Routing\\\\Route $route\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @throws \\\\Illuminate\\\\Database\\\\Eloquent\\\\ModelNotFoundException\n         * @static\n         */        public static function substituteBindings($route)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->substituteBindings($route);\n        }\n\n        /**\n         * Substitute the implicit Eloquent model bindings for the route.\n         *\n         * @param \\\\Illuminate\\\\Routing\\\\Route $route\n         * @return void\n         * @throws \\\\Illuminate\\\\Database\\\\Eloquent\\\\ModelNotFoundException\n         * @static\n         */        public static function substituteImplicitBindings($route)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        $instance->substituteImplicitBindings($route);\n        }\n\n        /**\n         * Register a route matched event listener.\n         *\n         * @param string|callable $callback\n         * @return void\n         * @static\n         */        public static function matched($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        $instance->matched($callback);\n        }\n\n        /**\n         * Get all of the defined middleware short-hand names.\n         *\n         * @return array\n         * @static\n         */        public static function getMiddleware()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->getMiddleware();\n        }\n\n        /**\n         * Register a short-hand name for a middleware.\n         *\n         * @param string $name\n         * @param string $class\n         * @return \\\\Illuminate\\\\Routing\\\\Router\n         * @static\n         */        public static function aliasMiddleware($name, $class)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->aliasMiddleware($name, $class);\n        }\n\n        /**\n         * Check if a middlewareGroup with the given name exists.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMiddlewareGroup($name)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->hasMiddlewareGroup($name);\n        }\n\n        /**\n         * Get all of the defined middleware groups.\n         *\n         * @return array\n         * @static\n         */        public static function getMiddlewareGroups()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->getMiddlewareGroups();\n        }\n\n        /**\n         * Register a group of middleware.\n         *\n         * @param string $name\n         * @param array $middleware\n         * @return \\\\Illuminate\\\\Routing\\\\Router\n         * @static\n         */        public static function middlewareGroup($name, $middleware)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->middlewareGroup($name, $middleware);\n        }\n\n        /**\n         * Add a middleware to the beginning of a middleware group.\n         *\n         * If the middleware is already in the group, it will not be added again.\n         *\n         * @param string $group\n         * @param string $middleware\n         * @return \\\\Illuminate\\\\Routing\\\\Router\n         * @static\n         */        public static function prependMiddlewareToGroup($group, $middleware)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->prependMiddlewareToGroup($group, $middleware);\n        }\n\n        /**\n         * Add a middleware to the end of a middleware group.\n         *\n         * If the middleware is already in the group, it will not be added again.\n         *\n         * @param string $group\n         * @param string $middleware\n         * @return \\\\Illuminate\\\\Routing\\\\Router\n         * @static\n         */        public static function pushMiddlewareToGroup($group, $middleware)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->pushMiddlewareToGroup($group, $middleware);\n        }\n\n        /**\n         * Add a new route parameter binder.\n         *\n         * @param string $key\n         * @param string|callable $binder\n         * @return void\n         * @static\n         */        public static function bind($key, $binder)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        $instance->bind($key, $binder);\n        }\n\n        /**\n         * Register a model binder for a wildcard.\n         *\n         * @param string $key\n         * @param string $class\n         * @param \\\\Closure|null $callback\n         * @return void\n         * @static\n         */        public static function model($key, $class, $callback = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        $instance->model($key, $class, $callback);\n        }\n\n        /**\n         * Get the binding callback for a given binding.\n         *\n         * @param string $key\n         * @return \\\\Closure|null\n         * @static\n         */        public static function getBindingCallback($key)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->getBindingCallback($key);\n        }\n\n        /**\n         * Get the global \"where\" patterns.\n         *\n         * @return array\n         * @static\n         */        public static function getPatterns()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->getPatterns();\n        }\n\n        /**\n         * Set a global where pattern on all routes.\n         *\n         * @param string $key\n         * @param string $pattern\n         * @return void\n         * @static\n         */        public static function pattern($key, $pattern)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        $instance->pattern($key, $pattern);\n        }\n\n        /**\n         * Set a group of global where patterns on all routes.\n         *\n         * @param array $patterns\n         * @return void\n         * @static\n         */        public static function patterns($patterns)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        $instance->patterns($patterns);\n        }\n\n        /**\n         * Determine if the router currently has a group stack.\n         *\n         * @return bool\n         * @static\n         */        public static function hasGroupStack()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->hasGroupStack();\n        }\n\n        /**\n         * Get the current group stack for the router.\n         *\n         * @return array\n         * @static\n         */        public static function getGroupStack()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->getGroupStack();\n        }\n\n        /**\n         * Get a route parameter for the current route.\n         *\n         * @param string $key\n         * @param string|null $default\n         * @return mixed\n         * @static\n         */        public static function input($key, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->input($key, $default);\n        }\n\n        /**\n         * Get the request currently being dispatched.\n         *\n         * @return \\\\Illuminate\\\\Http\\\\Request\n         * @static\n         */        public static function getCurrentRequest()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->getCurrentRequest();\n        }\n\n        /**\n         * Get the currently dispatched route instance.\n         *\n         * @return \\\\Illuminate\\\\Routing\\\\Route\n         * @static\n         */        public static function getCurrentRoute()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->getCurrentRoute();\n        }\n\n        /**\n         * Get the currently dispatched route instance.\n         *\n         * @return \\\\Illuminate\\\\Routing\\\\Route|null\n         * @static\n         */        public static function current()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->current();\n        }\n\n        /**\n         * Check if a route with the given name exists.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function has($name)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->has($name);\n        }\n\n        /**\n         * Get the current route name.\n         *\n         * @return string|null\n         * @static\n         */        public static function currentRouteName()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->currentRouteName();\n        }\n\n        /**\n         * Alias for the \"currentRouteNamed\" method.\n         *\n         * @param mixed $patterns\n         * @return bool\n         * @static\n         */        public static function is(...$patterns)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->is(...$patterns);\n        }\n\n        /**\n         * Determine if the current route matches a pattern.\n         *\n         * @param mixed $patterns\n         * @return bool\n         * @static\n         */        public static function currentRouteNamed(...$patterns)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->currentRouteNamed(...$patterns);\n        }\n\n        /**\n         * Get the current route action.\n         *\n         * @return string|null\n         * @static\n         */        public static function currentRouteAction()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->currentRouteAction();\n        }\n\n        /**\n         * Alias for the \"currentRouteUses\" method.\n         *\n         * @param array $patterns\n         * @return bool\n         * @static\n         */        public static function uses(...$patterns)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->uses(...$patterns);\n        }\n\n        /**\n         * Determine if the current route action matches a given action.\n         *\n         * @param string $action\n         * @return bool\n         * @static\n         */        public static function currentRouteUses($action)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->currentRouteUses($action);\n        }\n\n        /**\n         * Set the unmapped global resource parameters to singular.\n         *\n         * @param bool $singular\n         * @return void\n         * @static\n         */        public static function singularResourceParameters($singular = true)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        $instance->singularResourceParameters($singular);\n        }\n\n        /**\n         * Set the global resource parameter mapping.\n         *\n         * @param array $parameters\n         * @return void\n         * @static\n         */        public static function resourceParameters($parameters = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        $instance->resourceParameters($parameters);\n        }\n\n        /**\n         * Get or set the verbs used in the resource URIs.\n         *\n         * @param array $verbs\n         * @return array|null\n         * @static\n         */        public static function resourceVerbs($verbs = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->resourceVerbs($verbs);\n        }\n\n        /**\n         * Get the underlying route collection.\n         *\n         * @return \\\\Illuminate\\\\Routing\\\\RouteCollectionInterface\n         * @static\n         */        public static function getRoutes()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->getRoutes();\n        }\n\n        /**\n         * Set the route collection instance.\n         *\n         * @param \\\\Illuminate\\\\Routing\\\\RouteCollection $routes\n         * @return void\n         * @static\n         */        public static function setRoutes($routes)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        $instance->setRoutes($routes);\n        }\n\n        /**\n         * Set the compiled route collection instance.\n         *\n         * @param array $routes\n         * @return void\n         * @static\n         */        public static function setCompiledRoutes($routes)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        $instance->setCompiledRoutes($routes);\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\Routing\\\\Router::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\Routing\\\\Router::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\Routing\\\\Router::hasMacro($name);\n        }\n\n        /**\n         * Dynamically handle calls to the class.\n         *\n         * @param string $method\n         * @param array $parameters\n         * @return mixed\n         * @throws \\\\BadMethodCallException\n         * @static\n         */        public static function macroCall($method, $parameters)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\Router $instance */\n                        return $instance->macroCall($method, $parameters);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n     */    class Schema {\n\n        /**\n         * Determine if the given table exists.\n         *\n         * @param string $table\n         * @return bool\n         * @static\n         */        public static function hasTable($table)\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        return $instance->hasTable($table);\n        }\n\n        /**\n         * Get the column listing for a given table.\n         *\n         * @param string $table\n         * @return array\n         * @static\n         */        public static function getColumnListing($table)\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        return $instance->getColumnListing($table);\n        }\n\n        /**\n         * Drop all tables from the database.\n         *\n         * @return void\n         * @static\n         */        public static function dropAllTables()\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        $instance->dropAllTables();\n        }\n\n        /**\n         * Drop all views from the database.\n         *\n         * @return void\n         * @static\n         */        public static function dropAllViews()\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        $instance->dropAllViews();\n        }\n\n        /**\n         * Get all of the table names for the database.\n         *\n         * @return array\n         * @static\n         */        public static function getAllTables()\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        return $instance->getAllTables();\n        }\n\n        /**\n         * Get all of the view names for the database.\n         *\n         * @return array\n         * @static\n         */        public static function getAllViews()\n        {\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        return $instance->getAllViews();\n        }\n\n        /**\n         * Set the default string length for migrations.\n         *\n         * @param int $length\n         * @return void\n         * @static\n         */        public static function defaultStringLength($length)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder::defaultStringLength($length);\n        }\n\n        /**\n         * Determine if the given table has a given column.\n         *\n         * @param string $table\n         * @param string $column\n         * @return bool\n         * @static\n         */        public static function hasColumn($table, $column)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        return $instance->hasColumn($table, $column);\n        }\n\n        /**\n         * Determine if the given table has given columns.\n         *\n         * @param string $table\n         * @param array $columns\n         * @return bool\n         * @static\n         */        public static function hasColumns($table, $columns)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        return $instance->hasColumns($table, $columns);\n        }\n\n        /**\n         * Get the data type for the given column name.\n         *\n         * @param string $table\n         * @param string $column\n         * @return string\n         * @static\n         */        public static function getColumnType($table, $column)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        return $instance->getColumnType($table, $column);\n        }\n\n        /**\n         * Modify a table on the schema.\n         *\n         * @param string $table\n         * @param \\\\Closure $callback\n         * @return void\n         * @static\n         */        public static function table($table, $callback)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        $instance->table($table, $callback);\n        }\n\n        /**\n         * Create a new table on the schema.\n         *\n         * @param string $table\n         * @param \\\\Closure $callback\n         * @return void\n         * @static\n         */        public static function create($table, $callback)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        $instance->create($table, $callback);\n        }\n\n        /**\n         * Drop a table from the schema.\n         *\n         * @param string $table\n         * @return void\n         * @static\n         */        public static function drop($table)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        $instance->drop($table);\n        }\n\n        /**\n         * Drop a table from the schema if it exists.\n         *\n         * @param string $table\n         * @return void\n         * @static\n         */        public static function dropIfExists($table)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        $instance->dropIfExists($table);\n        }\n\n        /**\n         * Drop all types from the database.\n         *\n         * @return void\n         * @throws \\\\LogicException\n         * @static\n         */        public static function dropAllTypes()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        $instance->dropAllTypes();\n        }\n\n        /**\n         * Rename a table on the schema.\n         *\n         * @param string $from\n         * @param string $to\n         * @return void\n         * @static\n         */        public static function rename($from, $to)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        $instance->rename($from, $to);\n        }\n\n        /**\n         * Enable foreign key constraints.\n         *\n         * @return bool\n         * @static\n         */        public static function enableForeignKeyConstraints()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        return $instance->enableForeignKeyConstraints();\n        }\n\n        /**\n         * Disable foreign key constraints.\n         *\n         * @return bool\n         * @static\n         */        public static function disableForeignKeyConstraints()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        return $instance->disableForeignKeyConstraints();\n        }\n\n        /**\n         * Register a custom Doctrine mapping type.\n         *\n         * @param string $class\n         * @param string $name\n         * @param string $type\n         * @return void\n         * @throws \\\\Doctrine\\\\DBAL\\\\DBALException\n         * @throws \\\\RuntimeException\n         * @static\n         */        public static function registerCustomDoctrineType($class, $name, $type)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        $instance->registerCustomDoctrineType($class, $name, $type);\n        }\n\n        /**\n         * Get the database connection instance.\n         *\n         * @return \\\\Illuminate\\\\Database\\\\Connection\n         * @static\n         */        public static function getConnection()\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        return $instance->getConnection();\n        }\n\n        /**\n         * Set the database connection instance.\n         *\n         * @param \\\\Illuminate\\\\Database\\\\Connection $connection\n         * @return \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder\n         * @static\n         */        public static function setConnection($connection)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        return $instance->setConnection($connection);\n        }\n\n        /**\n         * Set the Schema Blueprint resolver callback.\n         *\n         * @param \\\\Closure $resolver\n         * @return void\n         * @static\n         */        public static function blueprintResolver($resolver)\n        {\n            //Method inherited from \\\\Illuminate\\\\Database\\\\Schema\\\\Builder\n                        /** @var \\\\Illuminate\\\\Database\\\\Schema\\\\MySqlBuilder $instance */\n                        $instance->blueprintResolver($resolver);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Session\\\\SessionManager\n     * @see \\\\Illuminate\\\\Session\\\\Store\n     */    class Session {\n\n        /**\n         * Get the session configuration.\n         *\n         * @return array\n         * @static\n         */        public static function getSessionConfig()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\SessionManager $instance */\n                        return $instance->getSessionConfig();\n        }\n\n        /**\n         * Get the default session driver name.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\SessionManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n\n        /**\n         * Set the default session driver name.\n         *\n         * @param string $name\n         * @return void\n         * @static\n         */        public static function setDefaultDriver($name)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\SessionManager $instance */\n                        $instance->setDefaultDriver($name);\n        }\n\n        /**\n         * Get a driver instance.\n         *\n         * @param string|null $driver\n         * @return mixed\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function driver($driver = null)\n        {\n            //Method inherited from \\\\Illuminate\\\\Support\\\\Manager\n                        /** @var \\\\Illuminate\\\\Session\\\\SessionManager $instance */\n                        return $instance->driver($driver);\n        }\n\n        /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Session\\\\SessionManager\n         * @static\n         */        public static function extend($driver, $callback)\n        {\n            //Method inherited from \\\\Illuminate\\\\Support\\\\Manager\n                        /** @var \\\\Illuminate\\\\Session\\\\SessionManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n\n        /**\n         * Get all of the created \"drivers\".\n         *\n         * @return array\n         * @static\n         */        public static function getDrivers()\n        {\n            //Method inherited from \\\\Illuminate\\\\Support\\\\Manager\n                        /** @var \\\\Illuminate\\\\Session\\\\SessionManager $instance */\n                        return $instance->getDrivers();\n        }\n\n        /**\n         * Start the session, reading the data from a handler.\n         *\n         * @return bool\n         * @static\n         */        public static function start()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->start();\n        }\n\n        /**\n         * Save the session data to storage.\n         *\n         * @return void\n         * @static\n         */        public static function save()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->save();\n        }\n\n        /**\n         * Age the flash data for the session.\n         *\n         * @return void\n         * @static\n         */        public static function ageFlashData()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->ageFlashData();\n        }\n\n        /**\n         * Get all of the session data.\n         *\n         * @return array\n         * @static\n         */        public static function all()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->all();\n        }\n\n        /**\n         * Get a subset of the session data.\n         *\n         * @param array $keys\n         * @return array\n         * @static\n         */        public static function only($keys)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->only($keys);\n        }\n\n        /**\n         * Checks if a key exists.\n         *\n         * @param string|array $key\n         * @return bool\n         * @static\n         */        public static function exists($key)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->exists($key);\n        }\n\n        /**\n         * Checks if a key is present and not null.\n         *\n         * @param string|array $key\n         * @return bool\n         * @static\n         */        public static function has($key)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->has($key);\n        }\n\n        /**\n         * Get an item from the session.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed\n         * @static\n         */        public static function get($key, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->get($key, $default);\n        }\n\n        /**\n         * Get the value of a given key and then forget it.\n         *\n         * @param string $key\n         * @param string|null $default\n         * @return mixed\n         * @static\n         */        public static function pull($key, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->pull($key, $default);\n        }\n\n        /**\n         * Determine if the session contains old input.\n         *\n         * @param string|null $key\n         * @return bool\n         * @static\n         */        public static function hasOldInput($key = null)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->hasOldInput($key);\n        }\n\n        /**\n         * Get the requested item from the flashed input array.\n         *\n         * @param string|null $key\n         * @param mixed $default\n         * @return mixed\n         * @static\n         */        public static function getOldInput($key = null, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->getOldInput($key, $default);\n        }\n\n        /**\n         * Replace the given session attributes entirely.\n         *\n         * @param array $attributes\n         * @return void\n         * @static\n         */        public static function replace($attributes)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->replace($attributes);\n        }\n\n        /**\n         * Put a key / value pair or array of key / value pairs in the session.\n         *\n         * @param string|array $key\n         * @param mixed $value\n         * @return void\n         * @static\n         */        public static function put($key, $value = null)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->put($key, $value);\n        }\n\n        /**\n         * Get an item from the session, or store the default value.\n         *\n         * @param string $key\n         * @param \\\\Closure $callback\n         * @return mixed\n         * @static\n         */        public static function remember($key, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->remember($key, $callback);\n        }\n\n        /**\n         * Push a value onto a session array.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void\n         * @static\n         */        public static function push($key, $value)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->push($key, $value);\n        }\n\n        /**\n         * Increment the value of an item in the session.\n         *\n         * @param string $key\n         * @param int $amount\n         * @return mixed\n         * @static\n         */        public static function increment($key, $amount = 1)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->increment($key, $amount);\n        }\n\n        /**\n         * Decrement the value of an item in the session.\n         *\n         * @param string $key\n         * @param int $amount\n         * @return int\n         * @static\n         */        public static function decrement($key, $amount = 1)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->decrement($key, $amount);\n        }\n\n        /**\n         * Flash a key / value pair to the session.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void\n         * @static\n         */        public static function flash($key, $value = true)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->flash($key, $value);\n        }\n\n        /**\n         * Flash a key / value pair to the session for immediate use.\n         *\n         * @param string $key\n         * @param mixed $value\n         * @return void\n         * @static\n         */        public static function now($key, $value)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->now($key, $value);\n        }\n\n        /**\n         * Reflash all of the session flash data.\n         *\n         * @return void\n         * @static\n         */        public static function reflash()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->reflash();\n        }\n\n        /**\n         * Reflash a subset of the current flash data.\n         *\n         * @param array|mixed $keys\n         * @return void\n         * @static\n         */        public static function keep($keys = null)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->keep($keys);\n        }\n\n        /**\n         * Flash an input array to the session.\n         *\n         * @param array $value\n         * @return void\n         * @static\n         */        public static function flashInput($value)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->flashInput($value);\n        }\n\n        /**\n         * Remove an item from the session, returning its value.\n         *\n         * @param string $key\n         * @return mixed\n         * @static\n         */        public static function remove($key)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->remove($key);\n        }\n\n        /**\n         * Remove one or many items from the session.\n         *\n         * @param string|array $keys\n         * @return void\n         * @static\n         */        public static function forget($keys)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->forget($keys);\n        }\n\n        /**\n         * Remove all of the items from the session.\n         *\n         * @return void\n         * @static\n         */        public static function flush()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->flush();\n        }\n\n        /**\n         * Flush the session data and regenerate the ID.\n         *\n         * @return bool\n         * @static\n         */        public static function invalidate()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->invalidate();\n        }\n\n        /**\n         * Generate a new session identifier.\n         *\n         * @param bool $destroy\n         * @return bool\n         * @static\n         */        public static function regenerate($destroy = false)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->regenerate($destroy);\n        }\n\n        /**\n         * Generate a new session ID for the session.\n         *\n         * @param bool $destroy\n         * @return bool\n         * @static\n         */        public static function migrate($destroy = false)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->migrate($destroy);\n        }\n\n        /**\n         * Determine if the session has been started.\n         *\n         * @return bool\n         * @static\n         */        public static function isStarted()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->isStarted();\n        }\n\n        /**\n         * Get the name of the session.\n         *\n         * @return string\n         * @static\n         */        public static function getName()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->getName();\n        }\n\n        /**\n         * Set the name of the session.\n         *\n         * @param string $name\n         * @return void\n         * @static\n         */        public static function setName($name)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->setName($name);\n        }\n\n        /**\n         * Get the current session ID.\n         *\n         * @return string\n         * @static\n         */        public static function getId()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->getId();\n        }\n\n        /**\n         * Set the session ID.\n         *\n         * @param string $id\n         * @return void\n         * @static\n         */        public static function setId($id)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->setId($id);\n        }\n\n        /**\n         * Determine if this is a valid session ID.\n         *\n         * @param string $id\n         * @return bool\n         * @static\n         */        public static function isValidId($id)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->isValidId($id);\n        }\n\n        /**\n         * Set the existence of the session on the handler if applicable.\n         *\n         * @param bool $value\n         * @return void\n         * @static\n         */        public static function setExists($value)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->setExists($value);\n        }\n\n        /**\n         * Get the CSRF token value.\n         *\n         * @return string\n         * @static\n         */        public static function token()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->token();\n        }\n\n        /**\n         * Regenerate the CSRF token value.\n         *\n         * @return void\n         * @static\n         */        public static function regenerateToken()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->regenerateToken();\n        }\n\n        /**\n         * Get the previous URL from the session.\n         *\n         * @return string|null\n         * @static\n         */        public static function previousUrl()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->previousUrl();\n        }\n\n        /**\n         * Set the \"previous\" URL in the session.\n         *\n         * @param string $url\n         * @return void\n         * @static\n         */        public static function setPreviousUrl($url)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->setPreviousUrl($url);\n        }\n\n        /**\n         * Get the underlying session handler implementation.\n         *\n         * @return \\\\SessionHandlerInterface\n         * @static\n         */        public static function getHandler()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->getHandler();\n        }\n\n        /**\n         * Determine if the session handler needs a request.\n         *\n         * @return bool\n         * @static\n         */        public static function handlerNeedsRequest()\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        return $instance->handlerNeedsRequest();\n        }\n\n        /**\n         * Set the request on the handler instance.\n         *\n         * @param \\\\Illuminate\\\\Http\\\\Request $request\n         * @return void\n         * @static\n         */        public static function setRequestOnHandler($request)\n        {\n                        /** @var \\\\Illuminate\\\\Session\\\\Store $instance */\n                        $instance->setRequestOnHandler($request);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Filesystem\\\\FilesystemManager\n     */    class Storage {\n\n        /**\n         * Get a filesystem instance.\n         *\n         * @param string|null $name\n         * @return \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter\n         * @static\n         */        public static function drive($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemManager $instance */\n                        return $instance->drive($name);\n        }\n\n        /**\n         * Get a filesystem instance.\n         *\n         * @param string|null $name\n         * @return \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter\n         * @static\n         */        public static function disk($name = null)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemManager $instance */\n                        return $instance->disk($name);\n        }\n\n        /**\n         * Get a default cloud filesystem instance.\n         *\n         * @return \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter\n         * @static\n         */        public static function cloud()\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemManager $instance */\n                        return $instance->cloud();\n        }\n\n        /**\n         * Create an instance of the local driver.\n         *\n         * @param array $config\n         * @return \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter\n         * @static\n         */        public static function createLocalDriver($config)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemManager $instance */\n                        return $instance->createLocalDriver($config);\n        }\n\n        /**\n         * Create an instance of the ftp driver.\n         *\n         * @param array $config\n         * @return \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter\n         * @static\n         */        public static function createFtpDriver($config)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemManager $instance */\n                        return $instance->createFtpDriver($config);\n        }\n\n        /**\n         * Create an instance of the sftp driver.\n         *\n         * @param array $config\n         * @return \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter\n         * @static\n         */        public static function createSftpDriver($config)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemManager $instance */\n                        return $instance->createSftpDriver($config);\n        }\n\n        /**\n         * Create an instance of the Amazon S3 driver.\n         *\n         * @param array $config\n         * @return \\\\Illuminate\\\\Contracts\\\\Filesystem\\\\Cloud\n         * @static\n         */        public static function createS3Driver($config)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemManager $instance */\n                        return $instance->createS3Driver($config);\n        }\n\n        /**\n         * Set the given disk instance.\n         *\n         * @param string $name\n         * @param mixed $disk\n         * @return \\\\Illuminate\\\\Filesystem\\\\FilesystemManager\n         * @static\n         */        public static function set($name, $disk)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemManager $instance */\n                        return $instance->set($name, $disk);\n        }\n\n        /**\n         * Get the default driver name.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemManager $instance */\n                        return $instance->getDefaultDriver();\n        }\n\n        /**\n         * Get the default cloud driver name.\n         *\n         * @return string\n         * @static\n         */        public static function getDefaultCloudDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemManager $instance */\n                        return $instance->getDefaultCloudDriver();\n        }\n\n        /**\n         * Unset the given disk instances.\n         *\n         * @param array|string $disk\n         * @return \\\\Illuminate\\\\Filesystem\\\\FilesystemManager\n         * @static\n         */        public static function forgetDisk($disk)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemManager $instance */\n                        return $instance->forgetDisk($disk);\n        }\n\n        /**\n         * Register a custom driver creator Closure.\n         *\n         * @param string $driver\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Filesystem\\\\FilesystemManager\n         * @static\n         */        public static function extend($driver, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemManager $instance */\n                        return $instance->extend($driver, $callback);\n        }\n\n        /**\n         * Assert that the given file exists.\n         *\n         * @param string|array $path\n         * @return \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter\n         * @static\n         */        public static function assertExists($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->assertExists($path);\n        }\n\n        /**\n         * Assert that the given file does not exist.\n         *\n         * @param string|array $path\n         * @return \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter\n         * @static\n         */        public static function assertMissing($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->assertMissing($path);\n        }\n\n        /**\n         * Determine if a file exists.\n         *\n         * @param string $path\n         * @return bool\n         * @static\n         */        public static function exists($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->exists($path);\n        }\n\n        /**\n         * Determine if a file or directory is missing.\n         *\n         * @param string $path\n         * @return bool\n         * @static\n         */        public static function missing($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->missing($path);\n        }\n\n        /**\n         * Get the full path for the file at the given \"short\" path.\n         *\n         * @param string $path\n         * @return string\n         * @static\n         */        public static function path($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->path($path);\n        }\n\n        /**\n         * Get the contents of a file.\n         *\n         * @param string $path\n         * @return string\n         * @throws \\\\Illuminate\\\\Contracts\\\\Filesystem\\\\FileNotFoundException\n         * @static\n         */        public static function get($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->get($path);\n        }\n\n        /**\n         * Create a streamed response for a given file.\n         *\n         * @param string $path\n         * @param string|null $name\n         * @param array|null $headers\n         * @param string|null $disposition\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\StreamedResponse\n         * @static\n         */        public static function response($path, $name = null, $headers = [], $disposition = 'inline')\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->response($path, $name, $headers, $disposition);\n        }\n\n        /**\n         * Create a streamed download response for a given file.\n         *\n         * @param string $path\n         * @param string|null $name\n         * @param array|null $headers\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\StreamedResponse\n         * @static\n         */        public static function download($path, $name = null, $headers = [])\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->download($path, $name, $headers);\n        }\n\n        /**\n         * Write the contents of a file.\n         *\n         * @param string $path\n         * @param string|resource $contents\n         * @param mixed $options\n         * @return bool\n         * @static\n         */        public static function put($path, $contents, $options = [])\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->put($path, $contents, $options);\n        }\n\n        /**\n         * Store the uploaded file on the disk.\n         *\n         * @param string $path\n         * @param \\\\Illuminate\\\\Http\\\\File|\\\\Illuminate\\\\Http\\\\UploadedFile|string $file\n         * @param array $options\n         * @return string|false\n         * @static\n         */        public static function putFile($path, $file, $options = [])\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->putFile($path, $file, $options);\n        }\n\n        /**\n         * Store the uploaded file on the disk with a given name.\n         *\n         * @param string $path\n         * @param \\\\Illuminate\\\\Http\\\\File|\\\\Illuminate\\\\Http\\\\UploadedFile|string $file\n         * @param string $name\n         * @param array $options\n         * @return string|false\n         * @static\n         */        public static function putFileAs($path, $file, $name, $options = [])\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->putFileAs($path, $file, $name, $options);\n        }\n\n        /**\n         * Get the visibility for the given path.\n         *\n         * @param string $path\n         * @return string\n         * @static\n         */        public static function getVisibility($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->getVisibility($path);\n        }\n\n        /**\n         * Set the visibility for the given path.\n         *\n         * @param string $path\n         * @param string $visibility\n         * @return bool\n         * @static\n         */        public static function setVisibility($path, $visibility)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->setVisibility($path, $visibility);\n        }\n\n        /**\n         * Prepend to a file.\n         *\n         * @param string $path\n         * @param string $data\n         * @param string $separator\n         * @return bool\n         * @static\n         */        public static function prepend($path, $data, $separator = '\n')\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->prepend($path, $data, $separator);\n        }\n\n        /**\n         * Append to a file.\n         *\n         * @param string $path\n         * @param string $data\n         * @param string $separator\n         * @return bool\n         * @static\n         */        public static function append($path, $data, $separator = '\n')\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->append($path, $data, $separator);\n        }\n\n        /**\n         * Delete the file at a given path.\n         *\n         * @param string|array $paths\n         * @return bool\n         * @static\n         */        public static function delete($paths)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->delete($paths);\n        }\n\n        /**\n         * Copy a file to a new location.\n         *\n         * @param string $from\n         * @param string $to\n         * @return bool\n         * @static\n         */        public static function copy($from, $to)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->copy($from, $to);\n        }\n\n        /**\n         * Move a file to a new location.\n         *\n         * @param string $from\n         * @param string $to\n         * @return bool\n         * @static\n         */        public static function move($from, $to)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->move($from, $to);\n        }\n\n        /**\n         * Get the file size of a given file.\n         *\n         * @param string $path\n         * @return int\n         * @static\n         */        public static function size($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->size($path);\n        }\n\n        /**\n         * Get the mime-type of a given file.\n         *\n         * @param string $path\n         * @return string|false\n         * @static\n         */        public static function mimeType($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->mimeType($path);\n        }\n\n        /**\n         * Get the file's last modification time.\n         *\n         * @param string $path\n         * @return int\n         * @static\n         */        public static function lastModified($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->lastModified($path);\n        }\n\n        /**\n         * Get the URL for the file at the given path.\n         *\n         * @param string $path\n         * @return string\n         * @throws \\\\RuntimeException\n         * @static\n         */        public static function url($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->url($path);\n        }\n\n        /**\n         * Get a resource to read the file.\n         *\n         * @param string $path\n         * @return resource|null The path resource or null on failure.\n         * @throws \\\\Illuminate\\\\Contracts\\\\Filesystem\\\\FileNotFoundException\n         * @static\n         */        public static function readStream($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->readStream($path);\n        }\n\n        /**\n         * Write a new file using a stream.\n         *\n         * @param string $path\n         * @param resource $resource\n         * @param array $options\n         * @return bool\n         * @throws \\\\InvalidArgumentException If $resource is not a file handle.\n         * @throws \\\\Illuminate\\\\Contracts\\\\Filesystem\\\\FileExistsException\n         * @static\n         */        public static function writeStream($path, $resource, $options = [])\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->writeStream($path, $resource, $options);\n        }\n\n        /**\n         * Get a temporary URL for the file at the given path.\n         *\n         * @param string $path\n         * @param \\\\DateTimeInterface $expiration\n         * @param array $options\n         * @return string\n         * @throws \\\\RuntimeException\n         * @static\n         */        public static function temporaryUrl($path, $expiration, $options = [])\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->temporaryUrl($path, $expiration, $options);\n        }\n\n        /**\n         * Get a temporary URL for the file at the given path.\n         *\n         * @param \\\\League\\\\Flysystem\\\\AwsS3v3\\\\AwsS3Adapter $adapter\n         * @param string $path\n         * @param \\\\DateTimeInterface $expiration\n         * @param array $options\n         * @return string\n         * @static\n         */        public static function getAwsTemporaryUrl($adapter, $path, $expiration, $options)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->getAwsTemporaryUrl($adapter, $path, $expiration, $options);\n        }\n\n        /**\n         * Get an array of all files in a directory.\n         *\n         * @param string|null $directory\n         * @param bool $recursive\n         * @return array\n         * @static\n         */        public static function files($directory = null, $recursive = false)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->files($directory, $recursive);\n        }\n\n        /**\n         * Get all of the files from the given directory (recursive).\n         *\n         * @param string|null $directory\n         * @return array\n         * @static\n         */        public static function allFiles($directory = null)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->allFiles($directory);\n        }\n\n        /**\n         * Get all of the directories within a given directory.\n         *\n         * @param string|null $directory\n         * @param bool $recursive\n         * @return array\n         * @static\n         */        public static function directories($directory = null, $recursive = false)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->directories($directory, $recursive);\n        }\n\n        /**\n         * Get all (recursive) of the directories within a given directory.\n         *\n         * @param string|null $directory\n         * @return array\n         * @static\n         */        public static function allDirectories($directory = null)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->allDirectories($directory);\n        }\n\n        /**\n         * Create a directory.\n         *\n         * @param string $path\n         * @return bool\n         * @static\n         */        public static function makeDirectory($path)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->makeDirectory($path);\n        }\n\n        /**\n         * Recursively delete a directory.\n         *\n         * @param string $directory\n         * @return bool\n         * @static\n         */        public static function deleteDirectory($directory)\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->deleteDirectory($directory);\n        }\n\n        /**\n         * Flush the Flysystem cache.\n         *\n         * @return void\n         * @static\n         */        public static function flushCache()\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        $instance->flushCache();\n        }\n\n        /**\n         * Get the Flysystem driver.\n         *\n         * @return \\\\League\\\\Flysystem\\\\FilesystemInterface\n         * @static\n         */        public static function getDriver()\n        {\n                        /** @var \\\\Illuminate\\\\Filesystem\\\\FilesystemAdapter $instance */\n                        return $instance->getDriver();\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Routing\\\\UrlGenerator\n     */    class URL {\n\n        /**\n         * Get the full URL for the current request.\n         *\n         * @return string\n         * @static\n         */        public static function full()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->full();\n        }\n\n        /**\n         * Get the current URL for the request.\n         *\n         * @return string\n         * @static\n         */        public static function current()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->current();\n        }\n\n        /**\n         * Get the URL for the previous request.\n         *\n         * @param mixed $fallback\n         * @return string\n         * @static\n         */        public static function previous($fallback = false)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->previous($fallback);\n        }\n\n        /**\n         * Generate an absolute URL to the given path.\n         *\n         * @param string $path\n         * @param mixed $extra\n         * @param bool|null $secure\n         * @return string\n         * @static\n         */        public static function to($path, $extra = [], $secure = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->to($path, $extra, $secure);\n        }\n\n        /**\n         * Generate a secure, absolute URL to the given path.\n         *\n         * @param string $path\n         * @param array $parameters\n         * @return string\n         * @static\n         */        public static function secure($path, $parameters = [])\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->secure($path, $parameters);\n        }\n\n        /**\n         * Generate the URL to an application asset.\n         *\n         * @param string $path\n         * @param bool|null $secure\n         * @return string\n         * @static\n         */        public static function asset($path, $secure = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->asset($path, $secure);\n        }\n\n        /**\n         * Generate the URL to a secure asset.\n         *\n         * @param string $path\n         * @return string\n         * @static\n         */        public static function secureAsset($path)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->secureAsset($path);\n        }\n\n        /**\n         * Generate the URL to an asset from a custom root domain such as CDN, etc.\n         *\n         * @param string $root\n         * @param string $path\n         * @param bool|null $secure\n         * @return string\n         * @static\n         */        public static function assetFrom($root, $path, $secure = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->assetFrom($root, $path, $secure);\n        }\n\n        /**\n         * Get the default scheme for a raw URL.\n         *\n         * @param bool|null $secure\n         * @return string\n         * @static\n         */        public static function formatScheme($secure = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->formatScheme($secure);\n        }\n\n        /**\n         * Create a signed route URL for a named route.\n         *\n         * @param string $name\n         * @param array $parameters\n         * @param \\\\DateTimeInterface|\\\\DateInterval|int|null $expiration\n         * @param bool $absolute\n         * @return string\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function signedRoute($name, $parameters = [], $expiration = null, $absolute = true)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->signedRoute($name, $parameters, $expiration, $absolute);\n        }\n\n        /**\n         * Create a temporary signed route URL for a named route.\n         *\n         * @param string $name\n         * @param \\\\DateTimeInterface|\\\\DateInterval|int $expiration\n         * @param array $parameters\n         * @param bool $absolute\n         * @return string\n         * @static\n         */        public static function temporarySignedRoute($name, $expiration, $parameters = [], $absolute = true)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->temporarySignedRoute($name, $expiration, $parameters, $absolute);\n        }\n\n        /**\n         * Determine if the given request has a valid signature.\n         *\n         * @param \\\\Illuminate\\\\Http\\\\Request $request\n         * @param bool $absolute\n         * @return bool\n         * @static\n         */        public static function hasValidSignature($request, $absolute = true)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->hasValidSignature($request, $absolute);\n        }\n\n        /**\n         * Determine if the signature from the given request matches the URL.\n         *\n         * @param \\\\Illuminate\\\\Http\\\\Request $request\n         * @param bool $absolute\n         * @return bool\n         * @static\n         */        public static function hasCorrectSignature($request, $absolute = true)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->hasCorrectSignature($request, $absolute);\n        }\n\n        /**\n         * Determine if the expires timestamp from the given request is not from the past.\n         *\n         * @param \\\\Illuminate\\\\Http\\\\Request $request\n         * @return bool\n         * @static\n         */        public static function signatureHasNotExpired($request)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->signatureHasNotExpired($request);\n        }\n\n        /**\n         * Get the URL to a named route.\n         *\n         * @param string $name\n         * @param mixed $parameters\n         * @param bool $absolute\n         * @return string\n         * @throws \\\\Symfony\\\\Component\\\\Routing\\\\Exception\\\\RouteNotFoundException\n         * @static\n         */        public static function route($name, $parameters = [], $absolute = true)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->route($name, $parameters, $absolute);\n        }\n\n        /**\n         * Get the URL for a given route instance.\n         *\n         * @param \\\\Illuminate\\\\Routing\\\\Route $route\n         * @param mixed $parameters\n         * @param bool $absolute\n         * @return string\n         * @throws \\\\Illuminate\\\\Routing\\\\Exceptions\\\\UrlGenerationException\n         * @static\n         */        public static function toRoute($route, $parameters, $absolute)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->toRoute($route, $parameters, $absolute);\n        }\n\n        /**\n         * Get the URL to a controller action.\n         *\n         * @param string|array $action\n         * @param mixed $parameters\n         * @param bool $absolute\n         * @return string\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function action($action, $parameters = [], $absolute = true)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->action($action, $parameters, $absolute);\n        }\n\n        /**\n         * Format the array of URL parameters.\n         *\n         * @param mixed|array $parameters\n         * @return array\n         * @static\n         */        public static function formatParameters($parameters)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->formatParameters($parameters);\n        }\n\n        /**\n         * Get the base URL for the request.\n         *\n         * @param string $scheme\n         * @param string|null $root\n         * @return string\n         * @static\n         */        public static function formatRoot($scheme, $root = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->formatRoot($scheme, $root);\n        }\n\n        /**\n         * Format the given URL segments into a single URL.\n         *\n         * @param string $root\n         * @param string $path\n         * @param \\\\Illuminate\\\\Routing\\\\Route|null $route\n         * @return string\n         * @static\n         */        public static function format($root, $path, $route = null)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->format($root, $path, $route);\n        }\n\n        /**\n         * Determine if the given path is a valid URL.\n         *\n         * @param string $path\n         * @return bool\n         * @static\n         */        public static function isValidUrl($path)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->isValidUrl($path);\n        }\n\n        /**\n         * Set the default named parameters used by the URL generator.\n         *\n         * @param array $defaults\n         * @return void\n         * @static\n         */        public static function defaults($defaults)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        $instance->defaults($defaults);\n        }\n\n        /**\n         * Get the default named parameters used by the URL generator.\n         *\n         * @return array\n         * @static\n         */        public static function getDefaultParameters()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->getDefaultParameters();\n        }\n\n        /**\n         * Force the scheme for URLs.\n         *\n         * @param string $scheme\n         * @return void\n         * @static\n         */        public static function forceScheme($scheme)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        $instance->forceScheme($scheme);\n        }\n\n        /**\n         * Set the forced root URL.\n         *\n         * @param string $root\n         * @return void\n         * @static\n         */        public static function forceRootUrl($root)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        $instance->forceRootUrl($root);\n        }\n\n        /**\n         * Set a callback to be used to format the host of generated URLs.\n         *\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Routing\\\\UrlGenerator\n         * @static\n         */        public static function formatHostUsing($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->formatHostUsing($callback);\n        }\n\n        /**\n         * Set a callback to be used to format the path of generated URLs.\n         *\n         * @param \\\\Closure $callback\n         * @return \\\\Illuminate\\\\Routing\\\\UrlGenerator\n         * @static\n         */        public static function formatPathUsing($callback)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->formatPathUsing($callback);\n        }\n\n        /**\n         * Get the path formatter being used by the URL generator.\n         *\n         * @return \\\\Closure\n         * @static\n         */        public static function pathFormatter()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->pathFormatter();\n        }\n\n        /**\n         * Get the request instance.\n         *\n         * @return \\\\Illuminate\\\\Http\\\\Request\n         * @static\n         */        public static function getRequest()\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->getRequest();\n        }\n\n        /**\n         * Set the current request instance.\n         *\n         * @param \\\\Illuminate\\\\Http\\\\Request $request\n         * @return void\n         * @static\n         */        public static function setRequest($request)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        $instance->setRequest($request);\n        }\n\n        /**\n         * Set the route collection.\n         *\n         * @param \\\\Illuminate\\\\Routing\\\\RouteCollectionInterface $routes\n         * @return \\\\Illuminate\\\\Routing\\\\UrlGenerator\n         * @static\n         */        public static function setRoutes($routes)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->setRoutes($routes);\n        }\n\n        /**\n         * Set the session resolver for the generator.\n         *\n         * @param callable $sessionResolver\n         * @return \\\\Illuminate\\\\Routing\\\\UrlGenerator\n         * @static\n         */        public static function setSessionResolver($sessionResolver)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->setSessionResolver($sessionResolver);\n        }\n\n        /**\n         * Set the encryption key resolver.\n         *\n         * @param callable $keyResolver\n         * @return \\\\Illuminate\\\\Routing\\\\UrlGenerator\n         * @static\n         */        public static function setKeyResolver($keyResolver)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->setKeyResolver($keyResolver);\n        }\n\n        /**\n         * Set the root controller namespace.\n         *\n         * @param string $rootNamespace\n         * @return \\\\Illuminate\\\\Routing\\\\UrlGenerator\n         * @static\n         */        public static function setRootControllerNamespace($rootNamespace)\n        {\n                        /** @var \\\\Illuminate\\\\Routing\\\\UrlGenerator $instance */\n                        return $instance->setRootControllerNamespace($rootNamespace);\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\Routing\\\\UrlGenerator::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\Routing\\\\UrlGenerator::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\Routing\\\\UrlGenerator::hasMacro($name);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\Validation\\\\Factory\n     */    class Validator {\n\n        /**\n         * Create a new Validator instance.\n         *\n         * @param array $data\n         * @param array $rules\n         * @param array $messages\n         * @param array $customAttributes\n         * @return \\\\Illuminate\\\\Validation\\\\Validator\n         * @static\n         */        public static function make($data, $rules, $messages = [], $customAttributes = [])\n        {\n                        /** @var \\\\Illuminate\\\\Validation\\\\Factory $instance */\n                        return $instance->make($data, $rules, $messages, $customAttributes);\n        }\n\n        /**\n         * Validate the given data against the provided rules.\n         *\n         * @param array $data\n         * @param array $rules\n         * @param array $messages\n         * @param array $customAttributes\n         * @return array\n         * @throws \\\\Illuminate\\\\Validation\\\\ValidationException\n         * @static\n         */        public static function validate($data, $rules, $messages = [], $customAttributes = [])\n        {\n                        /** @var \\\\Illuminate\\\\Validation\\\\Factory $instance */\n                        return $instance->validate($data, $rules, $messages, $customAttributes);\n        }\n\n        /**\n         * Register a custom validator extension.\n         *\n         * @param string $rule\n         * @param \\\\Closure|string $extension\n         * @param string|null $message\n         * @return void\n         * @static\n         */        public static function extend($rule, $extension, $message = null)\n        {\n                        /** @var \\\\Illuminate\\\\Validation\\\\Factory $instance */\n                        $instance->extend($rule, $extension, $message);\n        }\n\n        /**\n         * Register a custom implicit validator extension.\n         *\n         * @param string $rule\n         * @param \\\\Closure|string $extension\n         * @param string|null $message\n         * @return void\n         * @static\n         */        public static function extendImplicit($rule, $extension, $message = null)\n        {\n                        /** @var \\\\Illuminate\\\\Validation\\\\Factory $instance */\n                        $instance->extendImplicit($rule, $extension, $message);\n        }\n\n        /**\n         * Register a custom dependent validator extension.\n         *\n         * @param string $rule\n         * @param \\\\Closure|string $extension\n         * @param string|null $message\n         * @return void\n         * @static\n         */        public static function extendDependent($rule, $extension, $message = null)\n        {\n                        /** @var \\\\Illuminate\\\\Validation\\\\Factory $instance */\n                        $instance->extendDependent($rule, $extension, $message);\n        }\n\n        /**\n         * Register a custom validator message replacer.\n         *\n         * @param string $rule\n         * @param \\\\Closure|string $replacer\n         * @return void\n         * @static\n         */        public static function replacer($rule, $replacer)\n        {\n                        /** @var \\\\Illuminate\\\\Validation\\\\Factory $instance */\n                        $instance->replacer($rule, $replacer);\n        }\n\n        /**\n         * Set the Validator instance resolver.\n         *\n         * @param \\\\Closure $resolver\n         * @return void\n         * @static\n         */        public static function resolver($resolver)\n        {\n                        /** @var \\\\Illuminate\\\\Validation\\\\Factory $instance */\n                        $instance->resolver($resolver);\n        }\n\n        /**\n         * Get the Translator implementation.\n         *\n         * @return \\\\Illuminate\\\\Contracts\\\\Translation\\\\Translator\n         * @static\n         */        public static function getTranslator()\n        {\n                        /** @var \\\\Illuminate\\\\Validation\\\\Factory $instance */\n                        return $instance->getTranslator();\n        }\n\n        /**\n         * Get the Presence Verifier implementation.\n         *\n         * @return \\\\Illuminate\\\\Validation\\\\PresenceVerifierInterface\n         * @static\n         */        public static function getPresenceVerifier()\n        {\n                        /** @var \\\\Illuminate\\\\Validation\\\\Factory $instance */\n                        return $instance->getPresenceVerifier();\n        }\n\n        /**\n         * Set the Presence Verifier implementation.\n         *\n         * @param \\\\Illuminate\\\\Validation\\\\PresenceVerifierInterface $presenceVerifier\n         * @return void\n         * @static\n         */        public static function setPresenceVerifier($presenceVerifier)\n        {\n                        /** @var \\\\Illuminate\\\\Validation\\\\Factory $instance */\n                        $instance->setPresenceVerifier($presenceVerifier);\n        }\n            }\n\n    /**\n     *\n     *\n     * @see \\\\Illuminate\\\\View\\\\Factory\n     */    class View {\n\n        /**\n         * Get the evaluated view contents for the given view.\n         *\n         * @param string $path\n         * @param \\\\Illuminate\\\\Contracts\\\\Support\\\\Arrayable|array $data\n         * @param array $mergeData\n         * @return \\\\Illuminate\\\\Contracts\\\\View\\\\View\n         * @static\n         */        public static function file($path, $data = [], $mergeData = [])\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->file($path, $data, $mergeData);\n        }\n\n        /**\n         * Get the evaluated view contents for the given view.\n         *\n         * @param string $view\n         * @param \\\\Illuminate\\\\Contracts\\\\Support\\\\Arrayable|array $data\n         * @param array $mergeData\n         * @return \\\\Illuminate\\\\Contracts\\\\View\\\\View\n         * @static\n         */        public static function make($view, $data = [], $mergeData = [])\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->make($view, $data, $mergeData);\n        }\n\n        /**\n         * Get the first view that actually exists from the given list.\n         *\n         * @param array $views\n         * @param \\\\Illuminate\\\\Contracts\\\\Support\\\\Arrayable|array $data\n         * @param array $mergeData\n         * @return \\\\Illuminate\\\\Contracts\\\\View\\\\View\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function first($views, $data = [], $mergeData = [])\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->first($views, $data, $mergeData);\n        }\n\n        /**\n         * Get the rendered content of the view based on a given condition.\n         *\n         * @param bool $condition\n         * @param string $view\n         * @param \\\\Illuminate\\\\Contracts\\\\Support\\\\Arrayable|array $data\n         * @param array $mergeData\n         * @return string\n         * @static\n         */        public static function renderWhen($condition, $view, $data = [], $mergeData = [])\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->renderWhen($condition, $view, $data, $mergeData);\n        }\n\n        /**\n         * Get the rendered contents of a partial from a loop.\n         *\n         * @param string $view\n         * @param array $data\n         * @param string $iterator\n         * @param string $empty\n         * @return string\n         * @static\n         */        public static function renderEach($view, $data, $iterator, $empty = 'raw|')\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->renderEach($view, $data, $iterator, $empty);\n        }\n\n        /**\n         * Determine if a given view exists.\n         *\n         * @param string $view\n         * @return bool\n         * @static\n         */        public static function exists($view)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->exists($view);\n        }\n\n        /**\n         * Get the appropriate view engine for the given path.\n         *\n         * @param string $path\n         * @return \\\\Illuminate\\\\Contracts\\\\View\\\\Engine\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function getEngineFromPath($path)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->getEngineFromPath($path);\n        }\n\n        /**\n         * Add a piece of shared data to the environment.\n         *\n         * @param array|string $key\n         * @param mixed|null $value\n         * @return mixed\n         * @static\n         */        public static function share($key, $value = null)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->share($key, $value);\n        }\n\n        /**\n         * Increment the rendering counter.\n         *\n         * @return void\n         * @static\n         */        public static function incrementRender()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->incrementRender();\n        }\n\n        /**\n         * Decrement the rendering counter.\n         *\n         * @return void\n         * @static\n         */        public static function decrementRender()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->decrementRender();\n        }\n\n        /**\n         * Check if there are no active render operations.\n         *\n         * @return bool\n         * @static\n         */        public static function doneRendering()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->doneRendering();\n        }\n\n        /**\n         * Add a location to the array of view locations.\n         *\n         * @param string $location\n         * @return void\n         * @static\n         */        public static function addLocation($location)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->addLocation($location);\n        }\n\n        /**\n         * Add a new namespace to the loader.\n         *\n         * @param string $namespace\n         * @param string|array $hints\n         * @return \\\\Illuminate\\\\View\\\\Factory\n         * @static\n         */        public static function addNamespace($namespace, $hints)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->addNamespace($namespace, $hints);\n        }\n\n        /**\n         * Prepend a new namespace to the loader.\n         *\n         * @param string $namespace\n         * @param string|array $hints\n         * @return \\\\Illuminate\\\\View\\\\Factory\n         * @static\n         */        public static function prependNamespace($namespace, $hints)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->prependNamespace($namespace, $hints);\n        }\n\n        /**\n         * Replace the namespace hints for the given namespace.\n         *\n         * @param string $namespace\n         * @param string|array $hints\n         * @return \\\\Illuminate\\\\View\\\\Factory\n         * @static\n         */        public static function replaceNamespace($namespace, $hints)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->replaceNamespace($namespace, $hints);\n        }\n\n        /**\n         * Register a valid view extension and its engine.\n         *\n         * @param string $extension\n         * @param string $engine\n         * @param \\\\Closure|null $resolver\n         * @return void\n         * @static\n         */        public static function addExtension($extension, $engine, $resolver = null)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->addExtension($extension, $engine, $resolver);\n        }\n\n        /**\n         * Flush all of the factory state like sections and stacks.\n         *\n         * @return void\n         * @static\n         */        public static function flushState()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->flushState();\n        }\n\n        /**\n         * Flush all of the section contents if done rendering.\n         *\n         * @return void\n         * @static\n         */        public static function flushStateIfDoneRendering()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->flushStateIfDoneRendering();\n        }\n\n        /**\n         * Get the extension to engine bindings.\n         *\n         * @return array\n         * @static\n         */        public static function getExtensions()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->getExtensions();\n        }\n\n        /**\n         * Get the engine resolver instance.\n         *\n         * @return \\\\Illuminate\\\\View\\\\Engines\\\\EngineResolver\n         * @static\n         */        public static function getEngineResolver()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->getEngineResolver();\n        }\n\n        /**\n         * Get the view finder instance.\n         *\n         * @return \\\\Illuminate\\\\View\\\\ViewFinderInterface\n         * @static\n         */        public static function getFinder()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->getFinder();\n        }\n\n        /**\n         * Set the view finder instance.\n         *\n         * @param \\\\Illuminate\\\\View\\\\ViewFinderInterface $finder\n         * @return void\n         * @static\n         */        public static function setFinder($finder)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->setFinder($finder);\n        }\n\n        /**\n         * Flush the cache of views located by the finder.\n         *\n         * @return void\n         * @static\n         */        public static function flushFinderCache()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->flushFinderCache();\n        }\n\n        /**\n         * Get the event dispatcher instance.\n         *\n         * @return \\\\Illuminate\\\\Contracts\\\\Events\\\\Dispatcher\n         * @static\n         */        public static function getDispatcher()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->getDispatcher();\n        }\n\n        /**\n         * Set the event dispatcher instance.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\Events\\\\Dispatcher $events\n         * @return void\n         * @static\n         */        public static function setDispatcher($events)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->setDispatcher($events);\n        }\n\n        /**\n         * Get the IoC container instance.\n         *\n         * @return \\\\Illuminate\\\\Contracts\\\\Container\\\\Container\n         * @static\n         */        public static function getContainer()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->getContainer();\n        }\n\n        /**\n         * Set the IoC container instance.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\Container\\\\Container $container\n         * @return void\n         * @static\n         */        public static function setContainer($container)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->setContainer($container);\n        }\n\n        /**\n         * Get an item from the shared data.\n         *\n         * @param string $key\n         * @param mixed $default\n         * @return mixed\n         * @static\n         */        public static function shared($key, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->shared($key, $default);\n        }\n\n        /**\n         * Get all of the shared data for the environment.\n         *\n         * @return array\n         * @static\n         */        public static function getShared()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->getShared();\n        }\n\n        /**\n         * Register a custom macro.\n         *\n         * @param string $name\n         * @param object|callable $macro\n         * @return void\n         * @static\n         */        public static function macro($name, $macro)\n        {\n                        \\\\Illuminate\\\\View\\\\Factory::macro($name, $macro);\n        }\n\n        /**\n         * Mix another object into the class.\n         *\n         * @param object $mixin\n         * @param bool $replace\n         * @return void\n         * @throws \\\\ReflectionException\n         * @static\n         */        public static function mixin($mixin, $replace = true)\n        {\n                        \\\\Illuminate\\\\View\\\\Factory::mixin($mixin, $replace);\n        }\n\n        /**\n         * Checks if macro is registered.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasMacro($name)\n        {\n                        return \\\\Illuminate\\\\View\\\\Factory::hasMacro($name);\n        }\n\n        /**\n         * Start a component rendering process.\n         *\n         * @param \\\\Illuminate\\\\View\\\\View|string $view\n         * @param array $data\n         * @return void\n         * @static\n         */        public static function startComponent($view, $data = [])\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->startComponent($view, $data);\n        }\n\n        /**\n         * Get the first view that actually exists from the given list, and start a component.\n         *\n         * @param array $names\n         * @param array $data\n         * @return void\n         * @static\n         */        public static function startComponentFirst($names, $data = [])\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->startComponentFirst($names, $data);\n        }\n\n        /**\n         * Render the current component.\n         *\n         * @return string\n         * @static\n         */        public static function renderComponent()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->renderComponent();\n        }\n\n        /**\n         * Start the slot rendering process.\n         *\n         * @param string $name\n         * @param string|null $content\n         * @return void\n         * @static\n         */        public static function slot($name, $content = null)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->slot($name, $content);\n        }\n\n        /**\n         * Save the slot content for rendering.\n         *\n         * @return void\n         * @static\n         */        public static function endSlot()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->endSlot();\n        }\n\n        /**\n         * Register a view creator event.\n         *\n         * @param array|string $views\n         * @param \\\\Closure|string $callback\n         * @return array\n         * @static\n         */        public static function creator($views, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->creator($views, $callback);\n        }\n\n        /**\n         * Register multiple view composers via an array.\n         *\n         * @param array $composers\n         * @return array\n         * @static\n         */        public static function composers($composers)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->composers($composers);\n        }\n\n        /**\n         * Register a view composer event.\n         *\n         * @param array|string $views\n         * @param \\\\Closure|string $callback\n         * @return array\n         * @static\n         */        public static function composer($views, $callback)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->composer($views, $callback);\n        }\n\n        /**\n         * Call the composer for a given view.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\View\\\\View $view\n         * @return void\n         * @static\n         */        public static function callComposer($view)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->callComposer($view);\n        }\n\n        /**\n         * Call the creator for a given view.\n         *\n         * @param \\\\Illuminate\\\\Contracts\\\\View\\\\View $view\n         * @return void\n         * @static\n         */        public static function callCreator($view)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->callCreator($view);\n        }\n\n        /**\n         * Start injecting content into a section.\n         *\n         * @param string $section\n         * @param string|null $content\n         * @return void\n         * @static\n         */        public static function startSection($section, $content = null)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->startSection($section, $content);\n        }\n\n        /**\n         * Inject inline content into a section.\n         *\n         * @param string $section\n         * @param string $content\n         * @return void\n         * @static\n         */        public static function inject($section, $content)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->inject($section, $content);\n        }\n\n        /**\n         * Stop injecting content into a section and return its contents.\n         *\n         * @return string\n         * @static\n         */        public static function yieldSection()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->yieldSection();\n        }\n\n        /**\n         * Stop injecting content into a section.\n         *\n         * @param bool $overwrite\n         * @return string\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function stopSection($overwrite = false)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->stopSection($overwrite);\n        }\n\n        /**\n         * Stop injecting content into a section and append it.\n         *\n         * @return string\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function appendSection()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->appendSection();\n        }\n\n        /**\n         * Get the string contents of a section.\n         *\n         * @param string $section\n         * @param string $default\n         * @return string\n         * @static\n         */        public static function yieldContent($section, $default = '')\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->yieldContent($section, $default);\n        }\n\n        /**\n         * Get the parent placeholder for the current request.\n         *\n         * @param string $section\n         * @return string\n         * @static\n         */        public static function parentPlaceholder($section = '')\n        {\n                        return \\\\Illuminate\\\\View\\\\Factory::parentPlaceholder($section);\n        }\n\n        /**\n         * Check if section exists.\n         *\n         * @param string $name\n         * @return bool\n         * @static\n         */        public static function hasSection($name)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->hasSection($name);\n        }\n\n        /**\n         * Get the contents of a section.\n         *\n         * @param string $name\n         * @param string|null $default\n         * @return mixed\n         * @static\n         */        public static function getSection($name, $default = null)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->getSection($name, $default);\n        }\n\n        /**\n         * Get the entire array of sections.\n         *\n         * @return array\n         * @static\n         */        public static function getSections()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->getSections();\n        }\n\n        /**\n         * Flush all of the sections.\n         *\n         * @return void\n         * @static\n         */        public static function flushSections()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->flushSections();\n        }\n\n        /**\n         * Add new loop to the stack.\n         *\n         * @param \\\\Countable|array $data\n         * @return void\n         * @static\n         */        public static function addLoop($data)\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->addLoop($data);\n        }\n\n        /**\n         * Increment the top loop's indices.\n         *\n         * @return void\n         * @static\n         */        public static function incrementLoopIndices()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->incrementLoopIndices();\n        }\n\n        /**\n         * Pop a loop from the top of the loop stack.\n         *\n         * @return void\n         * @static\n         */        public static function popLoop()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->popLoop();\n        }\n\n        /**\n         * Get an instance of the last loop in the stack.\n         *\n         * @return \\\\stdClass|null\n         * @static\n         */        public static function getLastLoop()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->getLastLoop();\n        }\n\n        /**\n         * Get the entire loop stack.\n         *\n         * @return array\n         * @static\n         */        public static function getLoopStack()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->getLoopStack();\n        }\n\n        /**\n         * Start injecting content into a push section.\n         *\n         * @param string $section\n         * @param string $content\n         * @return void\n         * @static\n         */        public static function startPush($section, $content = '')\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->startPush($section, $content);\n        }\n\n        /**\n         * Stop injecting content into a push section.\n         *\n         * @return string\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function stopPush()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->stopPush();\n        }\n\n        /**\n         * Start prepending content into a push section.\n         *\n         * @param string $section\n         * @param string $content\n         * @return void\n         * @static\n         */        public static function startPrepend($section, $content = '')\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->startPrepend($section, $content);\n        }\n\n        /**\n         * Stop prepending content into a push section.\n         *\n         * @return string\n         * @throws \\\\InvalidArgumentException\n         * @static\n         */        public static function stopPrepend()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->stopPrepend();\n        }\n\n        /**\n         * Get the string contents of a push section.\n         *\n         * @param string $section\n         * @param string $default\n         * @return string\n         * @static\n         */        public static function yieldPushContent($section, $default = '')\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->yieldPushContent($section, $default);\n        }\n\n        /**\n         * Flush all of the stacks.\n         *\n         * @return void\n         * @static\n         */        public static function flushStacks()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->flushStacks();\n        }\n\n        /**\n         * Start a translation block.\n         *\n         * @param array $replacements\n         * @return void\n         * @static\n         */        public static function startTranslation($replacements = [])\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        $instance->startTranslation($replacements);\n        }\n\n        /**\n         * Render the current translation.\n         *\n         * @return string\n         * @static\n         */        public static function renderTranslation()\n        {\n                        /** @var \\\\Illuminate\\\\View\\\\Factory $instance */\n                        return $instance->renderTranslation();\n        }\n            }\n}\n\nnamespace Illuminate\\\\Support {\n\n    /**\n     *\n     *\n     */    class Arr {\n            }\n\n    /**\n     *\n     *\n     */    class Str {\n            }\n}\n\nnamespace Barryvdh\\\\Debugbar {\n\n    /**\n     *\n     *\n     * @method static void alert(string $message)\n     * @method static void critical(string $message)\n     * @method static void debug(string $message)\n     * @method static void emergency(string $message)\n     * @method static void error(string $message)\n     * @method static void info(string $message)\n     * @method static void log(string $message)\n     * @method static void notice(string $message)\n     * @method static void warning(string $message)\n     * @see \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar\n     */    class Facade {\n\n        /**\n         * Enable the Debugbar and boot, if not already booted.\n         *\n         * @static\n         */        public static function enable()\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->enable();\n        }\n\n        /**\n         * Boot the debugbar (add collectors, renderer and listener)\n         *\n         * @static\n         */        public static function boot()\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->boot();\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function shouldCollect($name, $default = false)\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->shouldCollect($name, $default);\n        }\n\n        /**\n         * Adds a data collector\n         *\n         * @param \\\\Barryvdh\\\\Debugbar\\\\DataCollectorInterface $collector\n         * @throws DebugBarException\n         * @return \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar\n         * @static\n         */        public static function addCollector($collector)\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->addCollector($collector);\n        }\n\n        /**\n         * Handle silenced errors\n         *\n         * @param $level\n         * @param $message\n         * @param string $file\n         * @param int $line\n         * @param array $context\n         * @throws \\\\ErrorException\n         * @static\n         */        public static function handleError($level, $message, $file = '', $line = 0, $context = [])\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->handleError($level, $message, $file, $line, $context);\n        }\n\n        /**\n         * Starts a measure\n         *\n         * @param string $name Internal name, used to stop the measure\n         * @param string $label Public name\n         * @static\n         */        public static function startMeasure($name, $label = null)\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->startMeasure($name, $label);\n        }\n\n        /**\n         * Stops a measure\n         *\n         * @param string $name\n         * @static\n         */        public static function stopMeasure($name)\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->stopMeasure($name);\n        }\n\n        /**\n         * Adds an exception to be profiled in the debug bar\n         *\n         * @param \\\\Exception $e\n         * @deprecated in favor of addThrowable\n         * @static\n         */        public static function addException($e)\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->addException($e);\n        }\n\n        /**\n         * Adds an exception to be profiled in the debug bar\n         *\n         * @param \\\\Exception $e\n         * @static\n         */        public static function addThrowable($e)\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->addThrowable($e);\n        }\n\n        /**\n         * Returns a JavascriptRenderer for this instance\n         *\n         * @param string $baseUrl\n         * @param string $basePathng\n         * @return \\\\Barryvdh\\\\Debugbar\\\\JavascriptRenderer\n         * @static\n         */        public static function getJavascriptRenderer($baseUrl = null, $basePath = null)\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->getJavascriptRenderer($baseUrl, $basePath);\n        }\n\n        /**\n         * Modify the response and inject the debugbar (or data in headers)\n         *\n         * @param \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Request $request\n         * @param \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Response $response\n         * @return \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Response\n         * @static\n         */        public static function modifyResponse($request, $response)\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->modifyResponse($request, $response);\n        }\n\n        /**\n         * Check if the Debugbar is enabled\n         *\n         * @return boolean\n         * @static\n         */        public static function isEnabled()\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->isEnabled();\n        }\n\n        /**\n         * Collects the data from the collectors\n         *\n         * @return array\n         * @static\n         */        public static function collect()\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->collect();\n        }\n\n        /**\n         * Injects the web debug toolbar into the given Response.\n         *\n         * @param \\\\Symfony\\\\Component\\\\HttpFoundation\\\\Response $response A Response instance\n         * Based on https://github.com/symfony/WebProfilerBundle/blob/master/EventListener/WebDebugToolbarListener.php\n         * @static\n         */        public static function injectDebugbar($response)\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->injectDebugbar($response);\n        }\n\n        /**\n         * Disable the Debugbar\n         *\n         * @static\n         */        public static function disable()\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->disable();\n        }\n\n        /**\n         * Adds a measure\n         *\n         * @param string $label\n         * @param float $start\n         * @param float $end\n         * @static\n         */        public static function addMeasure($label, $start, $end)\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->addMeasure($label, $start, $end);\n        }\n\n        /**\n         * Utility function to measure the execution of a Closure\n         *\n         * @param string $label\n         * @param \\\\Closure $closure\n         * @static\n         */        public static function measure($label, $closure)\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->measure($label, $closure);\n        }\n\n        /**\n         * Collect data in a CLI request\n         *\n         * @return array\n         * @static\n         */        public static function collectConsole()\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->collectConsole();\n        }\n\n        /**\n         * Adds a message to the MessagesCollector\n         *\n         * A message can be anything from an object to a string\n         *\n         * @param mixed $message\n         * @param string $label\n         * @static\n         */        public static function addMessage($message, $label = 'info')\n        {\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->addMessage($message, $label);\n        }\n\n        /**\n         * Checks if a data collector has been added\n         *\n         * @param string $name\n         * @return boolean\n         * @static\n         */        public static function hasCollector($name)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->hasCollector($name);\n        }\n\n        /**\n         * Returns a data collector\n         *\n         * @param string $name\n         * @return \\\\DebugBar\\\\DataCollectorInterface\n         * @throws DebugBarException\n         * @static\n         */        public static function getCollector($name)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->getCollector($name);\n        }\n\n        /**\n         * Returns an array of all data collectors\n         *\n         * @return \\\\DebugBar\\\\array[DataCollectorInterface]\n         * @static\n         */        public static function getCollectors()\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->getCollectors();\n        }\n\n        /**\n         * Sets the request id generator\n         *\n         * @param \\\\DebugBar\\\\RequestIdGeneratorInterface $generator\n         * @return \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar\n         * @static\n         */        public static function setRequestIdGenerator($generator)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->setRequestIdGenerator($generator);\n        }\n\n        /**\n         *\n         *\n         * @return \\\\DebugBar\\\\RequestIdGeneratorInterface\n         * @static\n         */        public static function getRequestIdGenerator()\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->getRequestIdGenerator();\n        }\n\n        /**\n         * Returns the id of the current request\n         *\n         * @return string\n         * @static\n         */        public static function getCurrentRequestId()\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->getCurrentRequestId();\n        }\n\n        /**\n         * Sets the storage backend to use to store the collected data\n         *\n         * @param \\\\DebugBar\\\\StorageInterface $storage\n         * @return \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar\n         * @static\n         */        public static function setStorage($storage = null)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->setStorage($storage);\n        }\n\n        /**\n         *\n         *\n         * @return \\\\DebugBar\\\\StorageInterface\n         * @static\n         */        public static function getStorage()\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->getStorage();\n        }\n\n        /**\n         * Checks if the data will be persisted\n         *\n         * @return boolean\n         * @static\n         */        public static function isDataPersisted()\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->isDataPersisted();\n        }\n\n        /**\n         * Sets the HTTP driver\n         *\n         * @param \\\\DebugBar\\\\HttpDriverInterface $driver\n         * @return \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar\n         * @static\n         */        public static function setHttpDriver($driver)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->setHttpDriver($driver);\n        }\n\n        /**\n         * Returns the HTTP driver\n         *\n         * If no http driver where defined, a PhpHttpDriver is automatically created\n         *\n         * @return \\\\DebugBar\\\\HttpDriverInterface\n         * @static\n         */        public static function getHttpDriver()\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->getHttpDriver();\n        }\n\n        /**\n         * Returns collected data\n         *\n         * Will collect the data if none have been collected yet\n         *\n         * @return array\n         * @static\n         */        public static function getData()\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->getData();\n        }\n\n        /**\n         * Returns an array of HTTP headers containing the data\n         *\n         * @param string $headerName\n         * @param integer $maxHeaderLength\n         * @return array\n         * @static\n         */        public static function getDataAsHeaders($headerName = 'phpdebugbar', $maxHeaderLength = 4096, $maxTotalHeaderLength = 250000)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->getDataAsHeaders($headerName, $maxHeaderLength, $maxTotalHeaderLength);\n        }\n\n        /**\n         * Sends the data through the HTTP headers\n         *\n         * @param bool $useOpenHandler\n         * @param string $headerName\n         * @param integer $maxHeaderLength\n         * @return \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar\n         * @static\n         */        public static function sendDataInHeaders($useOpenHandler = null, $headerName = 'phpdebugbar', $maxHeaderLength = 4096)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->sendDataInHeaders($useOpenHandler, $headerName, $maxHeaderLength);\n        }\n\n        /**\n         * Stacks the data in the session for later rendering\n         *\n         * @static\n         */        public static function stackData()\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->stackData();\n        }\n\n        /**\n         * Checks if there is stacked data in the session\n         *\n         * @return boolean\n         * @static\n         */        public static function hasStackedData()\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->hasStackedData();\n        }\n\n        /**\n         * Returns the data stacked in the session\n         *\n         * @param boolean $delete Whether to delete the data in the session\n         * @return array\n         * @static\n         */        public static function getStackedData($delete = true)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->getStackedData($delete);\n        }\n\n        /**\n         * Sets the key to use in the $_SESSION array\n         *\n         * @param string $ns\n         * @return \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar\n         * @static\n         */        public static function setStackDataSessionNamespace($ns)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->setStackDataSessionNamespace($ns);\n        }\n\n        /**\n         * Returns the key used in the $_SESSION array\n         *\n         * @return string\n         * @static\n         */        public static function getStackDataSessionNamespace()\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->getStackDataSessionNamespace();\n        }\n\n        /**\n         * Sets whether to only use the session to store stacked data even\n         * if a storage is enabled\n         *\n         * @param boolean $enabled\n         * @return \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar\n         * @static\n         */        public static function setStackAlwaysUseSessionStorage($enabled = true)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->setStackAlwaysUseSessionStorage($enabled);\n        }\n\n        /**\n         * Checks if the session is always used to store stacked data\n         * even if a storage is enabled\n         *\n         * @return boolean\n         * @static\n         */        public static function isStackAlwaysUseSessionStorage()\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->isStackAlwaysUseSessionStorage();\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function offsetSet($key, $value)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->offsetSet($key, $value);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function offsetGet($key)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->offsetGet($key);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function offsetExists($key)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->offsetExists($key);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function offsetUnset($key)\n        {\n            //Method inherited from \\\\DebugBar\\\\DebugBar\n                        /** @var \\\\Barryvdh\\\\Debugbar\\\\LaravelDebugbar $instance */\n                        return $instance->offsetUnset($key);\n        }\n            }\n}\n\nnamespace Facade\\\\Ignition\\\\Facades {\n\n    /**\n     * Class Flare.\n     *\n     * @see \\\\Facade\\\\FlareClient\\\\Flare\n     */    class Flare {\n\n        /**\n         *\n         *\n         * @static\n         */        public static function register($apiKey, $apiSecret = null, $contextDetector = null, $container = null)\n        {\n                        return \\\\Facade\\\\FlareClient\\\\Flare::register($apiKey, $apiSecret, $contextDetector, $container);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function getMiddleware()\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->getMiddleware();\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function registerFlareHandlers()\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->registerFlareHandlers();\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function registerExceptionHandler()\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->registerExceptionHandler();\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function registerErrorHandler()\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->registerErrorHandler();\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function registerMiddleware($callable)\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->registerMiddleware($callable);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function getMiddlewares()\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->getMiddlewares();\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function glow($name, $messageLevel = 'info', $metaData = [])\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->glow($name, $messageLevel, $metaData);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function handleException($throwable)\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->handleException($throwable);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function handleError($code, $message, $file = '', $line = 0)\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->handleError($code, $message, $file, $line);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function applicationPath($applicationPath)\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->applicationPath($applicationPath);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function report($throwable, $callback = null)\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->report($throwable, $callback);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function reportMessage($message, $logLevel, $callback = null)\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->reportMessage($message, $logLevel, $callback);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function sendTestReport($throwable)\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->sendTestReport($throwable);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function reset()\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->reset();\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function anonymizeIp()\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->anonymizeIp();\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function createReport($throwable)\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->createReport($throwable);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function createReportFromMessage($message, $logLevel)\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->createReportFromMessage($message, $logLevel);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function stage($stage)\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->stage($stage);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function messageLevel($messageLevel)\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->messageLevel($messageLevel);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function getGroup($groupName = 'context', $default = [])\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->getGroup($groupName, $default);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function context($key, $value)\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->context($key, $value);\n        }\n\n        /**\n         *\n         *\n         * @static\n         */        public static function group($groupName, $properties)\n        {\n                        /** @var \\\\Facade\\\\FlareClient\\\\Flare $instance */\n                        return $instance->group($groupName, $properties);\n        }\n            }\n}\n\n\nnamespace  {\n\n    class App extends \\\\Illuminate\\\\Support\\\\Facades\\\\App {}\n\n    class Arr extends \\\\Illuminate\\\\Support\\\\Arr {}\n\n    class Artisan extends \\\\Illuminate\\\\Support\\\\Facades\\\\Artisan {}\n\n    class Auth extends \\\\Illuminate\\\\Support\\\\Facades\\\\Auth {}\n\n    class Blade extends \\\\Illuminate\\\\Support\\\\Facades\\\\Blade {}\n\n    class Broadcast extends \\\\Illuminate\\\\Support\\\\Facades\\\\Broadcast {}\n\n    class Bus extends \\\\Illuminate\\\\Support\\\\Facades\\\\Bus {}\n\n    class Cache extends \\\\Illuminate\\\\Support\\\\Facades\\\\Cache {}\n\n    class Config extends \\\\Illuminate\\\\Support\\\\Facades\\\\Config {}\n\n    class Cookie extends \\\\Illuminate\\\\Support\\\\Facades\\\\Cookie {}\n\n    class Crypt extends \\\\Illuminate\\\\Support\\\\Facades\\\\Crypt {}\n\n    class DB extends \\\\Illuminate\\\\Support\\\\Facades\\\\DB {}\n\n    class Eloquent extends \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model {                    /**\n             * Create and return an un-saved model instance.\n             *\n             * @param array $attributes\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|static\n             * @static\n             */            public static function make($attributes = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->make($attributes);\n            }\n                    /**\n             * Register a new global scope.\n             *\n             * @param string $identifier\n             * @param \\\\Illuminate\\\\Database\\\\Eloquent\\\\Scope|\\\\Closure $scope\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function withGlobalScope($identifier, $scope)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->withGlobalScope($identifier, $scope);\n            }\n                    /**\n             * Remove a registered global scope.\n             *\n             * @param \\\\Illuminate\\\\Database\\\\Eloquent\\\\Scope|string $scope\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function withoutGlobalScope($scope)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->withoutGlobalScope($scope);\n            }\n                    /**\n             * Remove all or passed registered global scopes.\n             *\n             * @param array|null $scopes\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function withoutGlobalScopes($scopes = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->withoutGlobalScopes($scopes);\n            }\n                    /**\n             * Get an array of global scopes that were removed from the query.\n             *\n             * @return array\n             * @static\n             */            public static function removedScopes()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->removedScopes();\n            }\n                    /**\n             * Add a where clause on the primary key to the query.\n             *\n             * @param mixed $id\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function whereKey($id)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->whereKey($id);\n            }\n                    /**\n             * Add a where clause on the primary key to the query.\n             *\n             * @param mixed $id\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function whereKeyNot($id)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->whereKeyNot($id);\n            }\n                    /**\n             * Add a basic where clause to the query.\n             *\n             * @param \\\\Closure|string|array $column\n             * @param mixed $operator\n             * @param mixed $value\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function where($column, $operator = null, $value = null, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->where($column, $operator, $value, $boolean);\n            }\n                    /**\n             * Add a basic where clause to the query, and return the first result.\n             *\n             * @param \\\\Closure|string|array $column\n             * @param mixed $operator\n             * @param mixed $value\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|static\n             * @static\n             */            public static function firstWhere($column, $operator = null, $value = null, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->firstWhere($column, $operator, $value, $boolean);\n            }\n                    /**\n             * Add an \"or where\" clause to the query.\n             *\n             * @param \\\\Closure|array|string $column\n             * @param mixed $operator\n             * @param mixed $value\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function orWhere($column, $operator = null, $value = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->orWhere($column, $operator, $value);\n            }\n                    /**\n             * Add an \"order by\" clause for a timestamp to the query.\n             *\n             * @param string $column\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function latest($column = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->latest($column);\n            }\n                    /**\n             * Add an \"order by\" clause for a timestamp to the query.\n             *\n             * @param string $column\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function oldest($column = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->oldest($column);\n            }\n                    /**\n             * Create a collection of models from plain arrays.\n             *\n             * @param array $items\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Collection\n             * @static\n             */            public static function hydrate($items)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->hydrate($items);\n            }\n                    /**\n             * Create a collection of models from a raw query.\n             *\n             * @param string $query\n             * @param array $bindings\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Collection\n             * @static\n             */            public static function fromQuery($query, $bindings = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->fromQuery($query, $bindings);\n            }\n                    /**\n             * Find a model by its primary key.\n             *\n             * @param mixed $id\n             * @param array $columns\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|\\\\Illuminate\\\\Database\\\\Eloquent\\\\Collection|static[]|static|null\n             * @static\n             */            public static function find($id, $columns = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->find($id, $columns);\n            }\n                    /**\n             * Find multiple models by their primary keys.\n             *\n             * @param \\\\Illuminate\\\\Contracts\\\\Support\\\\Arrayable|array $ids\n             * @param array $columns\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Collection\n             * @static\n             */            public static function findMany($ids, $columns = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->findMany($ids, $columns);\n            }\n                    /**\n             * Find a model by its primary key or throw an exception.\n             *\n             * @param mixed $id\n             * @param array $columns\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|\\\\Illuminate\\\\Database\\\\Eloquent\\\\Collection|static|static[]\n             * @throws \\\\Illuminate\\\\Database\\\\Eloquent\\\\ModelNotFoundException\n             * @static\n             */            public static function findOrFail($id, $columns = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->findOrFail($id, $columns);\n            }\n                    /**\n             * Find a model by its primary key or return fresh model instance.\n             *\n             * @param mixed $id\n             * @param array $columns\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|static\n             * @static\n             */            public static function findOrNew($id, $columns = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->findOrNew($id, $columns);\n            }\n                    /**\n             * Get the first record matching the attributes or instantiate it.\n             *\n             * @param array $attributes\n             * @param array $values\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|static\n             * @static\n             */            public static function firstOrNew($attributes = [], $values = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->firstOrNew($attributes, $values);\n            }\n                    /**\n             * Get the first record matching the attributes or create it.\n             *\n             * @param array $attributes\n             * @param array $values\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|static\n             * @static\n             */            public static function firstOrCreate($attributes, $values = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->firstOrCreate($attributes, $values);\n            }\n                    /**\n             * Create or update a record matching the attributes, and fill it with values.\n             *\n             * @param array $attributes\n             * @param array $values\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|static\n             * @static\n             */            public static function updateOrCreate($attributes, $values = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->updateOrCreate($attributes, $values);\n            }\n                    /**\n             * Execute the query and get the first result or throw an exception.\n             *\n             * @param array $columns\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|static\n             * @throws \\\\Illuminate\\\\Database\\\\Eloquent\\\\ModelNotFoundException\n             * @static\n             */            public static function firstOrFail($columns = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->firstOrFail($columns);\n            }\n                    /**\n             * Execute the query and get the first result or call a callback.\n             *\n             * @param \\\\Closure|array $columns\n             * @param \\\\Closure|null $callback\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|static|mixed\n             * @static\n             */            public static function firstOr($columns = [], $callback = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->firstOr($columns, $callback);\n            }\n                    /**\n             * Get a single column's value from the first result of a query.\n             *\n             * @param string $column\n             * @return mixed\n             * @static\n             */            public static function value($column)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->value($column);\n            }\n                    /**\n             * Execute the query as a \"select\" statement.\n             *\n             * @param array|string $columns\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Collection|static[]\n             * @static\n             */            public static function get($columns = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->get($columns);\n            }\n                    /**\n             * Get the hydrated models without eager loading.\n             *\n             * @param array|string $columns\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model[]|static[]\n             * @static\n             */            public static function getModels($columns = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->getModels($columns);\n            }\n                    /**\n             * Eager load the relationships for the models.\n             *\n             * @param array $models\n             * @return array\n             * @static\n             */            public static function eagerLoadRelations($models)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->eagerLoadRelations($models);\n            }\n                    /**\n             * Get a lazy collection for the given query.\n             *\n             * @return \\\\Illuminate\\\\Support\\\\LazyCollection\n             * @static\n             */            public static function cursor()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->cursor();\n            }\n                    /**\n             * Get an array with the values of a given column.\n             *\n             * @param string $column\n             * @param string|null $key\n             * @return \\\\Illuminate\\\\Support\\\\Collection\n             * @static\n             */            public static function pluck($column, $key = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->pluck($column, $key);\n            }\n                    /**\n             * Paginate the given query.\n             *\n             * @param int|null $perPage\n             * @param array $columns\n             * @param string $pageName\n             * @param int|null $page\n             * @return \\\\Illuminate\\\\Contracts\\\\Pagination\\\\LengthAwarePaginator\n             * @throws \\\\InvalidArgumentException\n             * @static\n             */            public static function paginate($perPage = null, $columns = [], $pageName = 'page', $page = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->paginate($perPage, $columns, $pageName, $page);\n            }\n                    /**\n             * Paginate the given query into a simple paginator.\n             *\n             * @param int|null $perPage\n             * @param array $columns\n             * @param string $pageName\n             * @param int|null $page\n             * @return \\\\Illuminate\\\\Contracts\\\\Pagination\\\\Paginator\n             * @static\n             */            public static function simplePaginate($perPage = null, $columns = [], $pageName = 'page', $page = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->simplePaginate($perPage, $columns, $pageName, $page);\n            }\n                    /**\n             * Save a new model and return the instance.\n             *\n             * @param array $attributes\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|$this\n             * @static\n             */            public static function create($attributes = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->create($attributes);\n            }\n                    /**\n             * Save a new model and return the instance. Allow mass-assignment.\n             *\n             * @param array $attributes\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|$this\n             * @static\n             */            public static function forceCreate($attributes)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->forceCreate($attributes);\n            }\n                    /**\n             * Register a replacement for the default delete function.\n             *\n             * @param \\\\Closure $callback\n             * @return void\n             * @static\n             */            public static function onDelete($callback)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                $instance->onDelete($callback);\n            }\n                    /**\n             * Call the given local model scopes.\n             *\n             * @param array|string $scopes\n             * @return static|mixed\n             * @static\n             */            public static function scopes($scopes)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->scopes($scopes);\n            }\n                    /**\n             * Apply the scopes to the Eloquent builder instance and return it.\n             *\n             * @return static\n             * @static\n             */            public static function applyScopes()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->applyScopes();\n            }\n                    /**\n             * Prevent the specified relations from being eager loaded.\n             *\n             * @param mixed $relations\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function without($relations)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->without($relations);\n            }\n                    /**\n             * Create a new instance of the model being queried.\n             *\n             * @param array $attributes\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|static\n             * @static\n             */            public static function newModelInstance($attributes = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->newModelInstance($attributes);\n            }\n                    /**\n             * Apply query-time casts to the model instance.\n             *\n             * @param array $casts\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function withCasts($casts)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->withCasts($casts);\n            }\n                    /**\n             * Get the underlying query builder instance.\n             *\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function getQuery()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->getQuery();\n            }\n                    /**\n             * Set the underlying query builder instance.\n             *\n             * @param \\\\Illuminate\\\\Database\\\\Query\\\\Builder $query\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function setQuery($query)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->setQuery($query);\n            }\n                    /**\n             * Get a base query builder instance.\n             *\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function toBase()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->toBase();\n            }\n                    /**\n             * Get the relationships being eagerly loaded.\n             *\n             * @return array\n             * @static\n             */            public static function getEagerLoads()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->getEagerLoads();\n            }\n                    /**\n             * Set the relationships being eagerly loaded.\n             *\n             * @param array $eagerLoad\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function setEagerLoads($eagerLoad)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->setEagerLoads($eagerLoad);\n            }\n                    /**\n             * Get the model instance being queried.\n             *\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|static\n             * @static\n             */            public static function getModel()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->getModel();\n            }\n                    /**\n             * Set a model instance for the model being queried.\n             *\n             * @param \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model $model\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function setModel($model)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->setModel($model);\n            }\n                    /**\n             * Get the given macro by name.\n             *\n             * @param string $name\n             * @return \\\\Closure\n             * @static\n             */            public static function getMacro($name)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->getMacro($name);\n            }\n                    /**\n             * Checks if a macro is registered.\n             *\n             * @param string $name\n             * @return bool\n             * @static\n             */            public static function hasMacro($name)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->hasMacro($name);\n            }\n                    /**\n             * Get the given global macro by name.\n             *\n             * @param string $name\n             * @return \\\\Closure\n             * @static\n             */            public static function getGlobalMacro($name)\n            {\n                                return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder::getGlobalMacro($name);\n            }\n                    /**\n             * Checks if a global macro is registered.\n             *\n             * @param string $name\n             * @return bool\n             * @static\n             */            public static function hasGlobalMacro($name)\n            {\n                                return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder::hasGlobalMacro($name);\n            }\n                    /**\n             * Chunk the results of the query.\n             *\n             * @param int $count\n             * @param callable $callback\n             * @return bool\n             * @static\n             */            public static function chunk($count, $callback)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->chunk($count, $callback);\n            }\n                    /**\n             * Execute a callback over each item while chunking.\n             *\n             * @param callable $callback\n             * @param int $count\n             * @return bool\n             * @static\n             */            public static function each($callback, $count = 1000)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->each($callback, $count);\n            }\n                    /**\n             * Chunk the results of a query by comparing IDs.\n             *\n             * @param int $count\n             * @param callable $callback\n             * @param string|null $column\n             * @param string|null $alias\n             * @return bool\n             * @static\n             */            public static function chunkById($count, $callback, $column = null, $alias = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->chunkById($count, $callback, $column, $alias);\n            }\n                    /**\n             * Execute a callback over each item while chunking by id.\n             *\n             * @param callable $callback\n             * @param int $count\n             * @param string|null $column\n             * @param string|null $alias\n             * @return bool\n             * @static\n             */            public static function eachById($callback, $count = 1000, $column = null, $alias = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->eachById($callback, $count, $column, $alias);\n            }\n                    /**\n             * Execute the query and get the first result.\n             *\n             * @param array|string $columns\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Model|object|static|null\n             * @static\n             */            public static function first($columns = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->first($columns);\n            }\n                    /**\n             * Apply the callback's query changes if the given \"value\" is true.\n             *\n             * @param mixed $value\n             * @param callable $callback\n             * @param callable|null $default\n             * @return mixed|$this\n             * @static\n             */            public static function when($value, $callback, $default = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->when($value, $callback, $default);\n            }\n                    /**\n             * Pass the query to a given callback.\n             *\n             * @param callable $callback\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function tap($callback)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->tap($callback);\n            }\n                    /**\n             * Apply the callback's query changes if the given \"value\" is false.\n             *\n             * @param mixed $value\n             * @param callable $callback\n             * @param callable|null $default\n             * @return mixed|$this\n             * @static\n             */            public static function unless($value, $callback, $default = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->unless($value, $callback, $default);\n            }\n                    /**\n             * Add a relationship count / exists condition to the query.\n             *\n             * @param \\\\Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\Relation|string $relation\n             * @param string $operator\n             * @param int $count\n             * @param string $boolean\n             * @param \\\\Closure|null $callback\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @throws \\\\RuntimeException\n             * @static\n             */            public static function has($relation, $operator = '>=', $count = 1, $boolean = 'and', $callback = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->has($relation, $operator, $count, $boolean, $callback);\n            }\n                    /**\n             * Add a relationship count / exists condition to the query with an \"or\".\n             *\n             * @param string $relation\n             * @param string $operator\n             * @param int $count\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function orHas($relation, $operator = '>=', $count = 1)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->orHas($relation, $operator, $count);\n            }\n                    /**\n             * Add a relationship count / exists condition to the query.\n             *\n             * @param string $relation\n             * @param string $boolean\n             * @param \\\\Closure|null $callback\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function doesntHave($relation, $boolean = 'and', $callback = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->doesntHave($relation, $boolean, $callback);\n            }\n                    /**\n             * Add a relationship count / exists condition to the query with an \"or\".\n             *\n             * @param string $relation\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function orDoesntHave($relation)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->orDoesntHave($relation);\n            }\n                    /**\n             * Add a relationship count / exists condition to the query with where clauses.\n             *\n             * @param string $relation\n             * @param \\\\Closure|null $callback\n             * @param string $operator\n             * @param int $count\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function whereHas($relation, $callback = null, $operator = '>=', $count = 1)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->whereHas($relation, $callback, $operator, $count);\n            }\n                    /**\n             * Add a relationship count / exists condition to the query with where clauses and an \"or\".\n             *\n             * @param string $relation\n             * @param \\\\Closure|null $callback\n             * @param string $operator\n             * @param int $count\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function orWhereHas($relation, $callback = null, $operator = '>=', $count = 1)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->orWhereHas($relation, $callback, $operator, $count);\n            }\n                    /**\n             * Add a relationship count / exists condition to the query with where clauses.\n             *\n             * @param string $relation\n             * @param \\\\Closure|null $callback\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function whereDoesntHave($relation, $callback = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->whereDoesntHave($relation, $callback);\n            }\n                    /**\n             * Add a relationship count / exists condition to the query with where clauses and an \"or\".\n             *\n             * @param string $relation\n             * @param \\\\Closure|null $callback\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function orWhereDoesntHave($relation, $callback = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->orWhereDoesntHave($relation, $callback);\n            }\n                    /**\n             * Add a polymorphic relationship count / exists condition to the query.\n             *\n             * @param string $relation\n             * @param string|array $types\n             * @param string $operator\n             * @param int $count\n             * @param string $boolean\n             * @param \\\\Closure|null $callback\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function hasMorph($relation, $types, $operator = '>=', $count = 1, $boolean = 'and', $callback = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->hasMorph($relation, $types, $operator, $count, $boolean, $callback);\n            }\n                    /**\n             * Add a polymorphic relationship count / exists condition to the query with an \"or\".\n             *\n             * @param string $relation\n             * @param string|array $types\n             * @param string $operator\n             * @param int $count\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function orHasMorph($relation, $types, $operator = '>=', $count = 1)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->orHasMorph($relation, $types, $operator, $count);\n            }\n                    /**\n             * Add a polymorphic relationship count / exists condition to the query.\n             *\n             * @param string $relation\n             * @param string|array $types\n             * @param string $boolean\n             * @param \\\\Closure|null $callback\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function doesntHaveMorph($relation, $types, $boolean = 'and', $callback = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->doesntHaveMorph($relation, $types, $boolean, $callback);\n            }\n                    /**\n             * Add a polymorphic relationship count / exists condition to the query with an \"or\".\n             *\n             * @param string $relation\n             * @param string|array $types\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function orDoesntHaveMorph($relation, $types)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->orDoesntHaveMorph($relation, $types);\n            }\n                    /**\n             * Add a polymorphic relationship count / exists condition to the query with where clauses.\n             *\n             * @param string $relation\n             * @param string|array $types\n             * @param \\\\Closure|null $callback\n             * @param string $operator\n             * @param int $count\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function whereHasMorph($relation, $types, $callback = null, $operator = '>=', $count = 1)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->whereHasMorph($relation, $types, $callback, $operator, $count);\n            }\n                    /**\n             * Add a polymorphic relationship count / exists condition to the query with where clauses and an \"or\".\n             *\n             * @param string $relation\n             * @param string|array $types\n             * @param \\\\Closure|null $callback\n             * @param string $operator\n             * @param int $count\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function orWhereHasMorph($relation, $types, $callback = null, $operator = '>=', $count = 1)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->orWhereHasMorph($relation, $types, $callback, $operator, $count);\n            }\n                    /**\n             * Add a polymorphic relationship count / exists condition to the query with where clauses.\n             *\n             * @param string $relation\n             * @param string|array $types\n             * @param \\\\Closure|null $callback\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function whereDoesntHaveMorph($relation, $types, $callback = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->whereDoesntHaveMorph($relation, $types, $callback);\n            }\n                    /**\n             * Add a polymorphic relationship count / exists condition to the query with where clauses and an \"or\".\n             *\n             * @param string $relation\n             * @param string|array $types\n             * @param \\\\Closure|null $callback\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function orWhereDoesntHaveMorph($relation, $types, $callback = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->orWhereDoesntHaveMorph($relation, $types, $callback);\n            }\n                    /**\n             * Add subselect queries to count the relations.\n             *\n             * @param mixed $relations\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder\n             * @static\n             */            public static function withCount($relations)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->withCount($relations);\n            }\n                    /**\n             * Merge the where constraints from another query to the current query.\n             *\n             * @param \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $from\n             * @return \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder|static\n             * @static\n             */            public static function mergeConstraintsFrom($from)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Eloquent\\\\Builder $instance */\n                                return $instance->mergeConstraintsFrom($from);\n            }\n                    /**\n             * Set the columns to be selected.\n             *\n             * @param array|mixed $columns\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function select($columns = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->select($columns);\n            }\n                    /**\n             * Add a subselect expression to the query.\n             *\n             * @param \\\\Closure|\\\\Illuminate\\\\Database\\\\Query\\\\Builder|string $query\n             * @param string $as\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @throws \\\\InvalidArgumentException\n             * @static\n             */            public static function selectSub($query, $as)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->selectSub($query, $as);\n            }\n                    /**\n             * Add a new \"raw\" select expression to the query.\n             *\n             * @param string $expression\n             * @param array $bindings\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function selectRaw($expression, $bindings = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->selectRaw($expression, $bindings);\n            }\n                    /**\n             * Makes \"from\" fetch from a subquery.\n             *\n             * @param \\\\Closure|\\\\Illuminate\\\\Database\\\\Query\\\\Builder|string $query\n             * @param string $as\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @throws \\\\InvalidArgumentException\n             * @static\n             */            public static function fromSub($query, $as)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->fromSub($query, $as);\n            }\n                    /**\n             * Add a raw from clause to the query.\n             *\n             * @param string $expression\n             * @param mixed $bindings\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function fromRaw($expression, $bindings = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->fromRaw($expression, $bindings);\n            }\n                    /**\n             * Add a new select column to the query.\n             *\n             * @param array|mixed $column\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function addSelect($column)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->addSelect($column);\n            }\n                    /**\n             * Force the query to only return distinct results.\n             *\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function distinct()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->distinct();\n            }\n                    /**\n             * Set the table which the query is targeting.\n             *\n             * @param \\\\Closure|\\\\Illuminate\\\\Database\\\\Query\\\\Builder|string $table\n             * @param string|null $as\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function from($table, $as = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->from($table, $as);\n            }\n                    /**\n             * Add a join clause to the query.\n             *\n             * @param string $table\n             * @param \\\\Closure|string $first\n             * @param string|null $operator\n             * @param string|null $second\n             * @param string $type\n             * @param bool $where\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function join($table, $first, $operator = null, $second = null, $type = 'inner', $where = false)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->join($table, $first, $operator, $second, $type, $where);\n            }\n                    /**\n             * Add a \"join where\" clause to the query.\n             *\n             * @param string $table\n             * @param \\\\Closure|string $first\n             * @param string $operator\n             * @param string $second\n             * @param string $type\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function joinWhere($table, $first, $operator, $second, $type = 'inner')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->joinWhere($table, $first, $operator, $second, $type);\n            }\n                    /**\n             * Add a subquery join clause to the query.\n             *\n             * @param \\\\Closure|\\\\Illuminate\\\\Database\\\\Query\\\\Builder|string $query\n             * @param string $as\n             * @param \\\\Closure|string $first\n             * @param string|null $operator\n             * @param string|null $second\n             * @param string $type\n             * @param bool $where\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @throws \\\\InvalidArgumentException\n             * @static\n             */            public static function joinSub($query, $as, $first, $operator = null, $second = null, $type = 'inner', $where = false)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->joinSub($query, $as, $first, $operator, $second, $type, $where);\n            }\n                    /**\n             * Add a left join to the query.\n             *\n             * @param string $table\n             * @param \\\\Closure|string $first\n             * @param string|null $operator\n             * @param string|null $second\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function leftJoin($table, $first, $operator = null, $second = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->leftJoin($table, $first, $operator, $second);\n            }\n                    /**\n             * Add a \"join where\" clause to the query.\n             *\n             * @param string $table\n             * @param \\\\Closure|string $first\n             * @param string $operator\n             * @param string $second\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function leftJoinWhere($table, $first, $operator, $second)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->leftJoinWhere($table, $first, $operator, $second);\n            }\n                    /**\n             * Add a subquery left join to the query.\n             *\n             * @param \\\\Closure|\\\\Illuminate\\\\Database\\\\Query\\\\Builder|string $query\n             * @param string $as\n             * @param \\\\Closure|string $first\n             * @param string|null $operator\n             * @param string|null $second\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function leftJoinSub($query, $as, $first, $operator = null, $second = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->leftJoinSub($query, $as, $first, $operator, $second);\n            }\n                    /**\n             * Add a right join to the query.\n             *\n             * @param string $table\n             * @param \\\\Closure|string $first\n             * @param string|null $operator\n             * @param string|null $second\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function rightJoin($table, $first, $operator = null, $second = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->rightJoin($table, $first, $operator, $second);\n            }\n                    /**\n             * Add a \"right join where\" clause to the query.\n             *\n             * @param string $table\n             * @param \\\\Closure|string $first\n             * @param string $operator\n             * @param string $second\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function rightJoinWhere($table, $first, $operator, $second)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->rightJoinWhere($table, $first, $operator, $second);\n            }\n                    /**\n             * Add a subquery right join to the query.\n             *\n             * @param \\\\Closure|\\\\Illuminate\\\\Database\\\\Query\\\\Builder|string $query\n             * @param string $as\n             * @param \\\\Closure|string $first\n             * @param string|null $operator\n             * @param string|null $second\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function rightJoinSub($query, $as, $first, $operator = null, $second = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->rightJoinSub($query, $as, $first, $operator, $second);\n            }\n                    /**\n             * Add a \"cross join\" clause to the query.\n             *\n             * @param string $table\n             * @param \\\\Closure|string|null $first\n             * @param string|null $operator\n             * @param string|null $second\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function crossJoin($table, $first = null, $operator = null, $second = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->crossJoin($table, $first, $operator, $second);\n            }\n                    /**\n             * Merge an array of where clauses and bindings.\n             *\n             * @param array $wheres\n             * @param array $bindings\n             * @return void\n             * @static\n             */            public static function mergeWheres($wheres, $bindings)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                $instance->mergeWheres($wheres, $bindings);\n            }\n                    /**\n             * Prepare the value and operator for a where clause.\n             *\n             * @param string $value\n             * @param string $operator\n             * @param bool $useDefault\n             * @return array\n             * @throws \\\\InvalidArgumentException\n             * @static\n             */            public static function prepareValueAndOperator($value, $operator, $useDefault = false)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->prepareValueAndOperator($value, $operator, $useDefault);\n            }\n                    /**\n             * Add a \"where\" clause comparing two columns to the query.\n             *\n             * @param string|array $first\n             * @param string|null $operator\n             * @param string|null $second\n             * @param string|null $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereColumn($first, $operator = null, $second = null, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereColumn($first, $operator, $second, $boolean);\n            }\n                    /**\n             * Add an \"or where\" clause comparing two columns to the query.\n             *\n             * @param string|array $first\n             * @param string|null $operator\n             * @param string|null $second\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereColumn($first, $operator = null, $second = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereColumn($first, $operator, $second);\n            }\n                    /**\n             * Add a raw where clause to the query.\n             *\n             * @param string $sql\n             * @param mixed $bindings\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereRaw($sql, $bindings = [], $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereRaw($sql, $bindings, $boolean);\n            }\n                    /**\n             * Add a raw or where clause to the query.\n             *\n             * @param string $sql\n             * @param mixed $bindings\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereRaw($sql, $bindings = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereRaw($sql, $bindings);\n            }\n                    /**\n             * Add a \"where in\" clause to the query.\n             *\n             * @param string $column\n             * @param mixed $values\n             * @param string $boolean\n             * @param bool $not\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereIn($column, $values, $boolean = 'and', $not = false)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereIn($column, $values, $boolean, $not);\n            }\n                    /**\n             * Add an \"or where in\" clause to the query.\n             *\n             * @param string $column\n             * @param mixed $values\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereIn($column, $values)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereIn($column, $values);\n            }\n                    /**\n             * Add a \"where not in\" clause to the query.\n             *\n             * @param string $column\n             * @param mixed $values\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereNotIn($column, $values, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereNotIn($column, $values, $boolean);\n            }\n                    /**\n             * Add an \"or where not in\" clause to the query.\n             *\n             * @param string $column\n             * @param mixed $values\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereNotIn($column, $values)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereNotIn($column, $values);\n            }\n                    /**\n             * Add a \"where in raw\" clause for integer values to the query.\n             *\n             * @param string $column\n             * @param \\\\Illuminate\\\\Contracts\\\\Support\\\\Arrayable|array $values\n             * @param string $boolean\n             * @param bool $not\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereIntegerInRaw($column, $values, $boolean = 'and', $not = false)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereIntegerInRaw($column, $values, $boolean, $not);\n            }\n                    /**\n             * Add a \"where not in raw\" clause for integer values to the query.\n             *\n             * @param string $column\n             * @param \\\\Illuminate\\\\Contracts\\\\Support\\\\Arrayable|array $values\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereIntegerNotInRaw($column, $values, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereIntegerNotInRaw($column, $values, $boolean);\n            }\n                    /**\n             * Add a \"where null\" clause to the query.\n             *\n             * @param string|array $columns\n             * @param string $boolean\n             * @param bool $not\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereNull($columns, $boolean = 'and', $not = false)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereNull($columns, $boolean, $not);\n            }\n                    /**\n             * Add an \"or where null\" clause to the query.\n             *\n             * @param string $column\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereNull($column)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereNull($column);\n            }\n                    /**\n             * Add a \"where not null\" clause to the query.\n             *\n             * @param string|array $columns\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereNotNull($columns, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereNotNull($columns, $boolean);\n            }\n                    /**\n             * Add a where between statement to the query.\n             *\n             * @param string $column\n             * @param array $values\n             * @param string $boolean\n             * @param bool $not\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereBetween($column, $values, $boolean = 'and', $not = false)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereBetween($column, $values, $boolean, $not);\n            }\n                    /**\n             * Add an or where between statement to the query.\n             *\n             * @param string $column\n             * @param array $values\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereBetween($column, $values)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereBetween($column, $values);\n            }\n                    /**\n             * Add a where not between statement to the query.\n             *\n             * @param string $column\n             * @param array $values\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereNotBetween($column, $values, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereNotBetween($column, $values, $boolean);\n            }\n                    /**\n             * Add an or where not between statement to the query.\n             *\n             * @param string $column\n             * @param array $values\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereNotBetween($column, $values)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereNotBetween($column, $values);\n            }\n                    /**\n             * Add an \"or where not null\" clause to the query.\n             *\n             * @param string $column\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereNotNull($column)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereNotNull($column);\n            }\n                    /**\n             * Add a \"where date\" statement to the query.\n             *\n             * @param string $column\n             * @param string $operator\n             * @param \\\\DateTimeInterface|string|null $value\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereDate($column, $operator, $value = null, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereDate($column, $operator, $value, $boolean);\n            }\n                    /**\n             * Add an \"or where date\" statement to the query.\n             *\n             * @param string $column\n             * @param string $operator\n             * @param \\\\DateTimeInterface|string|null $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereDate($column, $operator, $value = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereDate($column, $operator, $value);\n            }\n                    /**\n             * Add a \"where time\" statement to the query.\n             *\n             * @param string $column\n             * @param string $operator\n             * @param \\\\DateTimeInterface|string|null $value\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereTime($column, $operator, $value = null, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereTime($column, $operator, $value, $boolean);\n            }\n                    /**\n             * Add an \"or where time\" statement to the query.\n             *\n             * @param string $column\n             * @param string $operator\n             * @param \\\\DateTimeInterface|string|null $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereTime($column, $operator, $value = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereTime($column, $operator, $value);\n            }\n                    /**\n             * Add a \"where day\" statement to the query.\n             *\n             * @param string $column\n             * @param string $operator\n             * @param \\\\DateTimeInterface|string|null $value\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereDay($column, $operator, $value = null, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereDay($column, $operator, $value, $boolean);\n            }\n                    /**\n             * Add an \"or where day\" statement to the query.\n             *\n             * @param string $column\n             * @param string $operator\n             * @param \\\\DateTimeInterface|string|null $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereDay($column, $operator, $value = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereDay($column, $operator, $value);\n            }\n                    /**\n             * Add a \"where month\" statement to the query.\n             *\n             * @param string $column\n             * @param string $operator\n             * @param \\\\DateTimeInterface|string|null $value\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereMonth($column, $operator, $value = null, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereMonth($column, $operator, $value, $boolean);\n            }\n                    /**\n             * Add an \"or where month\" statement to the query.\n             *\n             * @param string $column\n             * @param string $operator\n             * @param \\\\DateTimeInterface|string|null $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereMonth($column, $operator, $value = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereMonth($column, $operator, $value);\n            }\n                    /**\n             * Add a \"where year\" statement to the query.\n             *\n             * @param string $column\n             * @param string $operator\n             * @param \\\\DateTimeInterface|string|int|null $value\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereYear($column, $operator, $value = null, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereYear($column, $operator, $value, $boolean);\n            }\n                    /**\n             * Add an \"or where year\" statement to the query.\n             *\n             * @param string $column\n             * @param string $operator\n             * @param \\\\DateTimeInterface|string|int|null $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereYear($column, $operator, $value = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereYear($column, $operator, $value);\n            }\n                    /**\n             * Add a nested where statement to the query.\n             *\n             * @param \\\\Closure $callback\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereNested($callback, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereNested($callback, $boolean);\n            }\n                    /**\n             * Create a new query instance for nested where condition.\n             *\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function forNestedWhere()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->forNestedWhere();\n            }\n                    /**\n             * Add another query builder as a nested where to the query builder.\n             *\n             * @param $this $query\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function addNestedWhereQuery($query, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->addNestedWhereQuery($query, $boolean);\n            }\n                    /**\n             * Add an exists clause to the query.\n             *\n             * @param \\\\Closure $callback\n             * @param string $boolean\n             * @param bool $not\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereExists($callback, $boolean = 'and', $not = false)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereExists($callback, $boolean, $not);\n            }\n                    /**\n             * Add an or exists clause to the query.\n             *\n             * @param \\\\Closure $callback\n             * @param bool $not\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereExists($callback, $not = false)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereExists($callback, $not);\n            }\n                    /**\n             * Add a where not exists clause to the query.\n             *\n             * @param \\\\Closure $callback\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereNotExists($callback, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereNotExists($callback, $boolean);\n            }\n                    /**\n             * Add a where not exists clause to the query.\n             *\n             * @param \\\\Closure $callback\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereNotExists($callback)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereNotExists($callback);\n            }\n                    /**\n             * Add an exists clause to the query.\n             *\n             * @param \\\\Illuminate\\\\Database\\\\Query\\\\Builder $query\n             * @param string $boolean\n             * @param bool $not\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function addWhereExistsQuery($query, $boolean = 'and', $not = false)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->addWhereExistsQuery($query, $boolean, $not);\n            }\n                    /**\n             * Adds a where condition using row values.\n             *\n             * @param array $columns\n             * @param string $operator\n             * @param array $values\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @throws \\\\InvalidArgumentException\n             * @static\n             */            public static function whereRowValues($columns, $operator, $values, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereRowValues($columns, $operator, $values, $boolean);\n            }\n                    /**\n             * Adds a or where condition using row values.\n             *\n             * @param array $columns\n             * @param string $operator\n             * @param array $values\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereRowValues($columns, $operator, $values)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereRowValues($columns, $operator, $values);\n            }\n                    /**\n             * Add a \"where JSON contains\" clause to the query.\n             *\n             * @param string $column\n             * @param mixed $value\n             * @param string $boolean\n             * @param bool $not\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereJsonContains($column, $value, $boolean = 'and', $not = false)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereJsonContains($column, $value, $boolean, $not);\n            }\n                    /**\n             * Add a \"or where JSON contains\" clause to the query.\n             *\n             * @param string $column\n             * @param mixed $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereJsonContains($column, $value)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereJsonContains($column, $value);\n            }\n                    /**\n             * Add a \"where JSON not contains\" clause to the query.\n             *\n             * @param string $column\n             * @param mixed $value\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereJsonDoesntContain($column, $value, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereJsonDoesntContain($column, $value, $boolean);\n            }\n                    /**\n             * Add a \"or where JSON not contains\" clause to the query.\n             *\n             * @param string $column\n             * @param mixed $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereJsonDoesntContain($column, $value)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereJsonDoesntContain($column, $value);\n            }\n                    /**\n             * Add a \"where JSON length\" clause to the query.\n             *\n             * @param string $column\n             * @param mixed $operator\n             * @param mixed $value\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function whereJsonLength($column, $operator, $value = null, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->whereJsonLength($column, $operator, $value, $boolean);\n            }\n                    /**\n             * Add a \"or where JSON length\" clause to the query.\n             *\n             * @param string $column\n             * @param mixed $operator\n             * @param mixed $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orWhereJsonLength($column, $operator, $value = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orWhereJsonLength($column, $operator, $value);\n            }\n                    /**\n             * Handles dynamic \"where\" clauses to the query.\n             *\n             * @param string $method\n             * @param array $parameters\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function dynamicWhere($method, $parameters)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->dynamicWhere($method, $parameters);\n            }\n                    /**\n             * Add a \"group by\" clause to the query.\n             *\n             * @param array|string $groups\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function groupBy(...$groups)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->groupBy(...$groups);\n            }\n                    /**\n             * Add a raw groupBy clause to the query.\n             *\n             * @param string $sql\n             * @param array $bindings\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function groupByRaw($sql, $bindings = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->groupByRaw($sql, $bindings);\n            }\n                    /**\n             * Add a \"having\" clause to the query.\n             *\n             * @param string $column\n             * @param string|null $operator\n             * @param string|null $value\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function having($column, $operator = null, $value = null, $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->having($column, $operator, $value, $boolean);\n            }\n                    /**\n             * Add a \"or having\" clause to the query.\n             *\n             * @param string $column\n             * @param string|null $operator\n             * @param string|null $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orHaving($column, $operator = null, $value = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orHaving($column, $operator, $value);\n            }\n                    /**\n             * Add a \"having between \" clause to the query.\n             *\n             * @param string $column\n             * @param array $values\n             * @param string $boolean\n             * @param bool $not\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function havingBetween($column, $values, $boolean = 'and', $not = false)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->havingBetween($column, $values, $boolean, $not);\n            }\n                    /**\n             * Add a raw having clause to the query.\n             *\n             * @param string $sql\n             * @param array $bindings\n             * @param string $boolean\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function havingRaw($sql, $bindings = [], $boolean = 'and')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->havingRaw($sql, $bindings, $boolean);\n            }\n                    /**\n             * Add a raw or having clause to the query.\n             *\n             * @param string $sql\n             * @param array $bindings\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orHavingRaw($sql, $bindings = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orHavingRaw($sql, $bindings);\n            }\n                    /**\n             * Add an \"order by\" clause to the query.\n             *\n             * @param \\\\Closure|\\\\Illuminate\\\\Database\\\\Query\\\\Builder|\\\\Illuminate\\\\Database\\\\Query\\\\Expression|string $column\n             * @param string $direction\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @throws \\\\InvalidArgumentException\n             * @static\n             */            public static function orderBy($column, $direction = 'asc')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orderBy($column, $direction);\n            }\n                    /**\n             * Add a descending \"order by\" clause to the query.\n             *\n             * @param string $column\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orderByDesc($column)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orderByDesc($column);\n            }\n                    /**\n             * Put the query's results in random order.\n             *\n             * @param string $seed\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function inRandomOrder($seed = '')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->inRandomOrder($seed);\n            }\n                    /**\n             * Add a raw \"order by\" clause to the query.\n             *\n             * @param string $sql\n             * @param array $bindings\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function orderByRaw($sql, $bindings = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->orderByRaw($sql, $bindings);\n            }\n                    /**\n             * Alias to set the \"offset\" value of the query.\n             *\n             * @param int $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function skip($value)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->skip($value);\n            }\n                    /**\n             * Set the \"offset\" value of the query.\n             *\n             * @param int $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function offset($value)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->offset($value);\n            }\n                    /**\n             * Alias to set the \"limit\" value of the query.\n             *\n             * @param int $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function take($value)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->take($value);\n            }\n                    /**\n             * Set the \"limit\" value of the query.\n             *\n             * @param int $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function limit($value)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->limit($value);\n            }\n                    /**\n             * Set the limit and offset for a given page.\n             *\n             * @param int $page\n             * @param int $perPage\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function forPage($page, $perPage = 15)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->forPage($page, $perPage);\n            }\n                    /**\n             * Constrain the query to the previous \"page\" of results before a given ID.\n             *\n             * @param int $perPage\n             * @param int|null $lastId\n             * @param string $column\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function forPageBeforeId($perPage = 15, $lastId = 0, $column = 'id')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->forPageBeforeId($perPage, $lastId, $column);\n            }\n                    /**\n             * Constrain the query to the next \"page\" of results after a given ID.\n             *\n             * @param int $perPage\n             * @param int|null $lastId\n             * @param string $column\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function forPageAfterId($perPage = 15, $lastId = 0, $column = 'id')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->forPageAfterId($perPage, $lastId, $column);\n            }\n                    /**\n             * Remove all existing orders and optionally add a new order.\n             *\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function reorder($column = null, $direction = 'asc')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->reorder($column, $direction);\n            }\n                    /**\n             * Add a union statement to the query.\n             *\n             * @param \\\\Illuminate\\\\Database\\\\Query\\\\Builder|\\\\Closure $query\n             * @param bool $all\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function union($query, $all = false)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->union($query, $all);\n            }\n                    /**\n             * Add a union all statement to the query.\n             *\n             * @param \\\\Illuminate\\\\Database\\\\Query\\\\Builder|\\\\Closure $query\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function unionAll($query)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->unionAll($query);\n            }\n                    /**\n             * Lock the selected rows in the table.\n             *\n             * @param string|bool $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function lock($value = true)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->lock($value);\n            }\n                    /**\n             * Lock the selected rows in the table for updating.\n             *\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function lockForUpdate()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->lockForUpdate();\n            }\n                    /**\n             * Share lock the selected rows in the table.\n             *\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function sharedLock()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->sharedLock();\n            }\n                    /**\n             * Get the SQL representation of the query.\n             *\n             * @return string\n             * @static\n             */            public static function toSql()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->toSql();\n            }\n                    /**\n             * Get the count of the total records for the paginator.\n             *\n             * @param array $columns\n             * @return int\n             * @static\n             */            public static function getCountForPagination($columns = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->getCountForPagination($columns);\n            }\n                    /**\n             * Concatenate values of a given column as a string.\n             *\n             * @param string $column\n             * @param string $glue\n             * @return string\n             * @static\n             */            public static function implode($column, $glue = '')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->implode($column, $glue);\n            }\n                    /**\n             * Determine if any rows exist for the current query.\n             *\n             * @return bool\n             * @static\n             */            public static function exists()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->exists();\n            }\n                    /**\n             * Determine if no rows exist for the current query.\n             *\n             * @return bool\n             * @static\n             */            public static function doesntExist()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->doesntExist();\n            }\n                    /**\n             * Execute the given callback if no rows exist for the current query.\n             *\n             * @param \\\\Closure $callback\n             * @return mixed\n             * @static\n             */            public static function existsOr($callback)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->existsOr($callback);\n            }\n                    /**\n             * Execute the given callback if rows exist for the current query.\n             *\n             * @param \\\\Closure $callback\n             * @return mixed\n             * @static\n             */            public static function doesntExistOr($callback)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->doesntExistOr($callback);\n            }\n                    /**\n             * Retrieve the \"count\" result of the query.\n             *\n             * @param string $columns\n             * @return int\n             * @static\n             */            public static function count($columns = '*')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->count($columns);\n            }\n                    /**\n             * Retrieve the minimum value of a given column.\n             *\n             * @param string $column\n             * @return mixed\n             * @static\n             */            public static function min($column)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->min($column);\n            }\n                    /**\n             * Retrieve the maximum value of a given column.\n             *\n             * @param string $column\n             * @return mixed\n             * @static\n             */            public static function max($column)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->max($column);\n            }\n                    /**\n             * Retrieve the sum of the values of a given column.\n             *\n             * @param string $column\n             * @return mixed\n             * @static\n             */            public static function sum($column)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->sum($column);\n            }\n                    /**\n             * Retrieve the average of the values of a given column.\n             *\n             * @param string $column\n             * @return mixed\n             * @static\n             */            public static function avg($column)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->avg($column);\n            }\n                    /**\n             * Alias for the \"avg\" method.\n             *\n             * @param string $column\n             * @return mixed\n             * @static\n             */            public static function average($column)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->average($column);\n            }\n                    /**\n             * Execute an aggregate function on the database.\n             *\n             * @param string $function\n             * @param array $columns\n             * @return mixed\n             * @static\n             */            public static function aggregate($function, $columns = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->aggregate($function, $columns);\n            }\n                    /**\n             * Execute a numeric aggregate function on the database.\n             *\n             * @param string $function\n             * @param array $columns\n             * @return float|int\n             * @static\n             */            public static function numericAggregate($function, $columns = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->numericAggregate($function, $columns);\n            }\n                    /**\n             * Insert a new record into the database.\n             *\n             * @param array $values\n             * @return bool\n             * @static\n             */            public static function insert($values)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->insert($values);\n            }\n                    /**\n             * Insert a new record into the database while ignoring errors.\n             *\n             * @param array $values\n             * @return int\n             * @static\n             */            public static function insertOrIgnore($values)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->insertOrIgnore($values);\n            }\n                    /**\n             * Insert a new record and get the value of the primary key.\n             *\n             * @param array $values\n             * @param string|null $sequence\n             * @return int\n             * @static\n             */            public static function insertGetId($values, $sequence = null)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->insertGetId($values, $sequence);\n            }\n                    /**\n             * Insert new records into the table using a subquery.\n             *\n             * @param array $columns\n             * @param \\\\Closure|\\\\Illuminate\\\\Database\\\\Query\\\\Builder|string $query\n             * @return int\n             * @static\n             */            public static function insertUsing($columns, $query)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->insertUsing($columns, $query);\n            }\n                    /**\n             * Insert or update a record matching the attributes, and fill it with values.\n             *\n             * @param array $attributes\n             * @param array $values\n             * @return bool\n             * @static\n             */            public static function updateOrInsert($attributes, $values = [])\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->updateOrInsert($attributes, $values);\n            }\n                    /**\n             * Run a truncate statement on the table.\n             *\n             * @return void\n             * @static\n             */            public static function truncate()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                $instance->truncate();\n            }\n                    /**\n             * Create a raw database expression.\n             *\n             * @param mixed $value\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Expression\n             * @static\n             */            public static function raw($value)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->raw($value);\n            }\n                    /**\n             * Get the current query value bindings in a flattened array.\n             *\n             * @return array\n             * @static\n             */            public static function getBindings()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->getBindings();\n            }\n                    /**\n             * Get the raw array of bindings.\n             *\n             * @return array\n             * @static\n             */            public static function getRawBindings()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->getRawBindings();\n            }\n                    /**\n             * Set the bindings on the query builder.\n             *\n             * @param array $bindings\n             * @param string $type\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @throws \\\\InvalidArgumentException\n             * @static\n             */            public static function setBindings($bindings, $type = 'where')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->setBindings($bindings, $type);\n            }\n                    /**\n             * Add a binding to the query.\n             *\n             * @param mixed $value\n             * @param string $type\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @throws \\\\InvalidArgumentException\n             * @static\n             */            public static function addBinding($value, $type = 'where')\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->addBinding($value, $type);\n            }\n                    /**\n             * Merge an array of bindings into our bindings.\n             *\n             * @param \\\\Illuminate\\\\Database\\\\Query\\\\Builder $query\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function mergeBindings($query)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->mergeBindings($query);\n            }\n                    /**\n             * Get the database query processor instance.\n             *\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Processors\\\\Processor\n             * @static\n             */            public static function getProcessor()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->getProcessor();\n            }\n                    /**\n             * Get the query grammar instance.\n             *\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Grammars\\\\Grammar\n             * @static\n             */            public static function getGrammar()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->getGrammar();\n            }\n                    /**\n             * Use the write pdo for query.\n             *\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function useWritePdo()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->useWritePdo();\n            }\n                    /**\n             * Clone the query without the given properties.\n             *\n             * @param array $properties\n             * @return static\n             * @static\n             */            public static function cloneWithout($properties)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->cloneWithout($properties);\n            }\n                    /**\n             * Clone the query without the given bindings.\n             *\n             * @param array $except\n             * @return static\n             * @static\n             */            public static function cloneWithoutBindings($except)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->cloneWithoutBindings($except);\n            }\n                    /**\n             * Dump the current SQL and bindings.\n             *\n             * @return \\\\Illuminate\\\\Database\\\\Query\\\\Builder\n             * @static\n             */            public static function dump()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->dump();\n            }\n                    /**\n             * Die and dump the current SQL and bindings.\n             *\n             * @return void\n             * @static\n             */            public static function dd()\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                $instance->dd();\n            }\n                    /**\n             * Register a custom macro.\n             *\n             * @param string $name\n             * @param object|callable $macro\n             * @return void\n             * @static\n             */            public static function macro($name, $macro)\n            {\n                                \\\\Illuminate\\\\Database\\\\Query\\\\Builder::macro($name, $macro);\n            }\n                    /**\n             * Mix another object into the class.\n             *\n             * @param object $mixin\n             * @param bool $replace\n             * @return void\n             * @throws \\\\ReflectionException\n             * @static\n             */            public static function mixin($mixin, $replace = true)\n            {\n                                \\\\Illuminate\\\\Database\\\\Query\\\\Builder::mixin($mixin, $replace);\n            }\n                    /**\n             * Dynamically handle calls to the class.\n             *\n             * @param string $method\n             * @param array $parameters\n             * @return mixed\n             * @throws \\\\BadMethodCallException\n             * @static\n             */            public static function macroCall($method, $parameters)\n            {\n                                /** @var \\\\Illuminate\\\\Database\\\\Query\\\\Builder $instance */\n                                return $instance->macroCall($method, $parameters);\n            }\n        }\n\n    class Event extends \\\\Illuminate\\\\Support\\\\Facades\\\\Event {}\n\n    class File extends \\\\Illuminate\\\\Support\\\\Facades\\\\File {}\n\n    class Gate extends \\\\Illuminate\\\\Support\\\\Facades\\\\Gate {}\n\n    class Hash extends \\\\Illuminate\\\\Support\\\\Facades\\\\Hash {}\n\n    class Http extends \\\\Illuminate\\\\Support\\\\Facades\\\\Http {}\n\n    class Lang extends \\\\Illuminate\\\\Support\\\\Facades\\\\Lang {}\n\n    class Log extends \\\\Illuminate\\\\Support\\\\Facades\\\\Log {}\n\n    class Mail extends \\\\Illuminate\\\\Support\\\\Facades\\\\Mail {}\n\n    class Notification extends \\\\Illuminate\\\\Support\\\\Facades\\\\Notification {}\n\n    class Password extends \\\\Illuminate\\\\Support\\\\Facades\\\\Password {}\n\n    class Queue extends \\\\Illuminate\\\\Support\\\\Facades\\\\Queue {}\n\n    class Redirect extends \\\\Illuminate\\\\Support\\\\Facades\\\\Redirect {}\n\n    class Request extends \\\\Illuminate\\\\Support\\\\Facades\\\\Request {}\n\n    class Response extends \\\\Illuminate\\\\Support\\\\Facades\\\\Response {}\n\n    class Route extends \\\\Illuminate\\\\Support\\\\Facades\\\\Route {}\n\n    class Schema extends \\\\Illuminate\\\\Support\\\\Facades\\\\Schema {}\n\n    class Session extends \\\\Illuminate\\\\Support\\\\Facades\\\\Session {}\n\n    class Storage extends \\\\Illuminate\\\\Support\\\\Facades\\\\Storage {}\n\n    class Str extends \\\\Illuminate\\\\Support\\\\Str {}\n\n    class URL extends \\\\Illuminate\\\\Support\\\\Facades\\\\URL {}\n\n    class Validator extends \\\\Illuminate\\\\Support\\\\Facades\\\\Validator {}\n\n    class View extends \\\\Illuminate\\\\Support\\\\Facades\\\\View {}\n\n    class Debugbar extends \\\\Barryvdh\\\\Debugbar\\\\Facade {}\n\n    class Flare extends \\\\Facade\\\\Ignition\\\\Facades\\\\Flare {}\n}\n`;\n","import * as vscode from \"vscode\";\nimport Parser from \"./parser/index\";\nimport { getConfigElements } from \"./php/config\";\nimport { isNull } from \"util\";\n\nexport default class ConfigItemProvider {\n  private elements: any = null;\n\n  constructor() {\n    this.syncConfig();\n  }\n\n  async provideCompletionItems(\n    document: vscode.TextDocument,\n    position: vscode.Position\n  ): Promise<Array<vscode.CompletionItem>> {\n    let items: Array<vscode.CompletionItem> = [];\n\n    let hasConfig = new Parser(document, position).hasConfig();\n\n    if (!hasConfig) {\n      return items;\n    }\n\n    if (isNull(this.elements)) {\n      await this.syncConfig();\n    }\n\n    for (let element of this.elements) {\n      const item = new vscode.CompletionItem(\n        element,\n        vscode.CompletionItemKind.Constant\n      );\n\n      item.range = document.getWordRangeAtPosition(\n        position,\n        /[\\w\\d\\-_\\.\\:\\\\\\/]+/g\n      );\n\n      items.push(item);\n    }\n\n    return items;\n  }\n\n  async syncConfig() {\n    await getConfigElements().then((elements) => {\n      if (!elements) {\n        return;\n      }\n\n      this.elements = Object.values(JSON.parse(elements));\n    });\n  }\n}\n","import PHP from \"./index\";\n\nexport function getConfigElements() {\n  const script = `$configs = app('config')->all();class ConfigTransformer {protected $items = [];public function __construct(){$this->items = collect();}public function transform($keys, $alias = ''){return collect($keys)->map(function ($keys, $index) use ($alias) {if ($alias) {$alias = $alias .'.';}if (! is_string($index)) {return;}$alias .= $index;if (is_array($keys)) {return $this->transform($keys, $alias);} else {$this->items->push($alias);return $keys;}});}public function all(): array{return $this->items->filter(function ($config, $key) {return strpos($config, 'app.providers') === false && strpos($config, 'filesystems.links') === false && strpos($config, 'app.aliases') === false;})->toArray();}}$config = new ConfigTransformer();$config->transform($configs);echo json_encode($config->all());`;\n\n  return PHP.run(script);\n}\n","import * as vscode from \"vscode\";\nimport Parser from \"./parser/index\";\nimport { getRouterNames } from \"./php/router\";\nimport { isNull } from \"util\";\n\nexport default class RouterItemProvider {\n  private routes: any = null;\n\n  constructor() {\n    this.syncRoutes();\n  }\n\n  async provideCompletionItems(\n    document: vscode.TextDocument,\n    position: vscode.Position\n  ): Promise<Array<vscode.CompletionItem>> {\n    let items: Array<vscode.CompletionItem> = [];\n\n    let hasRoute = new Parser(document, position).hasRoute();\n\n    if (!hasRoute) {\n      return items;\n    }\n\n    if (isNull(this.routes)) {\n      await this.syncRoutes();\n    }\n\n    for (let route of this.routes) {\n      const item = new vscode.CompletionItem(\n        route,\n        vscode.CompletionItemKind.Constant\n      );\n\n      item.range = document.getWordRangeAtPosition(\n        position,\n        /[\\w\\d\\-_\\.\\:\\\\\\/]+/g\n      );\n\n      items.push(item);\n    }\n\n    return items;\n  }\n\n  async syncRoutes() {\n    await getRouterNames().then((routes) => {\n      if (!routes) {\n        return;\n      }\n\n      this.routes = Object.values(JSON.parse(routes));\n    });\n  }\n}\n","import PHP from \"./index\";\n\nexport function getRouterNames() {\n  const script = `function getRoutes($routers){$routes = [];if (is_array($routers)) {foreach ($routers as $key => $router) {if (array_key_exists('as', $router['action'])) {$routes[] = $router['action']['as'];}}return $routes;}foreach ($routers as $router) {$routes[] = $router->getName();}return $routes;}$routers = app('router')->getRoutes();echo json_encode(array_filter(getRoutes($routers)));`;\n\n  return PHP.run(script);\n}\n","import * as vscode from \"vscode\";\nimport Parser from \"./parser/index\";\nimport { getTranslations } from \"./php/translation\";\nimport { isNull } from \"util\";\n\nexport default class TranslationItemProvider {\n  private translations: any = null;\n\n  constructor() {\n    this.syncTranslations();\n  }\n\n  async provideCompletionItems(\n    document: vscode.TextDocument,\n    position: vscode.Position\n  ): Promise<Array<vscode.CompletionItem>> {\n    let items: Array<vscode.CompletionItem> = [];\n\n    let hasTranslation = new Parser(document, position).hasTranslation();\n\n    if (!hasTranslation) {\n      return items;\n    }\n\n    if (isNull(this.translations)) {\n      await this.syncTranslations();\n    }\n\n    for (let translation of this.translations) {\n      const item = new vscode.CompletionItem(\n        translation,\n        vscode.CompletionItemKind.Constant\n      );\n\n      item.range = document.getWordRangeAtPosition(\n        position,\n        /[\\w\\d\\-_\\.\\:\\\\\\/]+/g\n      );\n\n      items.push(item);\n    }\n\n    return items;\n  }\n\n  async syncTranslations() {\n    const translations = await getTranslations();\n    if (!translations) {\n      return;\n    }\n\n    this.translations = Object.values(JSON.parse(translations));\n  }\n}\n","import PHP from \"./index\";\n\nexport function getTranslations() {\n  const script = `$filesystem = (new Illuminate\\\\Filesystem\\\\Filesystem);if (! $filesystem->exists(resource_path('lang/en'))) {return;}$files = $filesystem->files(resource_path('lang/en'));$translations = [];foreach ($files as $file) {$fileName = str_replace('.php', '', $file->getFileName());$fields = include($file->getPathName());if (is_array($fields)) {foreach ($fields as $field => $message) {$translations[] = \"{$fileName}.{$field}\";}}}echo json_encode(array_filter($translations));`;\n\n  return PHP.run(script);\n}\n","import { ExtensionContext, languages, commands } from \"vscode\";\nimport { hasArtisan, DOCUMENT_SELECTOR, TRIGGER_CHARACTERS } from \"./laravel\";\nimport ViewItemProvider from \"./ViewItemProvider\";\nimport ModelItemProvider from \"./ModelItemProvider\";\nimport LaravelIdeHelper from \"./php/laravelIdeHelper\";\nimport ConfigItemProvider from \"./ConfigItemProvider\";\nimport RouterItemProvider from \"./RouterItemProvider\";\nimport TranslationItemProvider from \"./TranslationItemProvider\";\n\nexport function activate(context: ExtensionContext) {\n  if (!hasArtisan()) {\n    return;\n  }\n\n  context.subscriptions.push(\n    commands.registerCommand(`generate_ide_helper`, () =>\n      LaravelIdeHelper.generate()\n    )\n  );\n\n  context.subscriptions.push(\n    languages.registerCompletionItemProvider(\n      DOCUMENT_SELECTOR,\n      new ModelItemProvider(),\n      ...TRIGGER_CHARACTERS\n    )\n  );\n\n  context.subscriptions.push(\n    languages.registerCompletionItemProvider(\n      DOCUMENT_SELECTOR,\n      new ViewItemProvider(),\n      ...TRIGGER_CHARACTERS\n    )\n  );\n\n  context.subscriptions.push(\n    languages.registerCompletionItemProvider(\n      DOCUMENT_SELECTOR,\n      new ConfigItemProvider(),\n      ...TRIGGER_CHARACTERS\n    )\n  );\n\n  context.subscriptions.push(\n    languages.registerCompletionItemProvider(\n      DOCUMENT_SELECTOR,\n      new RouterItemProvider(),\n      ...TRIGGER_CHARACTERS\n    )\n  );\n\n  context.subscriptions.push(\n    languages.registerCompletionItemProvider(\n      DOCUMENT_SELECTOR,\n      new TranslationItemProvider(),\n      ...TRIGGER_CHARACTERS\n    )\n  );\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],"sourceRoot":""}