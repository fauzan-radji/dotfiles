"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typed_json_rpc_1 = require("@hediet/typed-json-rpc");
const typed_json_rpc_websocket_1 = require("@hediet/typed-json-rpc-websocket");
const events_1 = require("@hediet/std/events");
const disposable_1 = require("@hediet/std/disposable");
/**
 * @internal
 * The source of the function is evaluated in the debug
 * session from the vscode extension.
 */
function getLiveDebugApi() {
    const obj = typeof window === "object" ? window : global;
    const key = "@hediet/live-debug";
    let liveDebugApi = obj[key];
    if (!liveDebugApi) {
        let pendingServers = new Array();
        obj[key] = liveDebugApi = {
            pendingServers,
            connectTo: (port) => pendingServers.push({ port }),
        };
    }
    return liveDebugApi;
}
exports.getLiveDebugApi = getLiveDebugApi;
initAndProcessLiveDebugApi();
function initAndProcessLiveDebugApi() {
    const api = getLiveDebugApi();
    const oldConnectTo = api.connectTo;
    api.connectTo = port => {
        connectTo(port);
        oldConnectTo(port);
    };
    for (const server of api.pendingServers) {
        connectTo(server.port);
    }
}
const initializers = new Set();
const onNewInitializer = new events_1.EventEmitter();
/**
 * Registers a debug service.
 * The initializer is called when a connection
 * to a debugger that supports live debug has been established.
 */
function registerLiveDebug(initializer) {
    initializers.add(initializer);
    onNewInitializer.emit({ initializer });
}
exports.registerLiveDebug = registerLiveDebug;
async function connectTo(port) {
    const stream = await typed_json_rpc_websocket_1.WebSocketStream.connectTo({
        port,
        host: "localhost",
    });
    const typedChannel = typed_json_rpc_1.TypedChannel.fromStream(stream, undefined);
    for (const init of initializers) {
        init(typedChannel, stream.onClosed);
    }
    disposable_1.disposeOnReturn(async (track) => {
        track(onNewInitializer.sub(({ initializer }) => {
            initializer(typedChannel, stream.onClosed);
        }));
        typedChannel.startListen();
        await stream.onClosed;
    });
}
//# sourceMappingURL=liveDebug.js.map