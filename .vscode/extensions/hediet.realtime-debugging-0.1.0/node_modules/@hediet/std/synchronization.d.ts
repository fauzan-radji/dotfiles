export declare type DeferredState = "none" | "resolved" | "rejected";
export declare class Deferred<T = void> {
    readonly resolve: (value: T) => void;
    readonly reject: (reason?: any) => void;
    readonly promise: Promise<T>;
    private _state;
    readonly state: DeferredState;
    constructor();
}
export declare class Barrier<T = void> {
    private readonly deferred;
    readonly unlock: (value: T) => void;
    readonly reject: (reason?: any) => void;
    readonly onUnlocked: Promise<T>;
    readonly state: DeferredState;
}
export declare class ProducerConsumer<T> {
    private barriers;
    private nextBarriers;
    private popOrNext;
    produce(value: T): void;
    rejectSingle(reason: string): void;
    consume(): Promise<T>;
}
//# sourceMappingURL=synchronization.d.ts.map