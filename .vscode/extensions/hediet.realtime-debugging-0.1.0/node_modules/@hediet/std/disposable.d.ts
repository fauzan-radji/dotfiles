/**
 * Represents a type which can release resources, such
 * as event listening or a timer.
 */
export interface Disposable {
    /**
     * Disposes this object.
     */
    dispose(): void;
}
/**
 * Represents a type which is like a `Disposable`.
 */
export declare type DisposableLike = Disposable | ReadonlyArray<Disposable> | Set<Disposable> | undefined | void;
export declare namespace Disposable {
    function create(disposable?: DisposableLike | (() => void)): Disposable;
    const empty: Disposable;
    function normalize(disposable: DisposableLike): ReadonlyArray<Disposable>;
    function fn(callback?: (track: TrackFunction, untrack: TrackFunction) => void): {
        (): void;
    } & Disposer;
}
export declare function dispose(disposable: DisposableLike): void;
export declare type TrackFunction = <T extends DisposableLike>(disposable: T) => T;
export declare class Disposer implements Disposable {
    private disposables;
    track<T extends DisposableLike>(disposable: T): T;
    untrack<T extends DisposableLike>(disposable: T): T;
    disposed: boolean;
    readonly dispose: () => void;
}
export declare function disposeOnReturn<T>(callback: (track: TrackFunction, untrack: TrackFunction) => T): T;
export declare function addAndDeleteOnDispose<T>(set: Set<T>, item: T): Disposable;
export declare function addAndDeleteOnDispose<TKey, TValue>(set: Map<TKey, TValue>, key: TKey, item: TValue): Disposable;
//# sourceMappingURL=disposable.d.ts.map