import { Disposable } from "./disposable";
/**
 * The event handler function type.
 */
export declare type EventHandler<TArgs, TSender> = (args: TArgs, sender: TSender) => void;
export declare abstract class EventSource<TArgs = void, TSender = void> {
    /**
     * Subscribes to this event. `fn` is called whenever an event is emitted by this source.
     * The subscription can be revoked by disposing the returned value.
     */
    abstract sub(fn: EventHandler<TArgs, TSender>): Disposable;
    /**
     * Subscribes to this event. `fn` is called the first time an event is emitted by this source.
     * The subscription can be revoked by disposing the returned value.
     */
    abstract one(fn: EventHandler<TArgs, TSender>): Disposable;
    /**
     * Waits for a single event.
     */
    waitOne(): Promise<TArgs>;
}
export declare class EventEmitter<TArgs = void, TSender = void> extends EventSource<TArgs, TSender> {
    private readonly subscriptions;
    sub(fn: EventHandler<TArgs, TSender>): Disposable;
    one(fn: EventHandler<TArgs, TSender>): Disposable;
    asEvent(): EventSource<TArgs, TSender>;
    emit(args: TArgs, sender: TSender): void;
}
//# sourceMappingURL=events.d.ts.map