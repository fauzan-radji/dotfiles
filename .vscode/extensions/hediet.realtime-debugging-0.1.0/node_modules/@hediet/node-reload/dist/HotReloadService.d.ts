/// <reference types="node" />
import { UpdateReason } from "./Reconciler";
import { Disposable } from "@hediet/std/disposable";
export declare class HotReloadService {
    private readonly loggingEnabled;
    private readonly shouldTrackModule;
    static instance: HotReloadService | undefined;
    private readonly watcher;
    private readonly trackedModules;
    private level;
    log(message: string, ...args: any[]): void;
    indentLog(): Disposable;
    readonly originalModule: {
        load: (this: NodeModule, filename: string) => unknown;
        require: NodeRequireFunction;
    };
    constructor(loggingEnabled: boolean, shouldTrackModule: (filename: string) => boolean);
    dispose(): void;
    require(caller: NodeModule, request: string, callerTrackedModule?: ReconcilableModule): unknown;
    trackEntryModule(mod: NodeModule): void;
    private handleBeforeModuleLoaded;
    private handleAfterModuleRequired;
    handleFileMightHaveChanged(filename: string): boolean;
    private getReason;
    private tryToReconcile;
    private getModulesThatMightNeedReconcilation;
}
declare abstract class ReconcilableModule {
    dependencies: Set<ReconcilableModule>;
    dependants: Set<ReconcilableModule>;
    abstract readonly id: string;
    abstract tryToReconcile(reason: UpdateReason): boolean;
}
export declare class DelegateModule extends ReconcilableModule {
    private readonly idPrefix;
    private readonly _reconciler;
    static idCounter: number;
    private _id;
    constructor(idPrefix: string, _reconciler: (reason: UpdateReason) => boolean);
    readonly id: string;
    tryToReconcile(reason: UpdateReason): boolean;
}
export {};
//# sourceMappingURL=HotReloadService.d.ts.map