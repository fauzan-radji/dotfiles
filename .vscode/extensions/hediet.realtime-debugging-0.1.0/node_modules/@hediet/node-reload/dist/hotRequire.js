"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const disposable_1 = require("@hediet/std/disposable");
const HotReloadService_1 = require("./HotReloadService");
/**
 * Requires the module `request` (as in `require(request)`) and calls `loader` with the result.
 * If the required module reloads, the callback is called with the new module.
 * Returned disposables of previous invocations are disposed.
 * Use the returned disposable to stop watching for reloadings and disposing the last returned disposable.
 */
function hotRequire(caller, request, loader) {
    if (!HotReloadService_1.HotReloadService.instance) {
        const result = caller.require(request);
        loader(result, undefined);
        return disposable_1.Disposable.empty;
    }
    let lastDisposable;
    const hotRequireModule = new HotReloadService_1.DelegateModule("hotRequire", reason => {
        const old = lastExports;
        lastExports = HotReloadService_1.HotReloadService.instance.require(caller, request, hotRequireModule);
        disposable_1.dispose(lastDisposable);
        lastDisposable = loader(lastExports, old);
        return true;
    });
    let lastExports = HotReloadService_1.HotReloadService.instance.require(caller, request, hotRequireModule);
    lastDisposable = loader(lastExports, undefined);
    return disposable_1.Disposable.create(() => {
        // delete the hot require module from all dependant sets
        for (const dep of hotRequireModule.dependencies) {
            dep.dependants.delete(hotRequireModule);
        }
        disposable_1.dispose(lastDisposable);
    });
}
exports.hotRequire = hotRequire;
//# sourceMappingURL=hotRequire.js.map