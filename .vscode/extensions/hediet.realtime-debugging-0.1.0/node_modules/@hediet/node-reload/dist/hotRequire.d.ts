/// <reference types="node" />
import { DisposableLike, Disposable } from "@hediet/std/disposable";
/**
 * Requires the module `request` (as in `require(request)`) and calls `loader` with the result.
 * If the required module reloads, the callback is called with the new module.
 * Returned disposables of previous invocations are disposed.
 * Use the returned disposable to stop watching for reloadings and disposing the last returned disposable.
 */
export declare function hotRequire<TModule>(caller: NodeModule, request: string, loader: (current: TModule, old: TModule | undefined) => DisposableLike | void): Disposable;
//# sourceMappingURL=hotRequire.d.ts.map