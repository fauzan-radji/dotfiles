import { StepExecutionController } from "./StepExecutionController";
import { Disposable } from "@hediet/std/disposable";
export declare const StepsLiveDebugContract: import("@hediet/typed-json-rpc").Contract<never, {
    server: {
        updateState: import("@hediet/typed-json-rpc").NotificationType<{
            controllerId: number;
            newState: {
                id: string;
                state: "ran" | "running" | "notRun" | "undone" | "undoing";
            }[];
        }, string | undefined>;
    };
    client: {
        requestUpdate: import("@hediet/typed-json-rpc").NotificationType<{}, string | undefined>;
        runToStepIncluding: import("@hediet/typed-json-rpc").NotificationType<{
            stepId: string;
        }, string | undefined>;
    };
}>;
export declare class StepsLiveDebug {
    static readonly instance: StepsLiveDebug;
    private controllerId;
    private readonly controllers;
    private readonly servers;
    private constructor();
    registerController(controller: StepExecutionController): Disposable;
    private publishData;
    runToStepIncluding(stepId: string, controllerId?: number): void;
}
//# sourceMappingURL=StepsLiveDebug.d.ts.map