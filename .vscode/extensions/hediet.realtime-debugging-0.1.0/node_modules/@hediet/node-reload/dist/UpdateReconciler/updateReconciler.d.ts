/// <reference types="node" />
import { Disposable, DisposableLike } from "@hediet/std/disposable";
/**
 * Registers the `UpdateReconciler` for the given module.
 * If the module changes after registration,
 * it disposes all disposables registered by `disposeOnReload`
 * and updates all `hotRequireExportedFn`-handlers.
 */
export declare function registerUpdateReconciler(module: NodeModule): void;
/**
 * Gets the count of how often the given module was reconciled using the `UpdateReconciler`.
 */
export declare function getReloadCount(module: NodeModule): number;
/**
 * Disposes `disposable` when `module` is reconciled by the `UpdateReconciler`.
 */
export declare function disposeOnReload(module: NodeModule, disposable: DisposableLike): void;
export interface HotRequireExportedFnOptions {
    /**
     * Specify how changes are detected.
     * `"yes"`: Consider every reload as change.
     * `"useSource"`: Use `Function.toString()` to compare the functions source.
     * `Function`: Use a custom test whether a function has changed.
     */
    hasFnChanged?: "yes" | "useSource" | ((newFn: Function, lastFn: Function) => boolean);
}
export declare type HotRequireExportedFnUpdater<TItem extends Function> = (current: TItem, old: TItem | undefined) => DisposableLike | void;
/**
 * Uses an item that is exported in the given module.
 * It is important that `fn.name` reflects the name of the export.
 * `update` is called initially and whenever the given module reloads.
 */
export declare function hotRequireExportedFn<TItem extends Function>(module: NodeModule, fn: TItem, update: HotRequireExportedFnUpdater<TItem>): Disposable;
/**
 * Uses an item that is exported in the given module.
 * It is important that `fn.name` reflects the name of the export.
 * `update` is called initially and whenever the given module reloads.
 */
export declare function hotRequireExportedFn<TItem extends Function>(module: NodeModule, fn: TItem, options: HotRequireExportedFnOptions, update: HotRequireExportedFnUpdater<TItem>): Disposable;
export declare function hotCallExportedFunction<TArgs extends any[], TResult>(module: NodeModule, exportedFn: (...args: TArgs) => TResult, ...args: TArgs): TResult;
//# sourceMappingURL=updateReconciler.d.ts.map