import { RequestId } from "./JsonRpcTypes";
import { Channel, RequestHandler, ResponseObject, RequestObject, ChannelFactory } from "./Channel";
import { MessageStream } from "./MessageStream";
import { RpcLogger } from "./Logger";
/**
 * Implements a channel through a stream and an optional request handler to handle incoming requests.
 */
export declare class StreamBasedChannel implements Channel {
    private readonly stream;
    private readonly listener;
    private readonly logger;
    /**
     * Creates a channel factory from a given stream and logger.
     * This allows to delay specifying a `RequestHandler`.
     * Once the channel is created, it processes incoming messages.
     */
    static getFactory(stream: MessageStream, logger: RpcLogger | undefined): ChannelFactory;
    private readonly unprocessedResponses;
    private requestId;
    constructor(stream: MessageStream, listener: RequestHandler | undefined, logger: RpcLogger | undefined);
    private processRequestOrNotification;
    private processResponse;
    private newRequestId;
    sendRequest(request: RequestObject, messageIdCallback?: (requestId: RequestId) => void): Promise<ResponseObject>;
    sendNotification(notification: RequestObject): Promise<void>;
    toString(): string;
}
//# sourceMappingURL=StreamBasedChannel.d.ts.map