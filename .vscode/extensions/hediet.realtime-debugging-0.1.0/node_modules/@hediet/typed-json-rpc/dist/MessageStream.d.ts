import { Message } from "./JsonRpcTypes";
import { RpcLogger } from "./Logger";
/**
 * No messages are lost when delaying reading with `read` or `setReadCallback`.
 */
export interface MessageStream {
    /**
     * Is resolved when the stream closed.
     */
    onClosed: Promise<void>;
    /**
     * Writes a message to the stream.
     */
    write(message: Message): Promise<void>;
    /**
     * Sets a callback for incoming messages.
     */
    setReadCallback(callback: ((readMessage: Message) => void) | undefined): void;
    /**
     * Returns human readable information of this message stream.
     */
    toString(): string;
}
export declare abstract class BaseMessageStream implements MessageStream {
    private static id;
    private readonly unreadMessages;
    private onMessageCallback;
    protected readonly id: number;
    /**
     * Call this in derived classes to signal that the connection closed.
     */
    protected readonly onConnectionClosed: () => void;
    /**
     * Call this in derived classes to signal a new message.
     */
    protected onMessage(message: Message): void;
    /**
     * Writes a message to the stream.
     */
    abstract write(message: Message): Promise<void>;
    /**
     * Returns human readable information of this message stream.
     */
    abstract toString(): string;
    constructor();
    /**
     * Is resolved when the stream closed.
     */
    readonly onClosed: Promise<void>;
    /**
     * Sets a callback for incoming messages.
     */
    setReadCallback(callback: ((readMessage: Message) => void) | undefined): void;
}
/**
 * Used by `StreamLogger` to log messages.
 */
export interface MessageLogger {
    log(stream: MessageStream, type: "incoming" | "outgoing", message: Message): void;
}
/**
 * Intercepts a stream for logging.
 */
export declare class StreamLogger implements MessageStream {
    private readonly baseStream;
    private readonly logger;
    constructor(baseStream: MessageStream, logger: MessageLogger);
    readonly onClosed: Promise<void>;
    setReadCallback(callback: ((readMessage: Message) => void) | undefined): void;
    write(message: Message): Promise<void>;
    toString(): string;
}
/**
 * Logs messages to a `RpcLogger`.
 */
export declare class RpcStreamLogger extends StreamLogger {
    constructor(baseStream: MessageStream, rpcLogger: RpcLogger);
}
/**
 * Logs messages to `console`.
 */
export declare class ConsoleStreamLogger extends StreamLogger {
    constructor(baseStream: MessageStream);
}
//# sourceMappingURL=MessageStream.d.ts.map