export declare function isRequestOrNotification(msg: Message): msg is RequestMessage;
export declare type JSONObject = {
    [key: string]: JSONValue;
};
export interface JSONArray extends Array<JSONValue> {
}
export declare type JSONValue = string | number | boolean | null | JSONObject | JSONArray;
export declare type Message = RequestMessage | ResponseMessage;
/**
 * Represents a request or a notification.
 */
export interface RequestMessage {
    /**  must not match `rpc\..*` */
    method: string;
    params?: JSONValue[] | Record<string, JSONValue>;
    /** Is not set if the request is a notification. */
    id?: RequestId;
}
export declare type RequestId = number | string;
/**
 * Either result or error is set.
 */
export interface ResponseMessage {
    /**
     * This member is REQUIRED on success.
     * This member MUST NOT exist if there was an error invoking the method.
     * The value of this member is determined by the method invoked on the Server.
     */
    result?: JSONValue;
    /**
     * This member is REQUIRED on error.
     * This member MUST NOT exist if there was no error triggered during invocation.
     */
    error?: ErrorObject;
    /**
     * If there was an error in detecting the id in the Request object
     * (e.g. Parse error/Invalid Request), it MUST be Null.
     */
    id: RequestId | null;
}
export interface ErrorObject {
    /** A Number that indicates the error type that occurred. */
    code: ErrorCode;
    /** The message SHOULD be limited to a concise single sentence. */
    message: string;
    /**
     * A Primitive or Structured value that contains additional information about the error.
     * This may be omitted.
     * The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.).
     */
    data?: JSONValue;
}
export declare namespace ErrorObject {
    function create(obj: ErrorObject): ErrorObject;
}
export interface ErrorCode extends Number {
}
export declare module ErrorCode {
    /**
     * Invalid JSON was received by the server.
     * An error occurred on the server while parsing the JSON text.
     */
    const parseError: ErrorCode;
    /**
     * The JSON sent is not a valid Request object.
     */
    const invalidRequest: ErrorCode;
    /**
     * The method does not exist/is not available.
     */
    const methodNotFound: ErrorCode;
    /**
     * Invalid method parameter(s).
     */
    const invalidParams: ErrorCode;
    /**
     * 	Internal JSON-RPC error.
     */
    const internalError: ErrorCode;
    /**
     * implementation-defined server-errors.
     */
    function isServerError(code: number): boolean;
    /**
     * implementation-defined server-errors.
     */
    function serverError(code: number): ErrorCode;
    /**
     * Non-spec.
     */
    const unexpectedServerError: ErrorCode;
    function isApplicationError(code: number): boolean;
    function applicationError(code: number): ErrorCode;
    /**
     * Non-spec.
     */
    const genericApplicationError: ErrorCode;
}
//# sourceMappingURL=JsonRpcTypes.d.ts.map